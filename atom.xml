<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angelia-Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://angelia-wang.github.io/"/>
  <updated>2020-09-01T11:15:26.633Z</updated>
  <id>https://angelia-wang.github.io/</id>
  
  <author>
    <name>Angelia-Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11.1~11.6 动态规划</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.1~11.6%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.1~11.6%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-01T11:15:26.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-1-11-6-动态规划"><a href="#11-1-11-6-动态规划" class="headerlink" title="11.1~11.6 动态规划"></a>11.1~11.6 动态规划</h1><h2 id="11-2-最大连续子序列"><a href="#11-2-最大连续子序列" class="headerlink" title="11.2 最大连续子序列"></a>11.2 最大连续子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000626" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000626</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" data-fancybox="group" data-caption="image-20200831224406405" class="fancybox"><img alt="image-20200831224406405" style="zoom:50%;" title="image-20200831224406405" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>因为要输出序列的首尾元素，所以定义了结构体</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s, t; <span class="comment">//对应a中的起点终点值</span></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; dp[maxn];<span class="comment">// dp[i]表示以i结尾的最大连续子序列和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>].s = dp[<span class="number">0</span>].t = dp[<span class="number">0</span>].sum = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= dp[i - <span class="number">1</span>].sum + a[i]) &#123;</span><br><span class="line">                dp[i].s = dp[i].t = dp[i].sum = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i].s = dp[i - <span class="number">1</span>].s;</span><br><span class="line">                dp[i].t = a[i];</span><br><span class="line">                dp[i].sum = dp[i - <span class="number">1</span>].sum + a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i].sum &gt; dp[index].sum) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index].sum &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>, a[<span class="number">0</span>], a[n - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, dp[index].sum, dp[index].s, dp[index].t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-3-最长上升（不下降）子序列-LIS"><a href="#11-3-最长上升（不下降）子序列-LIS" class="headerlink" title="11.3 最长上升（不下降）子序列 LIS"></a>11.3 最长上升（不下降）子序列 LIS</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" data-fancybox="group" data-caption="image-20200831230441357" class="fancybox"><img alt="image-20200831230441357" style="zoom:50%;" title="image-20200831230441357" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm没事哈好说的，纯粹模板题</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn], dp[maxn]; <span class="comment">//dp[i]表示以a[i]结尾的最长上升子序列的长度</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= a[i]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-4-最长公共子序列"><a href="#11-4-最长公共子序列" class="headerlink" title="11.4 最长公共子序列"></a>11.4 最长公共子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000628" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000628</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" data-fancybox="group" data-caption="image-20200831232015842" class="fancybox"><img alt="image-20200831232015842" style="zoom:50%;" title="image-20200831232015842" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>递归边界若是dp[i][0]=dp[0][j]=0，则字符串下标1开始。<br>此处用string记录字符串，故字符串下标从0开始，故用<br>dp[i + 1][j + 1]=dp[i][j] + 1（若a[i] = b[j]）<br>dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);（若a[i] != b[j]）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i+1][j+1]表示a[i]和b[j]之前的最长公共子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a.length(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b.length(); i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[a.length()][b.length()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-5-最长回文字符串"><a href="#11-5-最长回文字符串" class="headerlink" title="11.5 最长回文字符串"></a>11.5 最长回文字符串</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000629" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000629</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" data-fancybox="group" data-caption="image-20200901002548365" class="fancybox"><img alt="image-20200901002548365" style="zoom:50%;" title="image-20200901002548365" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>将输入的字符串读入buf，将buf中的字母及数字存储到要进行回文比较的字符串s中（字母都转化成小写），为了最后能输对应的buf，用 p 数组记录 s 下标到 buf 下标的映射。</p><p>回文比较采用枚举回文串“中间”的i，然后不断向外扩张（书中的方法），此处要记录最长回文串长度以及起点在字符串s中的下标（都记录第一个&gt;max_len的值，因为题目中要求若有多个相同长度回文串，输出起始位置最靠左的，也就是 i 最小的）</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></span><br><span class="line"><span class="keyword">char</span> buf[maxn], s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn]; <span class="comment">//s下标到buf的映射</span></span><br><span class="line"><span class="keyword">bool</span> dp[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//dp[i][j]——s数组中下标i到j的字符串是否为回文字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gets(buf);</span><br><span class="line">    <span class="keyword">int</span> s_len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将buf中的字母变小写和数字一起放入s，建立s下标到buf的映射p</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buf); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = <span class="built_in">tolower</span>(buf[i]);</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = buf[i];</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_len = <span class="number">1</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; s_len - <span class="number">1</span> &amp;&amp; s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (max_len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                max_len = <span class="number">2</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">3</span>; L &lt;= s_len; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span> &lt; s_len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + L - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (max_len &lt; L) &#123;</span><br><span class="line">                    max_len = L;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p[start]; i &lt;= p[start + max_len - <span class="number">1</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="10-7-关键路径"><a href="#10-7-关键路径" class="headerlink" title="10.7 关键路径"></a>10.7 关键路径</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" data-fancybox="group" data-caption="image-20200901020549631" class="fancybox"><img alt="image-20200901020549631" style="zoom:50%;" title="image-20200901020549631" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题用了dp做，书p439页有讲解<br>PS：个人觉得这里输入给出的各顶点abcde没啥用，但有可能不是按照26个英文字母顺序给出的顶点<br>（我默认顶点是顺序给出的AC了）</p><p>用拓扑排序的代码可参考：<a href="https://blog.csdn.net/morizunzhu/article/details/96652800" target="_blank" rel="noopener">https://blog.csdn.net/morizunzhu/article/details/96652800</a></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn]; <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn]; <span class="comment">//dp[i]表示以i为起点的能得到的最长路径长度</span></span><br><span class="line"><span class="keyword">int</span> choose[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = DP(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; dp[i]) &#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choose[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (choose[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c,%c) "</span>, i + <span class="number">97</span>, choose[i] + <span class="number">97</span>);</span><br><span class="line">        i = choose[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(choose, choose + maxn, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">            G[a - <span class="number">97</span>][b - <span class="number">97</span>] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, k,tt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tt = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (tt &gt; ans) &#123;</span><br><span class="line">                ans = tt;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printPath(k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-6-DAG-最长路-🌟"><a href="#11-6-DAG-最长路-🌟" class="headerlink" title="11.6 DAG 最长路 🌟"></a>11.6 DAG 最长路 🌟</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000630" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000630</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" data-fancybox="group" data-caption="image-20200901023502064" class="fancybox"><img alt="image-20200901023502064" style="zoom:50%;" title="image-20200901023502064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" class="lazyload"></a><h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>将此问题是典型 DAG 最长路问题，需将每个矩形都看作一个顶点，并将嵌套关系视为顶点之间的有向边，边权为1。</p><p>1️⃣ 构造DAG图，便于使用DP求DAG的最长路 ——将每个矩形变为一个顶点，根据矩形间是否能嵌套，判断两个顶点间是否有有向边</p><ul><li>这里定义了结构体rect存储输入的矩形的宽，因为嵌套条件是a&lt;c,b&lt;d或者b&lt;c,a&lt;d，所以为了之后比较方便，统一将输入的更大的数作为长，另一个数作为宽</li><li>所有矩形数据输入完毕后，开始两两比较能否嵌套，默认每个矩形代表的顶点编号根据输入的顺序依次0~n-1，若能嵌套（r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w），则令顶点 i 与 j 之间有一条有向边（ G[i][j] = 1）</li></ul><p>2️⃣ 构造完 DAG图后，就是常规操作，使用DP计算最长路长度ans</p><p>3️⃣ 需注意的是，最后要输出的是能最多嵌套的矩形数目，⚠️ 所以输出ans+1</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, w;</span><br><span class="line">&#125; r[maxn];</span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= b) r[i].l = a, r[i].w = b;</span><br><span class="line">            <span class="keyword">else</span> r[i].l = b, r[i].w = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w) &#123;</span><br><span class="line">                    G[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.1~11.6动态规划
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11.7 背包问题</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.7%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.7%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-01T12:21:54.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-7-背包问题"><a href="#11-7-背包问题" class="headerlink" title="11.7 背包问题"></a>11.7 背包问题</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000631" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000631</a></p><h2 id="A-装箱问题"><a href="#A-装箱问题" class="headerlink" title="A 装箱问题"></a>A 装箱问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" data-fancybox="group" data-caption="image-20200901191649727" class="fancybox"><img alt="image-20200901191649727" style="zoom:50%;" title="image-20200901191649727" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就是01背包，01背包的二维状态转移方程：</p><p>令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br>dp[i][v] = max{ dp[i-1][v] , dp[i-1][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)<br>化简为一维状态转移方程：【==<strong>要逆序遍历v</strong>==】<br>dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)</p><p>此题只有容量V和每个物品的体积，没有箱子的价值，所以这里也将箱子的体积作为箱子的价值，一维状态转移方程：<br>dp[i][v]表示前i个物品恰好装入容量为v的箱子中所能获得的最大体积<br>dp[v] = max{ dp[v] , dp[v-w[i]]+w[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)<br>最后遍历所有dp[v] (0&lt;=v&lt;=V) 找到最大的那个就是能获得的最大体积max_v<br>==我现在觉得不用遍历所有的dp[v]。。。dp[V]就是答案，不明白为什么书上说要遍历所有的取最大值，我觉得dp[V]肯定是最大的==</p><p>⚠️ 最后要求输出的是最小剩余空间，故为1-ans</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 20005 <span class="comment">//体积上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100 <span class="comment">//物品上限</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> v[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxV];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//对应d[0][i]=0 前0间物品装i容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= v[i]; j--) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到dp[n][j]前n件物品装j容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, V - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-采药"><a href="#B-采药" class="headerlink" title="B 采药"></a>B 采药</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" data-fancybox="group" data-caption="image-20200901194210442" class="fancybox"><img alt="image-20200901194210442" style="zoom:50%;" title="image-20200901194210442" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就是原原本本的01背包：<br>T总共能够用来采药的时间——背包的容量<br>M山洞里的草药的数目——物品的种类<br>采摘某株草药的时间和这株草药的价值——每项物品的重量和价值</p><p>PS：我觉得最后可以直接输出dp[V]，这就是答案，不用遍历后取最大值</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105 <span class="comment">//最大物品数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005 <span class="comment">//V上限</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//初始化dp[0][i]为前0件物品装入容量为i背包中的最大价值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">            dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-货币系统-🌟🌟"><a href="#C-货币系统-🌟🌟" class="headerlink" title="C 货币系统 🌟🌟"></a>C 货币系统 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" data-fancybox="group" data-caption="image-20200901194523444" class="fancybox"><img alt="image-20200901194523444" style="zoom:50%;" title="image-20200901194523444" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" class="lazyload"></a><h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p>这道题是恰好装满的完全背包问题</p><p>1️⃣ 01背包 🆚 完全背包</p><ol><li><p>一维的状态转移方程相同：dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)<br> ==01背包要逆序遍历v，完全背包要顺序遍历v==</p></li><li><p>==完全背包的二维状态方程与01背包不同==，这就是为啥01背包是逆序遍历v，而完全背包是顺序遍历的原因<br> 完全背包二维状态方程：<br> 令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br> dp[i][v] = max{ dp[i-1][v] , dp[i][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)</p></li><li><p>所以完全背包化简为一维后，dp[v]是上一状态的dp[i-1][v]， dp[v-w[i]]是此时状态的dp[i][v-w[i]]，故顺序遍历<br> 01背包中dp[v]、dp[v-w[i]]都是上一状态的，故逆序遍历<br> （否则遍历到dp[j]时dp[0~j-1]都是此时的状态，上一状态已经被覆盖）</p></li></ol><p>2️⃣ ==恰好装满 🆚 无需完全装满==</p><ol><li>要求恰好装满背包，那么在初始化时除 dp[0]为0其它f[1..V]均设为-∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解</li><li>如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将 dp[0..V]全部设为0。</li><li>Why？可以这样理解——<ul><li>初始化的dp数组事实上就是前0件物品可以放入背包时的合法状态。</li><li>如果要求背包恰好装满，那么此时只有容量为0的背包可能被价值为0的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，它们的值就都应该是-∞了。</li><li>如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了</li></ul></li></ol><p>💡这个小技巧完全可以推广到其它类型的背包问题</p><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是恰好装满的完全背包问题，每种货币可选多次，要组成货币面值为V</p><p>1️⃣ 设置dp[i][v] 表示前i种货币恰好组成面值v的方案，为👇两种方案数相加</p><ul><li>当前不选第i种货币，则为前 i-1 种货币组成面值v的方案</li><li>当前选第i中货币，则为前i种货币组成面值 v-w[i] 的方案（w[i]存储第 i 种货币的面值）</li></ul><p>​     dp[i][v] = dp[i-1][v] + dp[i][v-w[i]] (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V)</p><p>2️⃣ 因为最终要恰好组成面值V，所以是“恰好完全装满”问题，这时dp[0][0]用前0种货币恰好组成面值0的方案数目为1<br>（只有0面值能被前0种货币构成这一种合法解）其他dp[0][v]=0，表示都没有合法解，方案数是0</p><p>3️⃣ 化简为一维动态转移方程：dp[v] = dp[v] + dp[v-w[i]] (w[i]&lt;=v&lt;=V)<br>因为是完全背包，所以顺序遍历 v，边界dp[v]=0 (0&lt;=v&lt;=V), ==dp[0]=1==</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 10005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, V;</span><br><span class="line">    <span class="keyword">int</span> w[maxn];</span><br><span class="line">    LL dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;V) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxv, <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = w[i]; v &lt;= V; v++) &#123;</span><br><span class="line">                dp[v] = dp[v] + dp[v - w[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.7背包问题
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11.8 动态规划专题总结</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.8%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.8%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-02T18:50:04.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-8-动态规划专题总结"><a href="#11-8-动态规划专题总结" class="headerlink" title="11.8 动态规划专题总结"></a>11.8 动态规划专题总结</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000632" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000632</a></p><h2 id="A-第二题-❓"><a href="#A-第二题-❓" class="headerlink" title="A 第二题 ❓"></a>A 第二题 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" data-fancybox="group" data-caption="image-20200903015140498" class="fancybox"><img alt="image-20200903015140498" style="zoom:50%;" title="image-20200903015140498" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>1️⃣ 做法一：使用DFS，搜索每一个最小于等于sum/2的子数组，并且找出其中和最接近sum/2的子数组。<br>一开始写得dfs代码👇<code>时间超时50</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (total &gt; sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (total == sum || index == n) &#123; <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt; sum1) sum1 = total;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum);</span><br></pre></td></tr></table></figure></div><p>后来剪枝优化的DFS代码👇但还是<code>时间超时50</code>🤣 _(:з」∠)_</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2️⃣ 做法二：使用DP，使用01背包的做法，寻找容量为sum/2的最优解<br>因为只有一个维度——元素大小，这相当于物品的重量，则将元素的大小也作为物品的价值<br>dp[v] = max(dp[v], dp[v - a[j]] + a[j])<br>但最后<code>运行错误50</code>，可能是内存超限，不清楚</p><p>🔵 最后在网上找到了一个DFS的AC代码，但觉得和我的差不多，不知道为啥我就超时<br><a href="https://blog.csdn.net/qq_41773202/article/details/104917949" target="_blank" rel="noopener">https://blog.csdn.net/qq_41773202/article/details/104917949</a></p><h3 id="代码（DFS——WA）"><a href="#代码（DFS——WA）" class="headerlink" title="代码（DFS——WA）"></a>代码（DFS——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, sum1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> temp, sum;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        n = <span class="number">0</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dfs(<span class="number">0</span>, <span class="number">0</span>, sum / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（DP——WA）"><a href="#代码（DP——WA）" class="headerlink" title="代码（DP——WA）"></a>代码（DP——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxv];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n, temp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, sum1;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        n = <span class="number">1</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> v = sum / <span class="number">2</span>; v &gt;= a[j]; v--) &#123;</span><br><span class="line">                    dp[v] = <span class="built_in">max</span>(dp[v], dp[v - a[j]] + a[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum1 = dp[sum / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（网上的——AC）"><a href="#代码（网上的——AC）" class="headerlink" title="代码（网上的——AC）"></a>代码（网上的——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> ans, <span class="keyword">int</span> half, <span class="keyword">int</span> num[], <span class="keyword">int</span> count, <span class="keyword">int</span> &amp;res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == count)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ans + num[index] &lt;= half) &#123;</span><br><span class="line">res = <span class="built_in">max</span>(res, ans + num[index]);<span class="comment">//res每次存小于等于half且最接近half的子数组和。</span></span><br><span class="line"><span class="keyword">if</span> (res == half)<span class="comment">//等于half最优直接返回</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs(index + <span class="number">1</span>, ans + num[index], half, num, count, res);<span class="comment">//如果选了第index个数，和还小于half继续dfs</span></span><br><span class="line">&#125;</span><br><span class="line">dfs(index + <span class="number">1</span>, ans, half, num, count, res);<span class="comment">//不选第index个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line"><span class="comment">//处理字符串，存入数组之中。</span></span><br><span class="line"><span class="keyword">int</span> pre = <span class="number">0</span>, number[<span class="number">1010</span>], count = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">' '</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> str = s.substr(pre, i - pre);</span><br><span class="line"><span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">sum += temp;</span><br><span class="line">number[count++] = temp;</span><br><span class="line">pre = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> str = s.substr(pre, s.length() - pre);<span class="comment">//判断最后一个字符串</span></span><br><span class="line"><span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">sum += temp;</span><br><span class="line">number[count++] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找最接近sum/2的子数组。</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> half = sum / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, half, number, count, res);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - res &lt;&lt; <span class="string">" "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-拦截导弹"><a href="#B-拦截导弹" class="headerlink" title="B 拦截导弹"></a>B 拦截导弹</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" data-fancybox="group" data-caption="image-20200903020331886" class="fancybox"><img alt="image-20200903020331886" style="zoom:50%;" title="image-20200903020331886" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>一开始没发现这道题是最长不上升子序列的DP题目，直接按照自己的想法做，自然WA了🙈，错误原因是认为能拦截的导弹是连续的，下一个导弹若不能拦截，则重新开始计数。最后统计最大值。</p><h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = a[<span class="number">0</span>], t_sum = <span class="number">1</span>, max_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= temp) &#123;</span><br><span class="line">                t_sum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum;</span><br><span class="line">                t_sum = <span class="number">1</span>; <span class="comment">//从当前这个比temp大的数算起</span></span><br><span class="line">            &#125;</span><br><span class="line">            temp = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum; <span class="comment">//处理最后一个t_sum</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是最长不上升子序列的问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn], dp[maxn]; <span class="comment">//dp[i] 表示以a[i]结尾的最长不下降子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt;= a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-合唱队形-🌟"><a href="#C-合唱队形-🌟" class="headerlink" title="C 合唱队形 🌟"></a>C 合唱队形 🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" data-fancybox="group" data-caption="image-20200903020748404" class="fancybox"><img alt="image-20200903020748404" style="zoom:50%;" title="image-20200903020748404" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>遍历输入的同学数组，计算每一个位置对应的最长上升子序列数目、最长下降子序列数目，假设二者和为temp，则每次对应要出列的学生数目= sum-temp+1</p><p>Why加一？<br>因为对Ti，计算[T1, Ti ]的最长上升子序列数目，计算[Ti, Tn]的最长下降子序列数目，Ti会被重复计算，所以sum-temp多减了一个Ti，要加回来。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [0, mid] 的最长上升子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mid; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [mid, n) 的最长下降子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mid; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = increase(i) + decrease(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; sum) sum = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - sum + <span class="number">1</span>); <span class="comment">//因为中间的Ti被重复计算，所以要加上去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-Coincidence"><a href="#D-Coincidence" class="headerlink" title="D: Coincidence"></a>D: Coincidence</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" data-fancybox="group" data-caption="image-20200903021359064" class="fancybox"><img alt="image-20200903021359064" style="zoom:50%;" title="image-20200903021359064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准最长上升子序列问题</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最长公共子序列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i][j]表示a的前i个字符与b的前j个字符的最长公共子序列的长度</span></span><br><span class="line">    <span class="keyword">while</span> (gets(a + <span class="number">1</span>) &amp;&amp; gets(b + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena; i++) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lenb; i++) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lena; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[lena][lenb]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-最大子矩阵-🌟🌟"><a href="#E-最大子矩阵-🌟🌟" class="headerlink" title="E 最大子矩阵 🌟🌟"></a>E 最大子矩阵 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" data-fancybox="group" data-caption="image-20200903021547619" class="fancybox"><img alt="image-20200903021547619" style="zoom:50%;" title="image-20200903021547619" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是一个二维的最大连续子序列和问题【完全没想到orz】，需降至一维进行求解<br>对于确定的从第 A 行到 第 B 行，将同一列的数相加，最终得到一个一维的数序列，对于这个数序列求最大连续子序列即可🙈</p><p>状态转移方程为：dp[i] = max(dp[i - 1] + A[i], A[i])</p><p>⚠️ 注意ans的初值（看代码）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维的最大连续子序列和</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, dp[maxn]; <span class="comment">//dp[i]以A[i]结尾的最大连续子序列和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sequence</span><span class="params">(<span class="keyword">int</span> *A)</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = dp[<span class="number">0</span>]; <span class="comment">// i从1开始否则dp[i-1]越界，ans初始化为dp[0]，否则若只有A[0]时不进行for循环，ans就得不到值了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + A[i], A[i]);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t[maxn];</span><br><span class="line">        <span class="keyword">int</span> ans = a[<span class="number">0</span>][<span class="number">0</span>], temp; <span class="comment">//!!!有可能输入的都是负数，所以不能将ans初始化为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    t[k] += a[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                temp = sequence(t);</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="F-放苹果-🌟🌟🌟"><a href="#F-放苹果-🌟🌟🌟" class="headerlink" title="F 放苹果 🌟🌟🌟"></a>F 放苹果 🌟🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" data-fancybox="group" data-caption="image-20200903022028745" class="fancybox"><img alt="image-20200903022028745" style="zoom:50%;" title="image-20200903022028745" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" class="lazyload"></a><h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>所有不同的摆放方法可以分为两类：至少有一个盘子空着和所有的盘子都不空。<br>我们可以分别计算这两类摆放方法的数目，然后把它们加起来。<br>1️⃣ 至少空一个盘子：N 个盘子摆放 M 个苹果的摆放数目 = N-1 个盘子摆放 M 个苹果的摆放方法数目<br>2️⃣所有盘子都不空：即N个盘子中至少有1个苹果，则 N个盘子摆放 M 个苹果的摆放方法数目 = N 个盘子摆放 M-N 个苹果的摆放方法数目<br>我们可以据此来用递归的方法求解这个问题。</p><p>设f（m,n）为m个苹果，n个盘子的放法数目，则先对n作讨论：</p><ol><li>若 n&gt;m，必定至少有 n-m 个盘子永远空着，去掉它们对摆放苹果放法数目不产生影响 if(n&gt;m) f(m,n)=f(m,m)</li><li>若 n&lt;=m，不同的方法可以分为两类👇<ul><li>有至少一个盘子空着：f(m,n)=f(m,n-1)</li><li>所有盘子都有苹果，则可以从每个盘子中拿掉一个苹果，不影响不同放法的数目f(m,n)=f(m-n,n)</li><li>总的放苹果的放法数目等于两者的和，即f(m,n)=f(m,n-1)+ f(m-n,n)</li></ul></li><li>边界：f(m,n)=f(m,n-1) 时 n 不断变小，f(m,n)=f(m-n,n)时 m 不断变小，因为n&gt;m时return f(m,m)终会到达出口m==0<ul><li>n=1时，所有苹果都必须放到一个盘子里，所有返回1</li><li>m=0时，当没有苹果可放时，定义为1种放法（空盘）</li></ul></li></ol><p>PS：这个blog是各种情况的总结，我没自己看orz，有时间研究下：<br><a href="https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html" target="_blank" rel="noopener">https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html</a></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// m个苹果，n个盘子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没有苹果/只有一个盘子都只有一种放法：空盘子/放这个盘子里</span></span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> f(m, m); <span class="comment">//盘子比苹果多，则至少有n-m个空盘子，所以接下来需要在m个盘子里放m个苹果</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(m - n, n) + f(m, n - <span class="number">1</span>); <span class="comment">//苹果比盘子多，则可以不空盘子，在当前所有盘子里放一个苹果/空一个盘子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f(m, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="G-点菜问题"><a href="#G-点菜问题" class="headerlink" title="G 点菜问题"></a>G 点菜问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" data-fancybox="group" data-caption="image-20200903022224149" class="fancybox"><img alt="image-20200903022224149" style="zoom:50%;" title="image-20200903022224149" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" class="lazyload"></a><h3 id="题目解析-6"><a href="#题目解析-6" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准01背包题</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="H-最大包销额-❓"><a href="#H-最大包销额-❓" class="headerlink" title="H 最大包销额 ❓"></a>H 最大包销额 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" data-fancybox="group" data-caption="image-20200903022345915" class="fancybox"><img alt="image-20200903022345915" style="zoom:50%;" title="image-20200903022345915" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" class="lazyload"></a><h3 id="题目解析-7"><a href="#题目解析-7" class="headerlink" title="题目解析"></a>题目解析</h3><p>首先判断每张发票的有效性，若有效则将这张发票的金额和*100（化为整数）加入需计算01背包的数组w<br>⚠️ 不能将有效发票的每个物品金额*100加入w数组，因为每张发票要报销只能一整张包销</p><p>01背包的容量是报销额度*100</p><p>🔞但最后还是不知道为啥<code>错误50</code> 🙈🙃吐血了</p><h3 id="错误代码-1"><a href="#错误代码-1" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> q, temp[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m, V, w[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>, &amp;q, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        V = <span class="keyword">int</span>(q * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> lenw = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span> t;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c:%lf"</span>, &amp;t, &amp;temp[j]);</span><br><span class="line">                <span class="keyword">if</span> (temp[j] &gt; <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (t == <span class="string">'A'</span> || t == <span class="string">'B'</span> || t == <span class="string">'C'</span>) sum += temp[j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; m || sum &gt; <span class="number">1000</span>) <span class="keyword">continue</span>;</span><br><span class="line">            w[lenw++] = <span class="keyword">int</span>(sum * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenw; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, dp[V] / <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="I-毕业bg"><a href="#I-毕业bg" class="headerlink" title="I 毕业bg"></a>I 毕业bg</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" data-fancybox="group" data-caption="image-20200903022503520" class="fancybox"><img alt="image-20200903022503520" style="zoom:50%;" title="image-20200903022503520" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" class="lazyload"></a><h3 id="题目解析-8"><a href="#题目解析-8" class="headerlink" title="题目解析"></a>题目解析</h3><p>网上说是01背包题。。。完全没看出来_(:з」∠)_</p><p>发起人必须在几小时后离开，这就相当于背包的体积，即在这几个小时里，可以安排多少场bg，以获得最大的快乐度，然后持续时间，相当于一个物品的容积，快乐度相当于物品的价值</p><p>⚠️ </p><ol><li>要对所有bg按照发起人离开时间 t 从小到大进行排序，保证每次新加进来一个bg后可以保证这段时间内前面所有bg都能完成。</li><li>每次当前dp[i][v]时的背包容量是dp[i].t，不是V</li><li>最后不能直接输出dp[V]，要遍历多有的dp[i]，因为每次的背包容量不一定相同</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BG</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> h, l, t;</span><br><span class="line">&#125; bg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(BG a, BG b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;bg[i].h, &amp;bg[i].l, &amp;bg[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(bg + <span class="number">1</span>, bg + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">int</span> V = bg[n].t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = bg[i].t; v &gt;= bg[i].l; v--) &#123; <span class="comment">//前i个活动的V是bg[i].t</span></span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - bg[i].l] + bg[i].h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//!!! 不能直接输出dp[V]</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = V; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.8动态规划专题总结
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>7.1 栈的应用</title>
    <link href="https://angelia-wang.github.io/2020/08/03/7.1%20%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://angelia-wang.github.io/2020/08/03/7.1%20%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-03T14:29:20.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-1-栈的应用"><a href="#7-1-栈的应用" class="headerlink" title="7.1 栈的应用"></a>7.1 栈的应用</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000605" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000605</a></p><p><code>6.8 stack的常见用法详解</code>与此节题目相同</p><h2 id="A-简单计算器"><a href="#A-简单计算器" class="headerlink" title="A  简单计算器"></a>A  简单计算器</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" data-fancybox="group" data-caption="image-20200803214737346" class="fancybox"><img alt="image-20200803214737346" style="zoom:50%;" title="image-20200803214737346" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm代码注释很清楚，标注⚠️的地方都是写代码的时候漏掉的，要注意！！！</p><p>一开始没有写node结构体，但是考虑到如果不管操作数还是操作符都用char表示的话，操作数最大为127而且不能有浮点数，这显然是不可能的，所以还是改成了node结构体。</p><p>【书p147也有此题解析和代码，可参考】</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> num;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">bool</span> flag;  <span class="comment">//为true表示为操作符，false为操作符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s;    <span class="comment">//在change函数中用于存放放操作符，在calculate函数中存放操作数</span></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;    <span class="comment">//存放后缀表达式</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;<span class="comment">//操作符优先级</span></span><br><span class="line"><span class="built_in">string</span> str;       <span class="comment">//读入的中缀表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历中缀表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length();) &#123;</span><br><span class="line">        node temp;</span><br><span class="line">        <span class="comment">//若是操作数，则加入q</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            temp.flag = <span class="literal">true</span>;</span><br><span class="line">            temp.num = str[i++] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; str.length() &amp;&amp; str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;  <span class="comment">//i &lt; str.length()很重要！！！⚠️</span></span><br><span class="line">                temp.num = temp.num * <span class="number">10</span> + str[i] - <span class="string">'0'</span>; <span class="comment">//因为这个操作数不一定只有一位</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是操作符</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp.flag = <span class="literal">false</span>;</span><br><span class="line">            temp.op = str[i];</span><br><span class="line">            <span class="comment">//若操作符优先级 &lt;= 栈顶优先级，则不停出栈</span></span><br><span class="line">            <span class="keyword">while</span> (!s.empty() &amp;&amp; mp[str[i]] &lt;= mp[s.top().op]) &#123;  <span class="comment">// !s.empty() 很重要！！！⚠️</span></span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若s中还有操作符，则加入后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        q.push(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算后缀表达式,最后s中的数为最终结果</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop(); <span class="comment">//别忘了！！！⚠️</span></span><br><span class="line">        <span class="comment">//为操作数，则压栈</span></span><br><span class="line">        <span class="keyword">if</span> (temp.flag) &#123;</span><br><span class="line">            s.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为操作符，则出栈两个进行计算，然后结果压栈</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            node a, b, c;</span><br><span class="line">            c.flag = <span class="literal">true</span>;</span><br><span class="line">            b = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            a = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (temp.op == <span class="string">'+'</span>) c.num = a.num + b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'-'</span>) c.num = a.num - b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'*'</span>) c.num = a.num * b.num;</span><br><span class="line">            <span class="keyword">else</span> c.num = a.num / b.num;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.top().num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp[<span class="string">'+'</span>] = <span class="number">1</span>, mp[<span class="string">'-'</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">'*'</span>] = <span class="number">2</span>, mp[<span class="string">'/'</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str) &amp;&amp; str != <span class="string">"0"</span>) &#123;</span><br><span class="line">        <span class="comment">//将str的所有空格都去掉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span>::iterator it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">' '</span>) str.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">        change();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, calculate());</span><br><span class="line">        s.pop(); <span class="comment">//因为s最后还有一个数字，要清空s</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-Problem-E"><a href="#B-Problem-E" class="headerlink" title="B Problem E"></a>B Problem E</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" data-fancybox="group" data-caption="image-20200803215233202" class="fancybox"><img alt="image-20200803215233202" style="zoom:50%;" title="image-20200803215233202" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>定义栈stack，遍历输入的字符串。</p><ul><li>若是 (、[、{ 肯定要入栈；</li><li>若是 )、]、}，若栈为空则return false；若栈不为空，但与栈顶元素不匹配，则return false</li><li>遍历完后，若stack为空，证明都匹配完全 return true；否则证明有多余的符号，return false【故可简化为return stack.empty() 】</li></ul><p>⚠️ 使用getline时，因为getline可以读入空格，故若前面使用了scanf，要先用getchar吸收掉换行</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">'('</span> &amp;&amp; b == <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'['</span> &amp;&amp; b == <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'&#123;'</span> &amp;&amp; b == <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span> || str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span>) s.push(str[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span> || str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!match(s.top(), str[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            getline(<span class="built_in">cin</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (deal()) <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()) s.pop();<span class="comment">//别忘了最后要清空stack，因为下一次还要用的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 7.1栈的应用
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>8.1 DFS</title>
    <link href="https://angelia-wang.github.io/2020/08/03/8.1%20DFS/"/>
    <id>https://angelia-wang.github.io/2020/08/03/8.1%20DFS/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-25T15:05:37.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-1-DFS"><a href="#8-1-DFS" class="headerlink" title="8.1 DFS"></a>8.1 DFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000608" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000608</a></p><h2 id="B-【递归入门】组合的输出"><a href="#B-【递归入门】组合的输出" class="headerlink" title="B 【递归入门】组合的输出"></a>B 【递归入门】组合的输出</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" data-fancybox="group" data-caption="image-20200824041227376" class="fancybox"><img alt="image-20200824041227376" style="zoom:50%;" title="image-20200824041227376" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题实际是递归求全排列的变体</p><p>🆚 求全排列</p><ol><li>全排列每次从n个数中选择一个没选过的，最后组成n个数的序列；此处从n个数中选择一个没选过的，最后组成r个数的序列</li><li>全排列中对n个数序列之间的顺序无要求；此处是组合，也就是不要重复的序列，可通过添加限制要求：后一个数一定比前一个数大实现——x&gt;=p[index-1]</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> n, r, p[maxn];</span><br><span class="line"><span class="keyword">bool</span> hashtable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == r + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[x] &amp;&amp; x &gt;= p[index - <span class="number">1</span>]) &#123;</span><br><span class="line">            p[index] = x;</span><br><span class="line">            hashtable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashtable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r) != EOF) &#123;</span><br><span class="line">        generateP(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="E【递归入门】出栈序列统计"><a href="#E【递归入门】出栈序列统计" class="headerlink" title="E【递归入门】出栈序列统计"></a>E【递归入门】出栈序列统计</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" data-fancybox="group" data-caption="image-20200824041717626" class="fancybox"><img alt="image-20200824041717626" style="zoom:50%;" title="image-20200824041717626" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目意思：输入n接下来模拟栈的入栈、出栈操作，需要得到入栈n次，出栈n次。问有几种不同的操作顺序<br>（一开始愣是没读懂题目啥意思😂）</p><p>设入栈次数in_num，出栈次数out_num<br>所以DFS岔路口是选择入栈还是出栈。<br>若in_num &gt; n || out_num &gt; n 到达死胡同，in_num == n &amp;&amp; out_num == n 表示终点。其他都是岔路口。<br>但需注意的是，只有 in_num &gt; out_num 时才能出栈 </p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in_num表示入栈次数，out_num表示出栈次数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> in_num, <span class="keyword">int</span> out_num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_num == n &amp;&amp; out_num == n) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; n || out_num &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (in_num &lt; n) DFS(in_num + <span class="number">1</span>, out_num); <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; out_num &amp;&amp; out_num &lt; n) DFS(in_num, out_num + <span class="number">1</span>); <span class="comment">//出栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="F-【递归入门】走迷宫"><a href="#F-【递归入门】走迷宫" class="headerlink" title="F 【递归入门】走迷宫"></a>F 【递归入门】走迷宫</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" data-fancybox="group" data-caption="image-20200824042426531" class="fancybox"><img alt="image-20200824042426531" style="zoom:50%;" title="image-20200824042426531" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ </p><ol><li>要弄清楚x，y方向和n、m界限分别是对x还是y</li><li>题目要求按照左上右下方向拓展，这里WA了一次</li></ol><p>题外话：这里用bool数组b[i][j]记录点x=i，y=j是否已经走过，但是BFS中用bool数组记录点是否如果队</p><p>💡这里代码没有做矩阵有全0行/全0列时肯定无解的剪枝</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m,digit=<span class="number">0</span>;</span><br><span class="line">node S,T, Node;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];<span class="comment">//存储迷宫的情况</span></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">20</span>][<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;;<span class="comment">//每个点有没有走过</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;; <span class="comment">//左上右下</span></span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == T.x &amp;&amp; y == T.y) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(%d,%d)"</span>,(*it).x,(*it).y);</span><br><span class="line">            <span class="keyword">if</span>(it&lt;ans.<span class="built_in">end</span>()<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        digit++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> newX = x + X[i];</span><br><span class="line">        <span class="keyword">int</span> newY = y + Y[i];</span><br><span class="line">        <span class="comment">// 结点可以走，且没被走过</span></span><br><span class="line">        <span class="keyword">if</span> (judge(newX, newY) &amp;&amp; !b[newX][newY]) &#123;</span><br><span class="line">            Node.x = newX;</span><br><span class="line">            Node.y = newY;</span><br><span class="line">            b[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">            ans.push_back(Node);</span><br><span class="line">            DFS(Node.x, Node.y);</span><br><span class="line">            ans.pop_back();</span><br><span class="line">            b[newX][newY] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S.x, &amp;S.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T.x, &amp;T.y);</span><br><span class="line">    b[S.x][S.y]= <span class="literal">true</span>;</span><br><span class="line">    ans.push_back(S);</span><br><span class="line">    DFS(S.x,S.y);</span><br><span class="line">    <span class="keyword">if</span> (digit==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 8.1DFS
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>8.2 BFS</title>
    <link href="https://angelia-wang.github.io/2020/08/03/8.2%20BFS/"/>
    <id>https://angelia-wang.github.io/2020/08/03/8.2%20BFS/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-31T14:43:25.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-2-BFS"><a href="#8-2-BFS" class="headerlink" title="8.2 BFS"></a>8.2 BFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000609" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000609</a></p><h2 id="A-Jugs"><a href="#A-Jugs" class="headerlink" title="A Jugs"></a>A Jugs</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" data-fancybox="group" data-caption="image-20200825011917985" class="fancybox"><img alt="image-20200825011917985" style="zoom:50%;" title="image-20200825011917985" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" class="lazyload"></a><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" data-fancybox="group" data-caption="image-20200825011952480" class="fancybox"><img alt="image-20200825011952480" style="zoom:50%;" title="image-20200825011952480" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>你有两个杯子A、B和无限量的水，杯子容量是Ca、Cb，问如何通过👇操作，使第二杯中有容量为N的水。<br>能进行的操作是 “fill A”, “empty A”, “fill B”, “empty B”, “pour A B”, “pour B A”<br>其中pour A B表示将A中的水倒入B中，直到A为空或者B满</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>BFS题解模板👇</p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" data-fancybox="group" data-caption="image-20200825012235783" class="fancybox"><img alt="image-20200825012235783" style="zoom:40%;" title="image-20200825012235783" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" class="lazyload"></a><ol><li><p>这道题有6中操作，所以BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b，通过a、b来判断能进行什么操作。又因为最后要输出所有操作，故每一步选择什么操作都要记录。</p><ul><li>因此，定义结构体node，含成员a、b、string型的op</li><li><strong>💡tip：每次记录操作不便于存储，所以定义一个ans[6]数组存放操作，则op只需累加记录每一步操作对应的数就可以</strong></li></ul></li><li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b的状态是否重复入队</p></li><li><p>根据BFS模板写代码，S表示初始状态，杯中水量a、b都为0。S入队。</p><ul><li>while循环中每次取出队首元素，判断b是否为K（是否满足条件），若是则输出具体操作</li><li>否则，判断当前a、b容量下能进行什么操作，将对应的元素加入队列</li></ul></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">string</span> op) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;op = op;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ans[<span class="number">6</span>] = &#123;<span class="string">"fill A"</span>, <span class="string">"empty A"</span>, <span class="string">"fill B"</span>, <span class="string">"empty B"</span>, <span class="string">"pour A B"</span>, <span class="string">"pour B A"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ca, cb, n;</span><br><span class="line"><span class="function">node <span class="title">S</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//a、b为目前两容器的量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q; <span class="comment">//定义队列</span></span><br><span class="line">    q.push(S);     <span class="comment">//首元素入队</span></span><br><span class="line">    inq[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;<span class="comment">//标记首元素已入队</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">//队列非空</span></span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (temp.b == n) &#123;  <span class="comment">//终止条件是第二杯水满足题目要求</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[temp.op[i] - <span class="string">'0'</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[ca][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b, temp.op + <span class="string">"0"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[ca][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(<span class="number">0</span>, temp.b, temp.op + <span class="string">"1"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][cb]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, cb, temp.op + <span class="string">"2"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][cb] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, <span class="number">0</span>, temp.op + <span class="string">"3"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从A倒入B</span></span><br><span class="line">        <span class="keyword">if</span> (temp.a &gt;= cb - temp.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[temp.a - (cb - temp.b)][cb]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(temp.a - (cb - temp.b), cb, temp.op + <span class="string">"4"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[temp.a - (cb - temp.b)][cb] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b + temp.a]) &#123;</span><br><span class="line">            node t(<span class="number">0</span>, temp.b + temp.a, temp.op + <span class="string">"4"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b + temp.a] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从B倒入A</span></span><br><span class="line">        <span class="keyword">if</span> (temp.b &gt;= ca - temp.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][temp.b - (ca - temp.a)]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b - (ca - temp.a), temp.op + <span class="string">"5"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[ca][temp.b - (ca - temp.a)] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[temp.a + temp.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node t(temp.a + temp.b, <span class="number">0</span>, temp.op + <span class="string">"5"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a + temp.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ca, &amp;cb, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(inq,<span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">        BFS();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="B-DFS-or-BFS"><a href="#B-DFS-or-BFS" class="headerlink" title="B DFS or BFS?"></a>B DFS or BFS?</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" data-fancybox="group" data-caption="image-20200825013705700" class="fancybox"><img alt="image-20200825013705700" style="zoom:50%;" title="image-20200825013705700" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目注意点⚠️</p><ol><li><p>可以原地不动</p></li><li><p>因为石头不断下降，所以每次面对的地图情况都不同，所以不用bool数组判断是否已入队</p></li><li><p>每入队一层结点，石头下降一次，所以node结点中需要当前层数step</p><ul><li>观察用法，不能在while中的for循环中判断flag=true，最后for循环外根据flag判断是否更新地图，因为只有当本层结点都走过后才能更新地图到下一层结点</li><li>所以通过定义level，判断level &lt; Node.step，然后选择是否更新地图</li><li>🌰 假设第0层有A，第1层有B、C、D，第2层B后有E、F。<ul><li>🔵 如果通过flag方式，则A入队，for循环中BCD入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第1层状态。</li><li>B出队，for循环中EF入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第2层状态。【此时queue中为CDEF】</li><li>C出队，此时应该是第1层石头的状态，不应该是第2层，所以出错了❌</li><li>🔵 如果通过level方式，则A入队，for循环中BCD入队</li><li>B出队，此时B的step=1，level=0&lt;1，故下降一层石头变成第1层状态，for循环中EF入队</li><li>C出队，此时C的step=1，level=step，故不下降石头 ✅</li></ul></li></ul></li><li><p>更新地图只能从后往前更新 for (int i = 7; i &gt;= 0; i–) ，否则从前往后一个石头就变成一列石头了【自己思考下】</p></li><li><p>如果step&gt;=8 肯定能走到终点，因为石头都掉光了（剪枝）</p></li><li><p>每组数据之后还有一个空行，要getchar()</p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>; <span class="comment">//每层掉一次石头</span></span><br><span class="line">&#125; U, A, Node;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"><span class="comment">// 上，下，左，右，左上，右上，左下，右下，原地不动</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">9</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">9</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否安全</span></span><br><span class="line"><span class="comment">//不需要判是否已入队，因为石头会下降所以每次都是不同情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">7</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">7</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置有石头</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; a[x - <span class="number">1</span>][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置上方有石头</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新大石头位置</span></span><br><span class="line"><span class="comment">//!!!!! 要从后往前更新，本来我想的是在先判断这个位置是不是落石，如果是的话，那就把下面一个也变成落石，可是这样的话，就会对地图再一次更新</span></span><br><span class="line"><span class="comment">//就会产生一列都是S的情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">7</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">'S'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; <span class="number">8</span>) a[i + <span class="number">1</span>][j] = <span class="string">'S'</span>;</span><br><span class="line">                a[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(U);</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (level &lt; Node.<span class="built_in">step</span>) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">            level = Node.<span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Node.x == A.x &amp;&amp; Node.y == A.y) || Node.<span class="built_in">step</span> &gt;= <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//若能撑过8步，则石头都掉完了，肯定能到达终点</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = Node.x + X[i];</span><br><span class="line">            <span class="keyword">int</span> newY = Node.y + Y[i];</span><br><span class="line">            <span class="comment">//当前位置安全</span></span><br><span class="line">            <span class="keyword">if</span> (judge(newX, newY)) &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                node temp;</span><br><span class="line">                temp.x = newX, temp.y = newY, temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">int</span> time = n;</span><br><span class="line">    U.x = <span class="number">7</span>, U.y = <span class="number">0</span>, U.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    A.x = <span class="number">0</span>, A.y = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();<span class="comment">//去掉换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        getchar(); <span class="comment">//每组数据后还有一个空行要去掉</span></span><br><span class="line">        <span class="keyword">if</span> (BFS()) <span class="built_in">printf</span>(<span class="string">"Case #%d: Yes\n"</span>, time - n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>, time - n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-【宽搜入门】8数码难题"><a href="#C-【宽搜入门】8数码难题" class="headerlink" title="C 【宽搜入门】8数码难题"></a>C 【宽搜入门】8数码难题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" data-fancybox="group" data-caption="image-20200825014955081" class="fancybox"><img alt="image-20200825014955081" style="zoom:50%;" title="image-20200825014955081" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ 这道题中，不断移动的是空行，每次空格0能否上下左右移动，除了要判断碰到墙壁的情况，还要判断当前9个数字的状态是否重复。</p><ol><li><p>因为移动的是空格（题中用0表示），所以需记录空格的位置x、y。为了记录每次9中数字的状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</p></li><li><p>S表示开始状态，T表示目的状态。</p></li><li><p>队列中每次取出的队首元素如果状态和T相同，则输出步数；</p><p> 否则看当前0能移动的位置，判断此时的状态序列是否重复，若否则加入队列</p></li><li><p>❗️因为vector是一维数组，0记录的是在二维数组中的位置，所以转换每次0移动后转换为序列时要注意换算。</p><ul><li>若0的坐标（x,y）转换到一维数组中是status[3*x+y]<ul><li>🌰 输入样例中“2，8，3，1，6，4，7，0，5”中0的坐标是（2，1），在status中是status[7]</li></ul></li><li>若0向上移动X[i]=-1，则status中对应下标-3</li><li>若0向下移动X[i]=1，则status中对应下标+3</li><li>若0向左移动Y[i]=-1,则status中对应下标-1</li><li>若0向右移动Y[i]=1,则status中对应下标+1</li></ul></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="keyword">int</span> x, y, <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            node temp;</span><br><span class="line">            temp.x = Node.x + X[i];</span><br><span class="line">            temp.y = Node.y + Y[i];</span><br><span class="line">            <span class="keyword">if</span> (temp.x &lt; <span class="number">0</span> || temp.x &gt; <span class="number">2</span> || temp.y &lt; <span class="number">0</span> || temp.y &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 得到新的序列</span></span><br><span class="line">            temp.status = Node.status;</span><br><span class="line">            <span class="keyword">int</span> pos_0 = <span class="number">3</span> * Node.x + Node.y;</span><br><span class="line">            <span class="keyword">if</span> (X[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">3</span>]);</span><br><span class="line">                pos_0 += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (X[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">3</span>]);</span><br><span class="line">                pos_0 -= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Y[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Y[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!hashtable[temp.status]) &#123;</span><br><span class="line">                temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                hashtable[temp.status] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            S.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) S.x = i, S.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            T.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) T.x = i, T.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, BFS());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-【宽搜入门】魔板"><a href="#D-【宽搜入门】魔板" class="headerlink" title="D 【宽搜入门】魔板"></a>D 【宽搜入门】魔板</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" data-fancybox="group" data-caption="image-20200825020323065" class="fancybox"><img alt="image-20200825020323065" style="zoom:50%;" title="image-20200825020323065" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>与C题差不多，都需要记录每次的总体数字状态（异曲同工的感觉🙃）</p><p>⚠️ 这道题中，魔板每次都能进行A、B、C三种操作，要判断魔板的状态是否重复。</p><ol><li>因为最后要求输出具体的操作，所以使用string记录每次操作，为了记录每次魔板状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</li><li>❗️开始状态总是 1 2 3 4 5 6 7 8（是顺时针取的数），最终要达到输入的状态。</li><li>当心每次A、B、C操作的状态转换：</li></ol><ul><li>🌰 从基本状态 1 2 3 4 5 6 7 8作A转换 -》8 7 6 5 4 3 2 1<ul><li>🌰 从基本状态 1 2 3 <u>4 5</u> 6 7 8作B转换 -》<u>4</u> 1 2 3 6 7 8 <u>5</u></li></ul></li><li>🌰 从基本状态 1 <u>2 3</u> 4 5 <u>6 7</u> 8作C转换 -》1 <u>7 2</u> 4 5 <u>3 6</u> 8</li></ul><ol start="4"><li>❗️题目要求输出除最后一行外，每行输出60个字符</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 王怡静 on 2020/8/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop()</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Node.<span class="built_in">step</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Node.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; Node.op[i<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">60</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作A——交换上下两行</span></span><br><span class="line">        node temp1 = node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            temp1.status.push_back(Node.status[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp1.status]) &#123;</span><br><span class="line">            temp1.op = Node.op + <span class="string">"A"</span>;</span><br><span class="line">            temp1.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp1.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作B——将最右边的一列插入最左边</span></span><br><span class="line">        node temp2 = node();</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">8</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp2.status]) &#123;</span><br><span class="line">            temp2.op = Node.op + <span class="string">"B"</span>;</span><br><span class="line">            temp2.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp2.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作C——魔板中央四格作顺时针旋转</span></span><br><span class="line">        node temp3 = node();</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">0</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">6</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">1</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">2</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">5</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">7</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp3.status]) &#123;</span><br><span class="line">            temp3.op = Node.op + <span class="string">"C"</span>;</span><br><span class="line">            temp3.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp3.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) S.status.push_back(i);</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        T.status.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    BFS();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-【宽搜入门】巧妙取量"><a href="#E-【宽搜入门】巧妙取量" class="headerlink" title="E 【宽搜入门】巧妙取量"></a>E 【宽搜入门】巧妙取量</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" data-fancybox="group" data-caption="image-20200825021349019" class="fancybox"><img alt="image-20200825021349019" style="zoom:50%;" title="image-20200825021349019" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实和A题倒水性质是一样的，区别在于，这道题一开始的水量是满杯A的水，没有无限的水给你装。最后判断三个杯子中一个是要求的K水量就可以。<br>所以操作就6种：A倒B、A倒C、B倒A、B倒C、C倒A、C倒B。</p><ol><li><p>BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b、c，因为最后只需要输出最少的步骤，所以再存一下step就可以</p></li><li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b、c的状态是否重复入队</p></li><li><p>根据BFS模板写代码，S表示初始状态，杯中水量a为容量ca，b和c都为0。S入队。</p><ul><li>while循环中每次取出队首元素，判断Node.a==k || Node.b==k|| Node.c==k 若是则return Node.step</li><li>否则，判断当前a、b、c容量下能进行什么操作，将对应的元素加入队列</li></ul></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ca, cb, cc, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> <span class="built_in">step</span>) : a(a), b(b), c(c), <span class="built_in">step</span>(<span class="built_in">step</span>) &#123;&#125;</span><br><span class="line">&#125; S, Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    q.push(S);</span><br><span class="line">    inq[S.a][S.b][S.c] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(Node.a==k || Node.b==k|| Node.c==k) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="comment">// A-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cb - Node.b)][cb][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cb - Node.b), cb, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cb - Node.b)][cb][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.a + Node.b][Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.a + Node.b, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.a + Node.b][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cc - Node.c)][Node.b][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cc - Node.c), Node.b, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cc - Node.c)][Node.b][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.b][Node.a + Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.b, Node.a + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.b][Node.a + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b - (ca - Node.a)][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b - (ca - Node.a), Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b - (ca - Node.a)][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.b][<span class="number">0</span>][Node.c]) &#123;</span><br><span class="line">            node temp(Node.a + Node.b, <span class="number">0</span>, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.b][<span class="number">0</span>][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][Node.b - cc + Node.c][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, Node.b - cc + Node.c, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][Node.b - cc + Node.c][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][<span class="number">0</span>][Node.b + Node.c]) &#123;</span><br><span class="line">            node temp(Node.a, <span class="number">0</span>, Node.b + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][<span class="number">0</span>][Node.b + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b][Node.c - ca + Node.a]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b, Node.c - ca + Node.a, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b][Node.c - ca + Node.a] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.c][Node.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a + Node.c, Node.b, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.c][Node.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][cb][Node.c - cb + Node.b]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, cb, Node.c - cb + Node.b, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][cb][Node.c - cb + Node.b] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][Node.b + Node.c][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a, Node.b + Node.c, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][Node.b + Node.c][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;ca, &amp;cb, &amp;cc, &amp;k) != EOF) &#123;</span><br><span class="line">        S.a = ca, S.b = <span class="number">0</span>, S.c = <span class="number">0</span>, S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=BFS();</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n%d\n"</span>,ans);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 8.2BFS
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>6.9 algorithm头文件下常用函数介绍</title>
    <link href="https://angelia-wang.github.io/2020/08/02/6.9%20algorithm/"/>
    <id>https://angelia-wang.github.io/2020/08/02/6.9%20algorithm/</id>
    <published>2020-08-02T07:47:25.000Z</published>
    <updated>2020-08-03T14:10:03.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-9-algorithm头文件下常用函数介绍"><a href="#6-9-algorithm头文件下常用函数介绍" class="headerlink" title="6.9 algorithm头文件下常用函数介绍"></a>6.9 algorithm头文件下常用函数介绍</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000604" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000604</a></p><h2 id="B-全排列"><a href="#B-全排列" class="headerlink" title="B  全排列"></a>B  全排列</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️next_permutation不能对string使用，可对char使用</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> (gets(a)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(a, a + <span class="built_in">strlen</span>(a)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 6.9algorithm头文件下常用函数介绍
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>6.5 queue的常见用法详解</title>
    <link href="https://angelia-wang.github.io/2020/08/01/6.5%20queue/"/>
    <id>https://angelia-wang.github.io/2020/08/01/6.5%20queue/</id>
    <published>2020-08-01T07:52:25.000Z</published>
    <updated>2020-08-01T10:20:12.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-5-queue的常见用法详解"><a href="#6-5-queue的常见用法详解" class="headerlink" title="6.5 queue的常见用法详解"></a>6.5 queue的常见用法详解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000600" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000600</a></p><h2 id="A-C语言-数字交换"><a href="#A-C语言-数字交换" class="headerlink" title="A  C语言-数字交换"></a>A  C语言-数字交换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" data-fancybox="group" data-caption="image-20200801180500941" class="fancybox"><img alt="image-20200801180500941" style="zoom:50%;" title="image-20200801180500941" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就需要注意一点⚠️</p><p>有的数字可能要交换两次：如 9 3 4 5 6 2 2 2 2 7</p><p>最小数为2，所以若先把最小的和第一个数交换，即2和9交换，则2 3 4 5 6 9 2 2 2 7</p><p>最大数位9，把最大的和最后一个数交换，即9和7交换，则2 3 4 5 6 7 2 2 2 9</p><p>则9交换了两次</p><p><strong><u>所以每交换一次需要重新计算最大值/最小值；</u></strong></p><p>若按照错误的代码来，直接一次记录最大最小值9和2的序号为0、5，然后最小数序号5和第一个数换，为2 3 4 5 6 9 2 2 2 7，最大数序号0和最后一个数换，为7 3 4 5 6 9 2 2 2 2，就不对了 🤦‍♀️</p><h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 6.5queue的常见用法详解
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.1 简单模拟</title>
    <link href="https://angelia-wang.github.io/2020/07/01/3.1%20%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/"/>
    <id>https://angelia-wang.github.io/2020/07/01/3.1%20%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-03T16:53:34.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-1-简单模拟"><a href="#3-1-简单模拟" class="headerlink" title="3.1 简单模拟"></a>3.1 简单模拟</h1><p><a href="http://codeup.cn/contest.php?cid=100000575" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000575</a></p><h2 id="E-Shortest-Distance"><a href="#E-Shortest-Distance" class="headerlink" title="E Shortest Distance"></a>E Shortest Distance</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" data-fancybox="group" data-caption="image-20200702153841801" class="fancybox"><img alt="image-20200702153841801" style="zoom:50%;" title="image-20200702153841801" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给出一个简单周期的高速公路上的N个出口，找出任何一对出口之间的最短距离。</p><p>输入第一个N，接下来N个为Di，表示第i个和第i+1个出口之间的距离，DN表示第N个和第1个出口之间的距离。</p><p>给出M，接下来M组是要求最点距离的两个出口。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>以样例输入为例，表示有5个出口，各自距离如👇所示：</p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" data-fancybox="group" data-caption="image-20200702154331644" class="fancybox"><img alt="image-20200702154331644" style="zoom:40%;" title="image-20200702154331644" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" class="lazyload"></a><p>我们可以把1出口到各个出口i间的距离纪录在数组a[i]中，为了方便这里不用a[0]，显然a[1]=0。记录环形总长sum。</p><p>要求距离的start出口、end出口，有以下情况（假设end&gt;start）：</p><ul><li>其中一个为1，即求1出口到其他出口的最短距离，即max { a[i] ,  sum - a[i] }</li><li>没有一个为1，则求max { a[end] - a[start] ,  sum - ( a[end] - a[start] ) }</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n, m, temp, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++) &#123;  <span class="comment">//为了点后续计算方便，a[0]没有用，a[i]表示1到i点的距离，a[1]=0</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        sum += temp;</span><br><span class="line">        a[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">    sum+=temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, ans, t2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;start, &amp;<span class="built_in">end</span>);</span><br><span class="line">        <span class="keyword">if</span> (start &gt; <span class="built_in">end</span>) &#123;</span><br><span class="line">            t2 = <span class="built_in">end</span>;</span><br><span class="line">            <span class="built_in">end</span> = start;</span><br><span class="line">            start = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">1</span>) ans = a[<span class="built_in">end</span>] &lt; (sum - a[<span class="built_in">end</span>]) ? a[<span class="built_in">end</span>] : (sum - a[<span class="built_in">end</span>]);</span><br><span class="line">        <span class="keyword">else</span> ans = (a[<span class="built_in">end</span>] - a[start]) &lt; (sum - a[<span class="built_in">end</span>] + a[start]) ? (a[<span class="built_in">end</span>] - a[start]) : (sum - a[<span class="built_in">end</span>] + a[start]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 简单模拟
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.3 图形输出</title>
    <link href="https://angelia-wang.github.io/2020/07/01/3.3%20%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA/"/>
    <id>https://angelia-wang.github.io/2020/07/01/3.3%20%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-08-22T16:32:08.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-3-图形输出"><a href="#3-3-图形输出" class="headerlink" title="3.3 图形输出"></a>3.3 图形输出</h1><p><a href="http://codeup.cn/contest.php?cid=100000577" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000577</a></p><h2 id="B-Hello-World-for-U"><a href="#B-Hello-World-for-U" class="headerlink" title="B Hello World for U"></a>B Hello World for U</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702191004238.png" data-fancybox="group" data-caption="image-20200702191004238" class="fancybox"><img alt="image-20200702191004238" style="zoom:50%;" title="image-20200702191004238" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702191004238.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给出一个长度为N字符串，将它按照U型输出。</p><p>设左边竖的一列为n1，右边竖的一列为n3，底部一排为n2，要求n1 = n3 = max { k| k &lt;= n2 for all 3 &lt;= n2 &lt;= N } 且n1 + n2 + n3 - 2 = N。</p><p>以样例为例，输入Helloworld!，N=11，n1=hell，n2=lowor，n3=rld!</p><h3 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h3><p>做题时以为n2是不确定的，n1 = n3 = max { k| k &lt;= n2 for all 3 &lt;= n2 &lt;= N } 表示k小于3 &lt;= n2 &lt;= N中所有n2的取值，所以认为n1=n3=3。</p><p>但题目的意思是n2可能的取值为[3, N]，n2在某个字符串情况下是确定的，k为max{ k | k&lt;=n2 }</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>n1 + n2 + n3 - 2 = N。</p><p>n1 = n3 = max { k| k &lt;= n2 }。即要让n1与n3尽可能大，则n1=n3=n2=(N+2)/3;</p><p>则得到字符串str时即可求出n1,n2,n3。</p><p>需按照每行输出，则每次需输出 str[i] 与 str[N-1-i] 以及二者之间的空格，最后输出底部的字母n3。</p><p>设side=n1=n2=n3=(N+2)/3，则之间的空格strip=n3-2=N-n1-n2=N-2*side。</p><p>前side-1次输出 str[i] 与 str[N-1-i] 以及二者之间的空格strip，最后输出n3。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAX];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> side, strip;</span><br><span class="line">        side = (len + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">        strip = len - <span class="number">2</span> * side;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; side - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strip; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, str[len - <span class="number">1</span> - i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = side - <span class="number">1</span>; i &lt; side + strip + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-沙漏图形"><a href="#D-沙漏图形" class="headerlink" title="D 沙漏图形"></a>D 沙漏图形</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702230127867.png" data-fancybox="group" data-caption="image-20200702230127867" class="fancybox"><img alt="image-20200702230127867" style="zoom:50%;" title="image-20200702230127867" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702230127867.png" class="lazyload"></a><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++) <span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>;j++) <span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 3.3图形输出
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.4 日期处理</title>
    <link href="https://angelia-wang.github.io/2020/07/01/3.4%20%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/"/>
    <id>https://angelia-wang.github.io/2020/07/01/3.4%20%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-03T16:52:58.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-4-日期处理"><a href="#3-4-日期处理" class="headerlink" title="3.4 日期处理"></a>3.4 日期处理</h1><p><a href="http://codeup.cn/contest.php?cid=100000578" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000578</a></p><h2 id="A-日期差值"><a href="#A-日期差值" class="headerlink" title="A 日期差值"></a>A 日期差值</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703001346743.png" data-fancybox="group" data-caption="image-20200703001346743" class="fancybox"><img alt="image-20200703001346743" style="zoom:50%;" title="image-20200703001346743" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703001346743.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol><li><p>为方便计算，设置第二个日期大于第一个日期，即time2&gt;time1。</p></li><li><p>为方便直接取出每个月的天数，定义一个二维数组int month[13][2] 用于存放每个月的天数（第二维为0时表示平年，为1时表示闰年）。</p></li><li><p><strong><u><em>⚠️若两个日期连续，则规定二者之间天数为2天。则若两个日期相同，则答案为1。</em></u></strong></p></li></ol><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>令time1不断加1天，直到time1=time2，统计累加的天数。</p><p>具体处理时：若加1天后，天数d等于当前月份m拥有天数+1，则m++，d=1；若月份m&gt;12，则y++，m=1。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>为节约时间，可先把time1的年份y1不断加1，直到与time2的年份y2相差1，期间：</p><ul><li><p><u><strong>若当前y1是闰年且d1&lt;=2（证明闰年的2月还没过完，要算入累加天数）累加366天。</strong></u> </p><p>Eg：time1=20200101; time2=20220101——输出732</p></li><li><p><strong><u>若当前（y1+1）是闰年且d1&gt;2（证明第二年的闰年2月要算）累加366天。</u></strong></p><p>Eg：time1=20190303; time2=20210303——输出732</p></li><li><p>上述两种之外的情况累加365天。</p><p>Eg：time1=20200303; time2=20220303——输出731（y1是闰年，但d1&gt;2）</p></li></ul><p>然后进行上述不断天数+1操作。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time1, time2;</span><br><span class="line">    <span class="comment">//第二维第一个表示平年的月份，第二个表示闰年的月份</span></span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y1, y2, m1, m2, d1, d2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;time1, &amp;time2) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (time1 &gt; time2) &#123;</span><br><span class="line">            temp = time1;</span><br><span class="line">            time1 = time2;</span><br><span class="line">            time2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        y1 = time1 / <span class="number">10000</span>, m1 = (time1 % <span class="number">10000</span>) / <span class="number">100</span>, d1 = time1 % <span class="number">100</span>;</span><br><span class="line">        y2 = time2 / <span class="number">10000</span>, m2 = (time2 % <span class="number">10000</span>) / <span class="number">100</span>, d2 = time2 % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (y1 != y2 || m1 != m2 || d1 != d2) &#123;</span><br><span class="line">            d1++;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt; month[m1][isLeap(y1)]) &#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m1 &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time1, time2;</span><br><span class="line">    <span class="comment">//第二维第一个表示平年的月份，第二个表示闰年的月份</span></span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y1, y2, m1, m2, d1, d2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;time1, &amp;time2) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (time1 &gt; time2) &#123;</span><br><span class="line">            temp = time1;</span><br><span class="line">            time1 = time2;</span><br><span class="line">            time2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        y1 = time1 / <span class="number">10000</span>, m1 = (time1 % <span class="number">10000</span>) / <span class="number">100</span>, d1 = time1 % <span class="number">100</span>;</span><br><span class="line">        y2 = time2 / <span class="number">10000</span>, m2 = (time2 % <span class="number">10000</span>) / <span class="number">100</span>, d2 = time2 % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (y2 - y1 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeap(y1) &amp;&amp; d1&lt;=<span class="number">2</span>) ans += <span class="number">366</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isLeap(y1+<span class="number">1</span>) &amp;&amp; d1&gt;<span class="number">2</span>) ans+=<span class="number">366</span>;</span><br><span class="line">            <span class="keyword">else</span> ans += <span class="number">365</span>;</span><br><span class="line">            y1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (y1 != y2 || m1 != m2 || d1 != d2) &#123;</span><br><span class="line">            d1++;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt; month[m1][isLeap(y1)]) &#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m1 &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-Day-of-Week"><a href="#B-Day-of-Week" class="headerlink" title="B Day of Week"></a>B Day of Week</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703164945413.png" data-fancybox="group" data-caption="image-20200703164945413" class="fancybox"><img alt="image-20200703164945413" style="zoom:50%;" title="image-20200703164945413" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703164945413.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>要求一日期所表示的星期。</p><p>采用<code>基姆拉尔森公式</code>：<strong>w = (<u>d + 1</u> + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400) % 7</strong> <strong>【w=0~6,w=0表示周日至周六】</strong></p><p>公式要求：</p><ul><li>将1、2月作为前一年的13、14月</li></ul><p>（PS：若采用公式w = (d + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400) % 7 ，则w=0～6表示周一至周日）</p><p>公式原理参考：<a href="https://blog.csdn.net/qq_33114231/article/details/52352668" target="_blank" rel="noopener">https://blog.csdn.net/qq_33114231/article/details/52352668</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getWeek</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || m == <span class="number">2</span>) &#123;</span><br><span class="line">        m += <span class="number">12</span>;</span><br><span class="line">        y--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (d + <span class="number">1</span> + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> week[<span class="number">7</span>][<span class="number">20</span>] = &#123;<span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> month[<span class="number">13</span>][<span class="number">20</span>] = &#123;<span class="string">""</span>, <span class="string">"January"</span>, <span class="string">"February"</span>, <span class="string">"March"</span>, <span class="string">"April"</span>, <span class="string">"May"</span>, <span class="string">"June"</span>, <span class="string">"July"</span>, <span class="string">"August"</span>, <span class="string">"September"</span>,</span><br><span class="line">                          <span class="string">"October"</span>, <span class="string">"November"</span>, <span class="string">"December"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, w;</span><br><span class="line">    <span class="keyword">char</span> mm[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>, &amp;d, mm, &amp;y) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(month[i], mm) == <span class="number">0</span>) &#123;</span><br><span class="line">                m = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, week[getWeek(y, m, d)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>若求某年第几天的星期：</p><p><strong>w = (d + y - 1 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400) % 7 【w=0~6,w=0表示周日至周六】</strong></p><ol><li><p>初步推导</p><ul><li><p>用  y,  d,  w  分别表示  年  该年第几天  星期 (w=0-6  代表星期日-星期六 ）</p></li><li><p>我们从 <code>公元0年1月1日星期日</code> 开始 </p></li><li><p>只考虑最开始的  7  天，即  d  =  1—7  变换到  w  =  0—6<br>很直观的得到： w  =  d-1 </p><p>则该年第 d 天：w = (d - 1) % 7 ———  公式(1) </p></li><li><p>按年扩展：</p><ul><li>我们不考虑闰年，假设每一年都是  365  天。由于365是7的52倍多1天，所以每一年的第一天和最后一天星期是相同的。 <pre><code>也就是说下一年的第一天与上一年的第一天星期滞后一天。这是个重要的结论，每过一年，公式(1)会有一天的误差，由于我们是从0年开始的，所以只须要简单的加上年就可以修正扩展年引起的误差，得到公式如下： w  =  (d-1  +  y)  %  7  </code></pre></li><li>将闰年考虑进去 <pre><code>每个闰年会多出一天，会使后面的年份产生一天的误差。如我们要计算2005年1月1日星期几，就要考虑前面的已经过的2004年中有多少个闰年，将这个误差加上就可以正确的计算了。 根据闰年的定义(能被4整但不能被100整除或能被400整)，得到计算闰年的个数的算式：y/4 - y/100 + y/400(计算从公元0年开始过去的闰年数，公元0年不算闰年)。 由于我们要计算的是当前要计算的年之前的闰年数，所以要将年减1，得到了如下的公式：  w  =  [ d - 1+ y + (y - 1) / 4 - (y - 1) / 100+(y - 1) / 400]  %  7  -----公式(2)</code></pre></li></ul></li></ul></li></ol><h2 id="C-打印日期"><a href="#C-打印日期" class="headerlink" title="C 打印日期"></a>C 打印日期</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180045283.png" data-fancybox="group" data-caption="image-20200703180045283" class="fancybox"><img alt="image-20200703180045283" style="zoom:50%;" title="image-20200703180045283" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180045283.png" class="lazyload"></a><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;y, &amp;n) != EOF) &#123;</span><br><span class="line">        m = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">31</span>) d = n;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = isLeap(y);</span><br><span class="line">            <span class="keyword">while</span> (n &gt; month[m][temp]) &#123;</span><br><span class="line">                n -= month[m][temp];</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">            d = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-日期类"><a href="#D-日期类" class="headerlink" title="D 日期类"></a>D 日期类</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180343424.png" data-fancybox="group" data-caption="image-20200703180343424" class="fancybox"><img alt="image-20200703180343424" style="zoom:50%;" title="image-20200703180343424" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180343424.png" class="lazyload"></a><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, y, m, d;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;y, &amp;m, &amp;d);</span><br><span class="line">            d++;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; month[m][isLeap(y)]) &#123;</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-日期累加"><a href="#E-日期累加" class="headerlink" title="E 日期累加"></a>E 日期累加</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180533674.png" data-fancybox="group" data-caption="image-20200703180533674" class="fancybox"><img alt="image-20200703180533674" style="zoom:50%;" title="image-20200703180533674" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180533674.png" class="lazyload"></a><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, y, m, d, n;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;y, &amp;m, &amp;d, &amp;n);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">366</span> &amp;&amp; isLeap(y) &amp;&amp; d &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">366</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">365</span> &amp;&amp; isLeap(y) &amp;&amp; d &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">365</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">366</span> &amp;&amp; isLeap(y + <span class="number">1</span>) &amp;&amp; d &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">366</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">365</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">365</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">                d++;</span><br><span class="line">                <span class="keyword">if</span> (d &gt; month[m][isLeap(y)]) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                    d = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                    y++;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 3.4日期处理
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.5 进制转换</title>
    <link href="https://angelia-wang.github.io/2020/07/01/3.5%20%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://angelia-wang.github.io/2020/07/01/3.5%20%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-03T16:58:25.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-5-进制转换"><a href="#3-5-进制转换" class="headerlink" title="3.5 进制转换"></a>3.5 进制转换</h1><p><a href="http://codeup.cn/contest.php?cid=100000579" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000579</a></p><h2 id="B-数制转换"><a href="#B-数制转换" class="headerlink" title="B 数制转换"></a>B 数制转换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005150829.png" data-fancybox="group" data-caption="image-20200704005150829" class="fancybox"><img alt="image-20200704005150829" style="zoom:50%;" title="image-20200704005150829" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005150829.png" class="lazyload"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a_to_ten</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> *x)</span> </span>&#123;  <span class="comment">//a进制x转换为十进制y</span></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>, temp, product = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(x) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt;= <span class="string">'a'</span>) x[i] -= <span class="number">32</span>;</span><br><span class="line">        temp = x[i] &gt;= <span class="string">'A'</span> ? x[i] - <span class="string">'A'</span> + <span class="number">10</span> : x[i] - <span class="string">'0'</span>; <span class="comment">//取得x末位的字符表示的数字</span></span><br><span class="line">        y += temp * product;</span><br><span class="line">        product *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ten_to_b</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> y, <span class="keyword">char</span> *z)</span> </span>&#123;  <span class="comment">//十进制y转换为b进制数z 返回z的位数，方便倒序输出</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>, temp;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        temp = y % b;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt;= <span class="number">9</span>) z[num++] = temp + <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> z[num++] = temp - <span class="number">10</span> + <span class="string">'A'</span>;</span><br><span class="line">        y /= b;</span><br><span class="line">    &#125; <span class="keyword">while</span> (y != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">40</span>], z[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">int</span> y, a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>, &amp;a, x, &amp;b) != EOF) &#123;</span><br><span class="line">        y = a_to_ten(a, x);</span><br><span class="line">        <span class="keyword">int</span> num = ten_to_b(b, y, z);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, z[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-进制转换"><a href="#C-进制转换" class="headerlink" title="C 进制转换"></a>C 进制转换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005527950.png" data-fancybox="group" data-caption="image-20200704005527950" class="fancybox"><img alt="image-20200704005527950" style="zoom:50%;" title="image-20200704005527950" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005527950.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>将大数放入char数组，每次末位字符除2取余后，将char数组除2。</p><p>具体除2过程：</p><p>从高到低每位除2，若此位为奇数则要给后一位+10，若此位位偶数则后一位不加（自己思考一下数字除2的过程）</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ten[<span class="number">35</span>], two[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ten) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, jinwei, len = <span class="built_in">strlen</span>(ten);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ten[i] -= <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            two[num++] = ten[len - <span class="number">1</span>] % <span class="number">2</span> + <span class="string">'0'</span>;   <span class="comment">//每次取最后一位的余数</span></span><br><span class="line"></span><br><span class="line">            jinwei = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = ten[j];</span><br><span class="line">                ten[j] = (ten[j] + jinwei) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (temp &amp; <span class="number">1</span>) jinwei = <span class="number">10</span>;  <span class="comment">//若是奇数，则下一位+10</span></span><br><span class="line">                <span class="keyword">else</span> jinwei = <span class="number">0</span>;  <span class="comment">//若是偶数，则加一位+0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ten[i] == <span class="number">0</span>) i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,two[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 3.5进制转换
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.3 递归</title>
    <link href="https://angelia-wang.github.io/2020/07/01/4.3%20%E9%80%92%E5%BD%92/"/>
    <id>https://angelia-wang.github.io/2020/07/01/4.3%20%E9%80%92%E5%BD%92/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-07T09:15:05.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-3-递归"><a href="#4-3-递归" class="headerlink" title="4.3 递归"></a>4.3 递归</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000583" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000583</a></p><h2 id="C-神奇的口袋"><a href="#C-神奇的口袋" class="headerlink" title="C 神奇的口袋"></a>C 神奇的口袋</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706193903088.png" data-fancybox="group" data-caption="image-20200706193903088" class="fancybox"><img alt="image-20200706193903088" style="zoom:50%;" title="image-20200706193903088" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706193903088.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题据说也是个DP题目，参考<a href="https://blog.csdn.net/NeverWA/article/details/79873581" target="_blank" rel="noopener">https://blog.csdn.net/NeverWA/article/details/79873581</a></p><p>（等我学了DP再来看这道题🙃️）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">25</span>], count;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generatea</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> sum)</span> </span>&#123;  <span class="comment">//前index个物品总体积为sum</span></span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">40</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == n + <span class="number">1</span> || sum &gt; <span class="number">40</span>) <span class="keyword">return</span>;</span><br><span class="line">    generatea(index + <span class="number">1</span>, sum + a[index + <span class="number">1</span>]);  <span class="comment">//选第index+1个物品</span></span><br><span class="line">    generatea(index + <span class="number">1</span>, sum);  <span class="comment">//不选第index+1个物品</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        generatea(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-八皇后"><a href="#D-八皇后" class="headerlink" title="D 八皇后"></a>D 八皇后</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706194309945.png" data-fancybox="group" data-caption="image-20200706194309945" class="fancybox"><img alt="image-20200706194309945" style="zoom:50%;" title="image-20200706194309945" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706194309945.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>将八皇后问题所有的解事先存储在数组a中，到时候查询即可。（hash）</p><p>⚠️这里比较特殊的是行号和列号取值范围都为1～8，所以在写for语句和取hastTable的范围时要特别注意。</p><p>求解把八皇后：</p><ol><li><p>int类型temp数组存储某种排序，temp[i] 中i表示行号、temp[i]表示列号【使用从temp[1]开始】；</p><p>hashTable存储第i列是否已经被选取；</p><p>c表示解决方案的个数。</p></li><li><p>index表示当前排列第index行的皇后，当index=n+1时，表示一个序列取完了。将之存储到a数组中。</p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">92</span>];</span><br><span class="line"><span class="keyword">int</span> temp[n+<span class="number">1</span>], c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> hashTable[n + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[c++] = sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第index行的列号需遍历1～8的取值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashTable[i]) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 遍历之前已经取的皇后的行号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; index; j++) &#123;</span><br><span class="line">                <span class="comment">// 第index行的列号为i，第j行的列号为temp[j]</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(index - j) == <span class="built_in">abs</span>(i - temp[j])) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                temp[index] = i;</span><br><span class="line">                hashTable[i] = <span class="literal">true</span>;</span><br><span class="line">                generateP(index + <span class="number">1</span>);</span><br><span class="line">                hashTable[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    generateP(<span class="number">1</span>);</span><br><span class="line">    sort(a,a+<span class="number">92</span>);</span><br><span class="line">    <span class="keyword">int</span> m,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[k<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 4.3递归
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.4 贪心</title>
    <link href="https://angelia-wang.github.io/2020/07/01/4.4%20%E8%B4%AA%E5%BF%83/"/>
    <id>https://angelia-wang.github.io/2020/07/01/4.4%20%E8%B4%AA%E5%BF%83/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-07T09:39:40.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-4-贪心"><a href="#4-4-贪心" class="headerlink" title="4.4 贪心"></a>4.4 贪心</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000584" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000584</a></p><h2 id="C-To-Fill-or-Not-to-Fill"><a href="#C-To-Fill-or-Not-to-Fill" class="headerlink" title="C To Fill or Not to Fill"></a>C To Fill or Not to Fill</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171611896.png" data-fancybox="group" data-caption="image-20200707171611896" class="fancybox"><img alt="image-20200707171611896" style="zoom:50%;" title="image-20200707171611896" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171611896.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>从杭州开始开车，车内没有油。给定若干加油站信息，问能否驾驶汽车行驶到目的地。若能行驶到目的地，则计算最小花费。若不能，则最远能够行驶多长距离。</p><p>给出的第一行数据为，油箱大小Cmax、杭州到目的地距离D、每单位油能行驶的距离Davg、加油站数目N</p><p>接下来的N行为各加油站信息，每单位油的价格、加油站离杭州的距离</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><strong><u>这道题的注意点在于：</u></strong></p><ol><li><p>加油时要注意车内可能还有剩余的油。</p></li><li><p>若接下来能到达的加油站价格都比现在加油站价格高，不能直接到下一站！！（这里WA了半天），而是要到能到达的相对价格最低的加油站。</p><p>所以在for语句中要记录接下来能到达站点中最低价格的加油站。</p></li></ol><p>首先是审题,从杭州开往目的地,中间有n个加油站,一开始的车没有油,也就是起点必须是加油站,然后寻找加油量最少的站到达,并加油,最后到达目的地,如果两站之间隔得太远不能到,那就在能到的站加满油,走最大距离.</p><p><u><strong>整体分析：</strong></u></p><ol><li><p>因为车从杭州出发，给出的加油站信息时加油站离杭州的距离。则假设杭州在起点，d=0。</p></li><li><p>将所有加油站按距离排序,从距离为0的起点出发,并把终点标记为离初始点距离为d,油价为0的点(油价为零可以优先被选成终点)</p></li><li><p>因为车一开始没有油，则若没有距离为0的加油站，则不能开车，能行驶的距离为0【游戏结束🙃️】</p></li><li><p>若能顺利发车，则有以下情况：</p><ul><li><p>在当前加油站能到达的站中，能找到比当前站点油价更低的站点</p><p>则，在当前加油站加刚好能到此站点的油，因为到下一站能加的油更便宜【⚠️若车当前的有够这些，就不用加油了】</p></li><li><p>若不能找到比当前站点油价更低的站点，就找能到达的  <strong>*<u>价格相对最低</u>*</strong>  的站点</p><p>此时要加满油【因为当前站点的油比下一站点的油更便宜】</p></li><li><p>若根本找不到能到达的站点，则不能到达目的地了，则只能在当前加油站加满油能开多远开多远，故能行驶的最大距离为当前距离+油箱油量*每单位油能到达的距离【游戏结束🙈】</p></li></ul></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//假设杭州在起点0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">station</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> p;<span class="comment">//每升油价格</span></span><br><span class="line">    <span class="keyword">double</span> d;<span class="comment">//加油站起点位置</span></span><br><span class="line">&#125; s[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(station a, station b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.d != b.d) <span class="keyword">return</span> a.d &lt; b.d;  <span class="comment">//按照加油站距离从小到大排</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.p &lt; b.p;  <span class="comment">//若距离相同，按照油价从小到大排</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//贪心 每次都选择最好的</span></span><br><span class="line"><span class="comment">//如果没有第0站则直接到不了，X=0</span></span><br><span class="line"><span class="comment">//若排序后，遍历能到达的加油站，若有比当前站油价便宜的，就在当前站加刚刚好到此站点的油（注意可能原本车里有油）</span></span><br><span class="line"><span class="comment">//若没有比当前站便宜的，也要找一个相对价格最低的！！！（WA：不能直接到下一站），需在当前站加满油</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> capacity, distance, d_avg;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %d"</span>, &amp;capacity, &amp;distance, &amp;d_avg, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;s[i].p, &amp;s[i].d);</span><br><span class="line">        &#125;</span><br><span class="line">        s[n].p = <span class="number">0</span>, s[n].d = distance;</span><br><span class="line">        sort(s, s + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>].d != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = 0.00\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> curr_sNo = <span class="number">0</span>, next_sNo;</span><br><span class="line">        <span class="keyword">double</span> max_d = capacity * d_avg, curr_capacity = <span class="number">0</span>, sum_p = <span class="number">0</span>, temp_minp;</span><br><span class="line">        <span class="keyword">while</span> (curr_sNo &lt; n) &#123;</span><br><span class="line">            next_sNo = <span class="number">-1</span>; <span class="comment">//当前下一站点</span></span><br><span class="line">            temp_minp = <span class="number">0x3fffffff</span>;  <span class="comment">//当前能找到的最低油价</span></span><br><span class="line">            <span class="comment">// 找出能到达站中最低的油价</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = curr_sNo + <span class="number">1</span>; i &lt;= n &amp;&amp; s[i].d &lt;= s[curr_sNo].d + max_d; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i].p &lt; temp_minp) &#123;</span><br><span class="line">                    temp_minp = s[i].p;</span><br><span class="line">                    next_sNo = i;</span><br><span class="line">                    <span class="comment">//若能找到低于当前油价的加油站，直接选择这个</span></span><br><span class="line">                    <span class="keyword">if</span> (temp_minp &lt; s[curr_sNo].p) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没有能到达的站点，则在当前站点加满油</span></span><br><span class="line">            <span class="keyword">if</span> (next_sNo == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">double</span> need = (s[next_sNo].d - s[curr_sNo].d) / d_avg;</span><br><span class="line">                <span class="comment">//找到低于当前油价的加油站，则加刚好到达此加油站的油</span></span><br><span class="line">                <span class="keyword">if</span> (s[next_sNo].p &lt; s[curr_sNo].p) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (need &gt; curr_capacity) &#123;</span><br><span class="line">                        sum_p += (need - curr_capacity) * s[curr_sNo].p;</span><br><span class="line">                        curr_capacity = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curr_capacity -= need;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//没找到低于当前油价的加油站，则在当前加站满油到目前能到达的最低价格油站next_sNo</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum_p += (capacity - curr_capacity) * s[curr_sNo].p;</span><br><span class="line">                    curr_capacity = capacity - need;</span><br><span class="line">                &#125;</span><br><span class="line">                curr_sNo = next_sNo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curr_sNo &lt; n) <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2f\n"</span>, s[curr_sNo].d + max_d);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, sum_p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="F-迷瘴"><a href="#F-迷瘴" class="headerlink" title="F 迷瘴"></a>F 迷瘴</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171855269.png" data-fancybox="group" data-caption="image-20200707171855269" class="fancybox"><img alt="image-20200707171855269" style="zoom:50%;" title="image-20200707171855269" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171855269.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>本题WA点在于计算当前液体和另一瓶液体混合时，当前液体的体积不一定为V。</p><p>WA时认为既然每瓶液体的体积都相同为V，则混合后浓度为二者浓度之和/2： tempp = (tempp + p[i]) / 2; 忽略了当前液体可能是混合很多次之后的，即当前液体体积不一定为V。故正确计算为： tempp = (tempp * ansv + p[i] * v) / (ansv + v);</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> n, v, w, p[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p, p + n);</span><br><span class="line">        <span class="keyword">if</span> (p[<span class="number">0</span>] &gt; w) <span class="built_in">printf</span>(<span class="string">"0 0.00\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i, ansv = v;</span><br><span class="line">            <span class="keyword">double</span> tempp = p[<span class="number">0</span>], ansp = p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                tempp = (tempp * ansv + p[i] * v) / (ansv + v);  <span class="comment">//计算浓度要当心！！我以为浓度都是相加/2但是容积不总是相等</span></span><br><span class="line">                <span class="keyword">if</span> (tempp &gt; w) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ansp = tempp;</span><br><span class="line">                    ansv += v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %.2f\n"</span>, ansv, ansp / <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 4.4贪心
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5.1 简单数学</title>
    <link href="https://angelia-wang.github.io/2020/07/01/5.1%20%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6/"/>
    <id>https://angelia-wang.github.io/2020/07/01/5.1%20%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-11T18:23:28.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-1-简单数学"><a href="#5-1-简单数学" class="headerlink" title="5.1 简单数学"></a>5.1 简单数学</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000588" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000588</a></p><h2 id="M-鸡兔同笼"><a href="#M-鸡兔同笼" class="headerlink" title="M 鸡兔同笼"></a>M 鸡兔同笼</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200712022144670.png" data-fancybox="group" data-caption="image-20200712022144670" class="fancybox"><img alt="image-20200712022144670" style="zoom:50%;" title="image-20200712022144670" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200712022144670.png" class="lazyload"></a><h3 id="代码1（暴力）"><a href="#代码1（暴力）" class="headerlink" title="代码1（暴力）"></a>代码1（暴力）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">20000</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n / <span class="number">2</span>; x++) &#123;  <span class="comment">//x为鸡的数目</span></span><br><span class="line">                <span class="keyword">int</span> y = (n - <span class="number">2</span> * x) / <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">2</span> * x + <span class="number">4</span> * y == n) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = x + y;</span><br><span class="line">                    <span class="keyword">if</span> (temp &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = temp;</span><br><span class="line">                    <span class="keyword">if</span> (temp &lt; <span class="built_in">min</span>) <span class="built_in">min</span> = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">min</span> == <span class="number">20000</span>) <span class="built_in">min</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="built_in">min</span>, <span class="built_in">max</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2（根据“提示”）"><a href="#代码2（根据“提示”）" class="headerlink" title="代码2（根据“提示”）"></a>代码2（根据“提示”）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n / <span class="number">4</span>, n / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n / <span class="number">4</span> + <span class="number">1</span>, n / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 5.1简单数学
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5.2 最大公约数与最小公倍数</title>
    <link href="https://angelia-wang.github.io/2020/07/01/5.2%20%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>https://angelia-wang.github.io/2020/07/01/5.2%20%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-13T12:07:21.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-2-最大公约数与最小公倍数"><a href="#5-2-最大公约数与最小公倍数" class="headerlink" title="5.2 最大公约数与最小公倍数"></a>5.2 最大公约数与最小公倍数</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000589" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000589</a></p><h2 id="A-Least-Common-Multiple"><a href="#A-Least-Common-Multiple" class="headerlink" title="A Least Common Multiple"></a>A Least Common Multiple</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200713194040922.png" data-fancybox="group" data-caption="image-20200713194040922" class="fancybox"><img alt="image-20200713194040922" style="zoom:50%;" title="image-20200713194040922" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200713194040922.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>求n个数的最小公倍数。</p><p>第一行输入m表示样例数目，接下来m行为各个具体样例；</p><p>第二行输入n表示此样例中数字个数，接下来n个为具体数字。需求这n个数的最小公倍数。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>求n个数的最小公倍数——前两个数a、b求最小公倍数c，再将c与第三个数d求最小公倍数，······</p><p>Small Tips：为了代码书写方便，且避免只有一个数的情况，可预存一个数1，任何数与1的最小公倍数都是这个数本身。</p><p>⚠️n可能为1。此时最小公倍数即输入的那个唯一的数。</p><h3 id="代码1（自己写的）"><a href="#代码1（自己写的）" class="headerlink" title="代码1（自己写的）"></a>代码1（自己写的）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            a = a / gcd(a, b) * b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                a = a / gcd(a, b) * b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2（根据tips）"><a href="#代码2（根据tips）" class="headerlink" title="代码2（根据tips）"></a>代码2（根据tips）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">            a = a / gcd(a, b) * b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 5.2最大公约数与最小公倍数
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5.4 素数</title>
    <link href="https://angelia-wang.github.io/2020/07/01/5.4%20%E7%B4%A0%E6%95%B0/"/>
    <id>https://angelia-wang.github.io/2020/07/01/5.4%20%E7%B4%A0%E6%95%B0/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-18T08:31:05.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-4-素数"><a href="#5-4-素数" class="headerlink" title="5.4 素数"></a>5.4 素数</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000591" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000591</a></p><h2 id="C-Goldbach’s-Conjecture"><a href="#C-Goldbach’s-Conjecture" class="headerlink" title="C  Goldbach’s Conjecture"></a>C  Goldbach’s Conjecture</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200717171033608.png" data-fancybox="group" data-caption="image-20200717171033608" class="fancybox"><img alt="image-20200717171033608" style="zoom:50%;" title="image-20200717171033608" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200717171033608.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>哥德巴赫猜想：对于任何大于或等于4的偶数n，至少存在一对素数p1和p2，使得n = p1 + p2。</p><p>现需编写程序，对输入的偶数n，输出满足猜想条件的所有素数对的数量。</p><p>每个输入行中都有一个整数。您可以假定每个整数都是偶数，并且大于或等于4且小于2 ^ 15。输入的结尾由数字0表示。</p><p>第一行输入m表示样例数目，接下来m行为各个具体样例；</p><p>第二行输入n表示此样例中数字个数，接下来n个为具体数字。需求这n个数的最小公倍数。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>1⃣️ 第一步肯定打表（素数表），因为输入数n范围[4, 32768)，所以为保险，用埃氏筛法进行打表。【O(nloglogn)】</p><ul><li>因为输入数最大为1&lt;&lt;15，故素数表最大容量定为1&lt;&lt;15</li></ul><p>2⃣️ 首先想到的是通过暴力方法，采用双重循环遍历所有素数，将两个素数相加，看是不是等于n，是则ans++。【O(n2)】</p><p>方法二：💡 n = p1 + p2，则应一个数&gt;=n/2，一个数&lt;=n/2，故只需一重循环遍历所有&lt;=n/2的素数p1，若n-p1也为素数，则ans++。【O(n)】</p><p>（而因为埃氏筛法bool数组p，刚好可通过O(1)复杂度判断 n-p1 是否为素数😁）</p><h3 id="代码1（暴力）"><a href="#代码1（暴力）" class="headerlink" title="代码1（暴力）"></a>代码1（暴力）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i) &#123;</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; pNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prime[i] + prime[j] == n) ans++;</span><br><span class="line">                <span class="keyword">if</span> (prime[j] &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prime[i] &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2（思考后简化复杂度💡）"><a href="#代码2（思考后简化复杂度💡）" class="headerlink" title="代码2（思考后简化复杂度💡）"></a>代码2（思考后简化复杂度💡）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i) &#123;</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p[n - prime[i]]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 5.4素数
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.6 字符串处理</title>
    <link href="https://angelia-wang.github.io/2020/07/01/3.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>https://angelia-wang.github.io/2020/07/01/3.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-04T13:02:18.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-6-字符串处理"><a href="#3-6-字符串处理" class="headerlink" title="3.6 字符串处理"></a>3.6 字符串处理</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000580" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000580</a></p><h2 id="A-字符串连接"><a href="#A-字符串连接" class="headerlink" title="A 字符串连接"></a>A 字符串连接</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704202812704.png" data-fancybox="group" data-caption="image-20200704202812704" class="fancybox"><img alt="image-20200704202812704" style="zoom:50%;" title="image-20200704202812704" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704202812704.png" class="lazyload"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2)&#123;</span><br><span class="line">        s1+=s2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>好像“无冗余”应该用指针动态开辟空间。【参考<a href="https://blog.csdn.net/LJohayao/article/details/88363029】" target="_blank" rel="noopener">https://blog.csdn.net/LJohayao/article/details/88363029】</a></p><p>之前写的错误代码（本地运行没有问题，可能就是因为冗余然后wrong）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 250</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[MAX];</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;temp)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp==<span class="string">'\n'</span>)&#123;</span><br><span class="line">            s[num]=<span class="string">'\0'</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp!=<span class="string">' '</span>) s[num++]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-字符串的查找删除"><a href="#C-字符串的查找删除" class="headerlink" title="C 字符串的查找删除"></a>C 字符串的查找删除</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704203255180.png" data-fancybox="group" data-caption="image-20200704203255180" class="fancybox"><img alt="image-20200704203255180" style="zoom:50%;" title="image-20200704203255180" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704203255180.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>要注意的是：</p><ol><li>要不分大小写的删除，但是最后输出要原样输出。意味着你不能把字符串直接都转换成小写，然后进行比对，要保留原来的串。</li><li>短串不含空格，随便输入。之后输入的若干字符串中可能含有空格，所以要用gets。</li><li>使用scanf(“%s”)后用gets，一定要先用getchar()吸收换行。【都用gets就不需要】</li></ol><p>解题思路1：</p><p>遍历大串b，每个字符b[i] 对照小串a的第一个字符a[0]，</p><ul><li>若不匹配且不是空格，则直接输出b[i] ；</li><li>若匹配则再进一层循环，大串和小串同时按位比较。若匹配成功则跳过这个部分i+=lena-1（⚠️减1是因为最外层遍历b要i++）；若不成功且不是空格，直接输出b[i]</li></ul><p>解题思路2:</p><p>采用string，直接用find函数进行匹配小串a和空格‘ ’。若匹配上用replace替换为“”或用erase去除。最后输出修改后的大串。</p><p>⚠️要不分大小写的删除，但是最后输出要原样输出，所以要保留大串的副本。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>], b[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> lena, lenb;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">    lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gets(b) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[i] - a[<span class="number">0</span>]) == <span class="number">32</span> || b[i] - a[<span class="number">0</span>] == <span class="number">0</span>) &#123;   <span class="comment">//忽略大小写匹配</span></span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lena; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[i + j] - a[j]) != <span class="number">32</span> &amp;&amp; b[i + j] - a[j] != <span class="number">0</span>) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//b[i]开始匹配a</span></span><br><span class="line">                <span class="keyword">if</span> (flag) i += lena<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[i] != <span class="string">' '</span>) <span class="built_in">printf</span>(<span class="string">"%c"</span>, b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b[i] != <span class="string">' '</span>) <span class="built_in">printf</span>(<span class="string">"%c"</span>, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tempb[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">string</span> a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    getchar();   <span class="comment">//少了getchar！！！！则报格式错误</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">        a[i] = <span class="built_in">tolower</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (gets(tempb)!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        b = tempb;</span><br><span class="line">        c = b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length(); i++) &#123;</span><br><span class="line">            c[i] = <span class="built_in">tolower</span>(c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = c.<span class="built_in">find</span>(a);</span><br><span class="line">        <span class="keyword">while</span> (t != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">            b.erase(t,a.length());</span><br><span class="line">            c.erase(t,a.length());</span><br><span class="line">            <span class="comment">//b.replace(t, a.length(), "");  //或用b.erase(t,a.length());</span></span><br><span class="line">            <span class="comment">//c.replace(t, a.length(), "");</span></span><br><span class="line">            t = c.<span class="built_in">find</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t2 = c.<span class="built_in">find</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">while</span> (t2 != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">            b.erase(t2,<span class="number">1</span>);</span><br><span class="line">            c.erase(t2,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//b.replace(t2, 1, "");</span></span><br><span class="line">            <span class="comment">//c.replace(t2, 1, "");</span></span><br><span class="line">            t2 = c.<span class="built_in">find</span>(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-单词替换"><a href="#D-单词替换" class="headerlink" title="D 单词替换"></a>D 单词替换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704204636573.png" data-fancybox="group" data-caption="image-20200704204636573" class="fancybox"><img alt="image-20200704204636573" style="zoom:50%;" title="image-20200704204636573" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704204636573.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>与C题思路大同小异：【因为没有说明s、a、b中是否含有空格，一律用gets读入。】</p><p>为了看代码方便，s、a、b更新为a、b、c，即此题中要将a中所有b都替换为c输出。</p><p>解题思路：</p><p>遍历大串a，每个字符a[i] 对照b的第一个字符b[0]，</p><ul><li>若不匹配且不是空格，则直接输出a[i] ；</li><li>若匹配则再进一层循环，a和b同时按位比较。若匹配成功，则输出c字符串，i+=lenb-1（⚠️减1是因为最外层遍历a要i++）；若不成功直接输出a[i]</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>],c[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(gets(a)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        gets(b);</span><br><span class="line">        gets(c);</span><br><span class="line">        <span class="keyword">int</span> lena=<span class="built_in">strlen</span>(a),lenb=<span class="built_in">strlen</span>(b),lenc=<span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lena;i++)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i]==b[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;lenb;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i+j]!=b[j])&#123;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;lenc;k++)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    i+=lenb<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-字符串去特定字符"><a href="#E-字符串去特定字符" class="headerlink" title="E 字符串去特定字符"></a>E 字符串去特定字符</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704205725243.png" data-fancybox="group" data-caption="image-20200704205725243" class="fancybox"><img alt="image-20200704205725243" style="zoom:50%;" title="image-20200704205725243" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704205725243.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️题目要循环输入，第二个字符为getchar得到的，为不影响循环后gets读入不必要数据，需要吸收掉换行之类的乱七八糟字符。</p><p>故要在while循环中最后加 <code>while((temp=getchar())!=&#39;\n&#39; &amp;&amp; temp!=EOF);</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(gets(s))&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i]!=c) <span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>((temp=getchar())!=<span class="string">'\n'</span> &amp;&amp; temp!=EOF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 3.6字符串处理
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.1 散列</title>
    <link href="https://angelia-wang.github.io/2020/07/01/4.2%20%E6%95%A3%E5%88%97/"/>
    <id>https://angelia-wang.github.io/2020/07/01/4.2%20%E6%95%A3%E5%88%97/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-07T09:14:51.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-2-散列"><a href="#4-2-散列" class="headerlink" title="4.2 散列"></a>4.2 散列</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000582" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000582</a></p><h2 id="B-分组统计"><a href="#B-分组统计" class="headerlink" title="B 分组统计"></a>B 分组统计</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705230755395.png" data-fancybox="group" data-caption="image-20200705230755395" class="fancybox"><img alt="image-20200705230755395" style="zoom:50%;" title="image-20200705230755395" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705230755395.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol><li><p>要定义两个数组 num、g 分别存储输入的两行数据（数字及其对应的分组序号）。</p></li><li><p>定义两个数组 ansn、ansg 来记录不重复的数字和分组序号。（通过exist数组来记录是否已存在）</p></li><li><p>定义数组 group[i][j] 记录数字i在j组中出现次数。</p></li><li><p>最后二重循环遍历ansn、ansg，按要求输出对应group[ ansn[i] ][ ansg[j] ]</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];  <span class="comment">//记录输入的所有数</span></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">105</span>];  <span class="comment">//记录所有组的序号</span></span><br><span class="line"><span class="keyword">int</span> ansn[<span class="number">105</span>], ansg[<span class="number">105</span>];  <span class="comment">//ansn记录不重复的数，ansg记录不重复的组</span></span><br><span class="line"><span class="keyword">bool</span> exist[<span class="number">10005</span>]; <span class="comment">//existn[i]记录数i是否已经存在与num数组中,记录组i是否已经存在与g数组中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(exist,<span class="number">0</span>,<span class="keyword">sizeof</span>(exist));</span><br><span class="line">            <span class="keyword">int</span> group[<span class="number">105</span>][<span class="number">10005</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">//group[i][j]表示第i组中j数出现次数</span></span><br><span class="line">            <span class="keyword">int</span> numlen = <span class="number">0</span>, glen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">                <span class="keyword">if</span> (!exist[num[i]]) &#123;</span><br><span class="line">                    ansn[numlen++] = num[i];</span><br><span class="line">                    exist[num[i]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memset</span>(exist,<span class="number">0</span>,<span class="keyword">sizeof</span>(exist));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;g[i]);</span><br><span class="line">                <span class="keyword">if</span> (!exist[g[i]]) &#123;</span><br><span class="line">                    ansg[glen++] = g[i];</span><br><span class="line">                    exist[g[i]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                group[g[i]][num[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            sort(ansn, ansn + numlen);</span><br><span class="line">            sort(ansg, ansg + glen);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; glen; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d=&#123;"</span>, ansg[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numlen; j++) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d=%d"</span>, ansn[j], group[ansg[i]][ansn[j]]);</span><br><span class="line">                    <span class="keyword">if</span> (j != numlen - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-String-Subtraction-20"><a href="#D-String-Subtraction-20" class="headerlink" title="D String Subtraction (20)"></a>D String Subtraction (20)</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705231731379.png" data-fancybox="group" data-caption="image-20200705231731379" class="fancybox"><img alt="image-20200705231731379" style="zoom:50%;" title="image-20200705231731379" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705231731379.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给定字符串s1,s2（各字符数不超过10e4），除去s1中所有s2字符后输出。</p><p>⚠️s1、s2中可能包含空格。</p><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>s1、s2中可能包含空格，所以要用gets读入。</p><p>解题思路1：</p><ol><li><p>使用gets读入s1、s2后，赋值给string</p></li><li><p>遍历s1使用find函数查找s2中字符，并使用erase函数删除。</p></li></ol><p>解题思路2【使用hash】:</p><ol><li>使用gets读入s1、s2</li><li>定义hidden数组并初始化为false，hidden[i]=true表示要隐藏s1中的i字符（hidden只需200空间，因为所有字符ASCII在[0,127]之间）</li><li>遍历s2中字符i，hidden[i]=true</li><li>遍历s1中字符i，若hidden[i]=false，则输出此字符</li></ol><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">while</span>(gets(temp)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s1=temp;</span><br><span class="line">        gets(temp);</span><br><span class="line">        s2=temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">            pos=s1.<span class="built_in">find</span>(s2[i]);</span><br><span class="line">            <span class="keyword">while</span>(pos!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                s1.erase(pos,<span class="number">1</span>);</span><br><span class="line">                pos=s1.<span class="built_in">find</span>(s2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10005</span>], s2[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (gets(s1) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">bool</span> hidden[<span class="number">200</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        gets(s2);</span><br><span class="line">        <span class="keyword">int</span> lens1 = <span class="built_in">strlen</span>(s1), lens2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens2; i++) &#123;</span><br><span class="line">            hidden[s2[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens1; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hidden[s1[i]]) <span class="built_in">printf</span>(<span class="string">"%c"</span>, s1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 4.1散列
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5.5 质因数分解</title>
    <link href="https://angelia-wang.github.io/2020/07/01/5.5%20%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/"/>
    <id>https://angelia-wang.github.io/2020/07/01/5.5%20%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/</id>
    <published>2020-07-01T07:52:25.000Z</published>
    <updated>2020-07-18T08:52:02.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-5-质因数分解"><a href="#5-5-质因数分解" class="headerlink" title="5.5 质因数分解"></a>5.5 质因数分解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000592" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000592</a></p><h2 id="E-完数与盈数"><a href="#E-完数与盈数" class="headerlink" title="E 完数与盈数"></a>E 完数与盈数</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163149588.png" data-fancybox="group" data-caption="image-20200718163149588" class="fancybox"><img alt="image-20200718163149588" style="zoom:50%;" title="image-20200718163149588" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163149588.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️完美数的定义是其不等于本身的因子之和等于其本身，也就是说 <strong><u>完美数所有因子和等于本身的2倍</u></strong>。</p><p>大体解题思路：</p><ol><li>要得到一个数n的各因子之和，要先得到n的所有质因数。则将问题转换为求解n的所有质因数</li></ol><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163549613.png" data-fancybox="group" data-caption="image-20200718163549613" class="fancybox"><img alt="image-20200718163549613" style="zoom:50%;" title="image-20200718163549613" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163549613.png" class="lazyload"></a><ol start="2"><li>要求解n的质因数，首先要对素数打表，此处为尽可能节约时间，采用埃式筛法【O(nloglogn)】</li></ol><p>PS：若只需求一个数的所有因子个数，则不用写出结构体factor，只需统计所有cnt的个数即可（可以简化代码）</p><h4 id="对代码的解释"><a href="#对代码的解释" class="headerlink" title="对代码的解释"></a>对代码的解释</h4><ol><li><p>定义prime记录所有的素数，pNum为素数个数；bool型数组p中 p[i]表示i是否为素数，false为是，true为否。</p><p>【此为埃式筛法的内容】</p></li><li><p>factor表示一个质因子，x为质因子具体数值，cnt为此质因子的个数，求解质因子步骤大致为：</p><ul><li>枚举1～sqrt(n)范围内的所有素数p，判断p是否为n的因子<ul><li>若是，则给fac数组中添加质因子p，并初始化个数为0；然后若p还是n的因子，则让n不断除以p并cnt++，直到p不再是n的因子</li></ul></li><li>若👆步骤结束后n仍大于1，表明n有且仅有一个大于sqrt(n)的质因子（可能为n本身），将之加入fac数组并令个数为1</li></ul></li><li><p>求解完质因子后，可通过公式算出n的所有因子之和sum。</p></li><li><p>若sum = n + n，则为完数；若sum &gt; n + n，则为盈数。</p><p>【用perfect数组记录所有完数，len1为完数个数；用notpf数组记录所有盈数，len2位盈数个数。】</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> perfect[MAX], len1 = <span class="number">0</span>, notpf[MAX], len2 = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factor</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, cnt;</span><br><span class="line">&#125; fac[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> fNum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i)</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_factor_sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    fNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= sqr; i++) &#123;  <span class="comment">//⚠️一定是&lt;=sqr,且sqr的数求解要写外面，因为循环中n一直在变</span></span><br><span class="line">        <span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            fac[fNum].x = prime[i];</span><br><span class="line">            fac[fNum].cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                fac[fNum].cnt++;</span><br><span class="line">                n /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            fNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        fac[fNum].x = n;</span><br><span class="line">        fac[fNum].cnt = <span class="number">1</span>;</span><br><span class="line">        fNum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fNum; i++) &#123;</span><br><span class="line">        sum *= (<span class="keyword">int</span>) (<span class="number">1</span> - <span class="built_in">pow</span>(fac[i].x, fac[i].cnt + <span class="number">1</span>)) / (<span class="number">1</span> - fac[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_perfect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = get_factor_sum(i);</span><br><span class="line">        <span class="keyword">if</span> (temp == i + i) perfect[len1++] = i;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; i + i) notpf[len2++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_perfect();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"E: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, perfect[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"G: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, notpf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 5.5质因数分解
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
