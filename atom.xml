<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angelia-Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://angelia-wang.github.io/"/>
  <updated>2020-10-15T13:49:23.549Z</updated>
  <id>https://angelia-wang.github.io/</id>
  
  <author>
    <name>Angelia-Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10.4 最短路径</title>
    <link href="https://angelia-wang.github.io/2020/08/28/10.4%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>https://angelia-wang.github.io/2020/08/28/10.4%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:23.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-4-最短路径"><a href="#10-4-最短路径" class="headerlink" title="10.4 最短路径"></a>10.4 最短路径</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000621" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000621</a></p><h2 id="C-最短路径"><a href="#C-最短路径" class="headerlink" title="C 最短路径"></a>C 最短路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830163030532.png" data-fancybox="group" data-caption="image-20200830163030532" class="fancybox"><img alt="image-20200830163030532" style="zoom:50%;" title="image-20200830163030532" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830163030532.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>❗️这道题有个大坑，一开始用Dijkstra做WA了，每条路的长度（权重）是2^K，K∈[0, 500]，所以肯定不能直接存的，会爆int，所以这里用了快速幂求解。但问题就是存的长度是MOD 100000 之后的值，就根本没办法简单比较大小。</p><p>看了网上的题解，不用Dijsktra，关键在于只要前面输入的点之间是连通的，这些路径就是最短路径<br>因为2^0 + 2^1 + …… + 2^(k-1) = 2^k-1 &lt; 2^k，证明前面若连通，即使是所有路径长度相加都比下一条路径短</p><p>所以这道题用<code>并查集</code>做，只需根据尽可能早出现的两点（越早输入则两点间距离越短），生成的连通集合间各点距离越短【据说是<code>最小生成树</code>题】：<br>1️⃣ 使用dis[][]数组记录两点之间的最短距离（⚠️ 根据题目，dis[i][i]=0别忘了）<br>2️⃣ 按题目要求读入两点a，b，若a,b是不连通的（即父结点不是一个），就要计算之间距离d，将它们合并为一个集合，则需通过这条边，更新所有a、b集合内的点之间的距离；若a，b是连通的（即父结点是一个）就不用管这条路了，因为此集合中各点之间的距离肯定比算上这条边要短。<br>🔴 其实这样算出了所有点到其他点的最短距离【全源最短路】，但最后只需要起点0到其他点的最短路，故最后遍历输出d[0][i]</p><h3 id="代码（Dijkstra——WA）"><a href="#代码（Dijkstra——WA）" class="headerlink" title="代码（Dijkstra——WA）"></a>代码（Dijkstra——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> a * binaryPow(a, b - <span class="number">1</span>, m) % m;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = binaryPow(a, b / <span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">return</span> temp * <span class="number">2</span> % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">//循环n次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;  <span class="comment">//找到一个没被标记且与起点s最小距离最小的点</span></span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp;G[u][v]!=INF &amp;&amp; d[u] + G[u][v] &lt; d[v]) &#123; <span class="comment">//V-S中的v且u可达</span></span><br><span class="line">                d[v] = d[u] + G[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, w;</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        w = binaryPow(<span class="number">2</span>, i, <span class="number">100000</span>);</span><br><span class="line">        G[a][b] = w;</span><br><span class="line">        G[b][a] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        G[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i] == INF) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（并查集——AC）"><a href="#代码（并查集——AC）" class="headerlink" title="代码（并查集——AC）"></a>代码（并查集——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span> ==<span class="number">1</span>) <span class="keyword">return</span> a * binaryPow(a, b - <span class="number">1</span>, m) % m;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        LL temp = binaryPow(a, b / <span class="number">2</span>, m);  <span class="comment">///！！！ 是LL</span></span><br><span class="line">        <span class="keyword">return</span> temp * temp % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dis[i][i] = <span class="number">0</span>;</span><br><span class="line">            father[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">int</span> x = findFather(a);</span><br><span class="line">            <span class="keyword">int</span> y = findFather(b);</span><br><span class="line">            <span class="keyword">if</span> (x != y) &#123; <span class="comment">//若这条路径的两个顶点在同一集合中，则不需要更新，因为距离是越来越大的 1+2^1+······+2^(k-1)=2^k-1 &lt; 2^k</span></span><br><span class="line">                <span class="comment">//更新距离，合并二者</span></span><br><span class="line">                d = binaryPow(<span class="number">2</span>, i, <span class="number">100000</span>);</span><br><span class="line">                <span class="comment">// 通过新联系a至b, 更新两个集合中各点之间的最短距离</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (findFather(u) == x) &#123; <span class="comment">//找到以 x 为根节点的集合上所有点</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (findFather(v) == y) &#123; <span class="comment">//找到以 y 为根节点的集合上所有点</span></span><br><span class="line">                                dis[u][v] = dis[v][u] = (dis[u][a] + d + dis[b][v]) % <span class="number">100000</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//合并这两个集合</span></span><br><span class="line">                father[y] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[<span class="number">0</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-最短路径"><a href="#D-最短路径" class="headerlink" title="D 最短路径"></a>D 最短路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165134053.png" data-fancybox="group" data-caption="image-20200830165134053" class="fancybox"><img alt="image-20200830165134053" style="zoom:50%;" title="image-20200830165134053" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165134053.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这里都采用了Dijsktra+DFS的做法，⚠️ 需注意的是要输出字典序最小的那条，因为使用vector记录tempPath与path，所以可以直接用比较符进行比较，但是二者中点都是倒序的，最后也是倒序输出，所以若要字典序最小，则tempPath &gt; path。</p><p>一开始用邻接矩阵做，一直错误50，不知道为啥，网上有博主说这道题会出现重复的边，所以要用邻接表做。用邻接表确实AC了，但是最后在邻接矩阵代码中加入判断 if (w &lt; G[a][b]) G[a][b] = G[b][a] = w; 让可能出现的重复边权重一直保持最小的，还是WA，不知道为啥了🙃</p><p>这里用邻接表做，想特别提醒下❗️一定要特别注意题目中各点是从0开始，还是从1开始，因为vector中push_back后遍历都是从0开始，一开始在👇这里WA了半天没看出来，当初写得</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v=Adj[u][j].v; <span class="comment">///注意顶点v是从1开始，但是对应的Adj中的点是j=0开始</span></span><br><span class="line">    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[u] + Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">            d[v] = d[u] + Adj[u][j].dis;</span><br><span class="line">            pre[v].<span class="built_in">clear</span>();</span><br><span class="line">            pre[v].push_back(u);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + Adj[u][j].dis == d[v]) &#123;</span><br><span class="line">            pre[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; Adj[u].<span class="built_in">size</span>(); v++)&#123; </span><br><span class="line">    <span class="keyword">if</span> (!vis[Adj[u][v].v])&#123;</span><br><span class="line">        <span class="keyword">if</span> (d[u] + Adj[u][v].dis &lt; d[v])&#123; <span class="comment">//这里d[v]错了，应该是d[Adj[u][v].v]</span></span><br><span class="line">            ……</span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（邻接矩阵——WA）"><a href="#代码（邻接矩阵——WA）" class="headerlink" title="代码（邻接矩阵——WA）"></a>代码（邻接矩阵——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, m, st, ed;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[maxn];<span class="comment">//存放每个结点的所有前驱结点</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; tempPath;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//循环n次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">                    d[v] = d[u] + G[u][v];</span><br><span class="line">                    pre[v].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起点s，从后往前遍历到顶点u</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == s) &#123;</span><br><span class="line">        tempPath.push_back(s);</span><br><span class="line">        <span class="keyword">if</span> (tempPath &gt; path || path.empty()) path = tempPath; <span class="comment">// 要得到字典序最小的，则要tempPath &gt; path,因为path中是倒序的</span></span><br><span class="line">        tempPath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.push_back(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        DFS(s, pre[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed) != EOF) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i].<span class="built_in">clear</span>();</span><br><span class="line">        tempPath.<span class="built_in">clear</span>();</span><br><span class="line">        path.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (w &lt; G[a][b]) G[a][b] = G[b][a] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(st);</span><br><span class="line">        <span class="keyword">if</span> (d[ed] == INF) <span class="built_in">printf</span>(<span class="string">"can't arrive\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            DFS(st, ed);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[ed]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">//倒着输出</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（邻接表——AC）"><a href="#代码（邻接表——AC）" class="headerlink" title="代码（邻接表——AC）"></a>代码（邻接表——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dis) : v(_v), dis(_dis) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=Adj[u][j].v; <span class="comment">///注意顶点v是从1开始，但是对应的Adj中的点是j=0开始</span></span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">                    d[v] = d[u] + Adj[u][j].dis;</span><br><span class="line">                    pre[v].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + Adj[u][j].dis == d[v]) &#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == u) &#123;</span><br><span class="line">        tempPath.push_back(s);</span><br><span class="line">        <span class="keyword">if</span> (tempPath &gt; path || path.empty()) path = tempPath;</span><br><span class="line">        tempPath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.push_back(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        DFS(s, pre[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">            pre[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        tempPath.<span class="built_in">clear</span>();</span><br><span class="line">        path.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">            Adj[a].push_back(node(b, w));</span><br><span class="line">            Adj[b].push_back(node(a, w));</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(st);</span><br><span class="line">        <span class="keyword">if</span> (d[ed] == INF) <span class="built_in">printf</span>(<span class="string">"can't arrive\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[ed]);</span><br><span class="line">            DFS(st, ed);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-最短路径问题"><a href="#E-最短路径问题" class="headerlink" title="E 最短路径问题"></a>E 最短路径问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165837960.png" data-fancybox="group" data-caption="image-20200830165837960" class="fancybox"><img alt="image-20200830165837960" style="zoom:50%;" title="image-20200830165837960" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165837960.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题还是很常规的，用Dijkstra做出来没啥问题。看了提示后尝试直接用DFS做，也AC了。</p><h3 id="代码（Dijkstra）"><a href="#代码（Dijkstra）" class="headerlink" title="代码（Dijkstra）"></a>代码（Dijkstra）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn], c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    <span class="built_in">fill</span>(c, c + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    c[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[u][j] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + dis[u][j] &lt; d[j]) &#123;</span><br><span class="line">                    d[j] = d[u] + dis[u][j];</span><br><span class="line">                    c[j] = c[u] + cost[u][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + dis[u][j] == d[j] &amp;&amp; c[u] + cost[u][j] &lt; c[j]) &#123;</span><br><span class="line">                    c[j] = c[u] + cost[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, dd, p, s, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n &amp;&amp; m) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;dd, &amp;p);</span><br><span class="line">            dis[a][b] = dis[b][a] = dd;</span><br><span class="line">            cost[a][b] = cost[b][a] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">        Dijkstra(s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[t], c[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（DFS）"><a href="#代码（DFS）" class="headerlink" title="代码（DFS）"></a>代码（DFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, s, t;</span><br><span class="line"><span class="keyword">int</span> ansD, ansP;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前遍历到点u</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> totalD, <span class="keyword">int</span> totalP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (totalD &gt; ansD || (totalD == ansD &amp;&amp; totalP &gt; ansP)) <span class="keyword">return</span>; <span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">        ansD = totalD;</span><br><span class="line">        ansP = totalP;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; dis[u][i] != INF) &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            DFS(i, totalD + dis[u][i], totalP + cost[u][i]);</span><br><span class="line">            vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, d, p;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n &amp;&amp; m) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="literal">false</span>);</span><br><span class="line">        ansD = INF, ansP = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;d, &amp;p);</span><br><span class="line">            dis[a][b] = dis[b][a] = d;</span><br><span class="line">            cost[a][b] = cost[b][a] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">        vis[s] = <span class="literal">true</span>;</span><br><span class="line">        DFS(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ansD, ansP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 10.4最短路径
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10.3 图的遍历</title>
    <link href="https://angelia-wang.github.io/2020/08/28/10.3%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://angelia-wang.github.io/2020/08/28/10.3%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-10-15T13:48:53.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-3-图的遍历"><a href="#10-3-图的遍历" class="headerlink" title="10.3 图的遍历"></a>10.3 图的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000620" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000620</a></p><h2 id="B-连通图"><a href="#B-连通图" class="headerlink" title="B 连通图"></a>B 连通图</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200828205154636.png" data-fancybox="group" data-caption="image-20200828205154636" class="fancybox"><img alt="image-20200828205154636" style="zoom:50%;" title="image-20200828205154636" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200828205154636.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>倾向于用邻接表做所有的图题目，因为邻接图要求顶点数目不超过1000，否则内存超限</p><p>这道题就是遍历整个图，一次DFS/BFS能完成一个连通子图的遍历，BFS/DFS的次数就是图含有连通子图的个数</p><p>⚠️注意DFS/BFS代码的写法<br>DFS中用vis数组表示结点是否已访问；BFS中用inq数组表示结点是否入过队，且在push结点temp时要设置inq[temp]=true，而DFS中在往下遍历DFS(v)时不用设置vis[v]=true，因为每次DFS开头都会设置vis[u] = true</p><p>PS:我觉得这道题也可以用并查集做</p><h3 id="代码（DFS）"><a href="#代码（DFS）" class="headerlink" title="代码（DFS）"></a>代码（DFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            DFS(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; u++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[u]) &#123;</span><br><span class="line">            DFS(u);</span><br><span class="line">            time++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (time==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            Adj[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        DFSTrave();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（BFS）"><a href="#代码（BFS）" class="headerlink" title="代码（BFS）"></a>代码（BFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u);</span><br><span class="line">    inq[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Adj[v][i];</span><br><span class="line">            <span class="keyword">if</span> (!inq[temp]) &#123;</span><br><span class="line">                inq[temp] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);  <span class="comment">// 注意！！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inq[i]) &#123;</span><br><span class="line">            BFS(i);</span><br><span class="line">            time++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            Adj[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        BFSTrave();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 10.3图的遍历
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10.5 最小生成树</title>
    <link href="https://angelia-wang.github.io/2020/08/28/10.5%20%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://angelia-wang.github.io/2020/08/28/10.5%20%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:10.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-5-最小生成树"><a href="#10-5-最小生成树" class="headerlink" title="10.5 最小生成树"></a>10.5 最小生成树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000622" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000622</a></p><h2 id="A-还是畅通工程"><a href="#A-还是畅通工程" class="headerlink" title="A 还是畅通工程"></a>A 还是畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830214304256.png" data-fancybox="group" data-caption="image-20200830214304256" class="fancybox"><img alt="image-20200830214304256" style="zoom:50%;" title="image-20200830214304256" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830214304256.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>没啥可说的，常规题。</p><p>Prime算法适合稠密图，邻接矩阵O(V2);邻接表O(V2+E)，采取堆优化【用priority_queue】能降低到O(VlogV+E)<br>Kruskal算法适合稀疏图，O(ElogE)，其中logE用于对边的排序<br>（V为定点数，E为边数）<br>🙈感觉Kruskal更好的样子，之后最小生成树的题也都用Kruskal做了</p><p>⚠️ 使用Prime时要注意默认点是0还是1，有的题目点从1开始计的，如果代码还是默认0就会错误<br>（当然你默认1、2、3也可以😂反正要在n以内）</p><h3 id="代码（Prime）"><a href="#代码（Prime）" class="headerlink" title="代码（Prime）"></a>代码（Prime）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, dis;</span><br><span class="line">    node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dis) : v(_v), dis(_dis) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];<span class="comment">//各点到集合S的距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//默认从顶点1开始</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        ans += d[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][j].v;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">                d[v] = Adj[u][j].dis;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, dd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * (n - <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;dd);</span><br><span class="line">            Adj[a].push_back(node(b, dd));</span><br><span class="line">            Adj[b].push_back(node(a, dd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = prime();</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（Kruskal）"><a href="#代码（Kruskal）" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, num_edge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            num_edge++;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            <span class="keyword">if</span> (num_edge == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num_edge != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, dd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].dis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-Freckles"><a href="#B-Freckles" class="headerlink" title="B Freckles"></a>B Freckles</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830215407000.png" data-fancybox="group" data-caption="image-20200830215407000" class="fancybox"><img alt="image-20200830215407000" style="zoom:50%;" title="image-20200830215407000" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830215407000.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>英文水平不行，没具体看题目内容，大概意思就是：<br>第一行输入n，表示有n个结点。下面n行为第i个结点的x、y坐标<br>求把这些点连接起来的最小边权，就是求最小生成树</p><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题之所以放上来，是因为之前的题目两点间距离都直接告诉我们的，这里需要自己根据sqrt((x1-x2)^2^+(y1-y2)^2^)算<br>哎呦~有点意思🙃</p><p>PS：这题中每两个点都能构成一条边，即边有 $C^2_n=\frac{n(n-1)}{2}$ 条，所以边很多，用了Kruskal</p><h3 id="代码（Kruskal）-1"><a href="#代码（Kruskal）-1" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">location</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">&#125; V[maxV];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点数，边数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> edge_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            edge_num++;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;V[i].x, &amp;V[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                E[m].v = i;</span><br><span class="line">                E[m].u = j;</span><br><span class="line">                E[m].dis = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(V[i].x - V[j].x, <span class="number">2</span>) + <span class="built_in">pow</span>(V[i].y - V[j].y, <span class="number">2</span>));</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-继续畅通工程"><a href="#D-继续畅通工程" class="headerlink" title="D 继续畅通工程"></a>D 继续畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830220210158.png" data-fancybox="group" data-caption="image-20200830220210158" class="fancybox"><img alt="image-20200830220210158" style="zoom:50%;" title="image-20200830220210158" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830220210158.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题和A题区别在于有些路径已经建好了，所以在求最小生成树的时候，这条边算edge_num（edge_num==n-1时已形成最小生成树），但是所求的边权中不用加这条边。</p><h3 id="代码（Kruskal）-2"><a href="#代码（Kruskal）-2" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"><span class="keyword">int</span> edge_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            edge_num++;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        edge_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].dis, &amp;temp);</span><br><span class="line">            <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">                <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">                <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">                <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">                    father[faU] = faV;</span><br><span class="line">                    edge_num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=kruskal(n,m);</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-Jungle-Roads"><a href="#E-Jungle-Roads" class="headerlink" title="E Jungle Roads"></a>E Jungle Roads</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830221511244.png" data-fancybox="group" data-caption="image-20200830221511244" class="fancybox"><img alt="image-20200830221511244" style="zoom:50%;" title="image-20200830221511244" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830221511244.png" class="lazyload"></a><h3 id="题目释义-1"><a href="#题目释义-1" class="headerlink" title="题目释义"></a>题目释义</h3><p>大概意思就是：各个村庄由路相连，以前有很多路，但是需要很多钱维护，否则路会被森林覆盖，现在决定要在保证各个村庄都能到达的情况下使道路维护费用最少。给出各条公路的情况，请输出最少的维护费用。<br>各条道路用26个大写字母命名，总共不超过75条道路。</p><p>第一行输入n表示村庄的数目，后面n-1行依次是各村庄的情况（固定按照26个字母排下来，最后一个村庄不输入）<br>每行以村庄名开头，后跟次村庄的道路数k，若k&gt;0，后面跟此道路通向的村庄名称和维护费用</p><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>觉得这道题输入挺新颖，就放上来了，没啥坑感觉</p><p>💡这里为了方便，没有按照题目的用字母作为结点的标识，统一将字母-65存int，这样father[]也方便<br>否则father就要用map&lt;char,char&gt;了；当然father[]直接用65~91也可以，就是觉得有点浪费🙃</p><h3 id="代码（Kruskal）-3"><a href="#代码（Kruskal）-3" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 80</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, edge_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            edge_num++;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, d;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; k;</span><br><span class="line">            <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; b &gt;&gt; d;</span><br><span class="line">                E[m].v = a - <span class="number">65</span>;</span><br><span class="line">                E[m].u = b - <span class="number">65</span>;</span><br><span class="line">                E[m].dis = d;</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 10.5最小生成树
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10.6 拓扑排序</title>
    <link href="https://angelia-wang.github.io/2020/08/28/10.6%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>https://angelia-wang.github.io/2020/08/28/10.6%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:34.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-6-拓扑排序"><a href="#10-6-拓扑排序" class="headerlink" title="10.6 拓扑排序"></a>10.6 拓扑排序</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000623" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000623</a></p><p><strong>==拓扑排序的重要应用——判断一个给定的图是否是 <u>有向无环</u> 图==</strong></p><h2 id="A-算法7-12：有向无环图的拓扑排序"><a href="#A-算法7-12：有向无环图的拓扑排序" class="headerlink" title="A 算法7-12：有向无环图的拓扑排序"></a>A 算法7-12：有向无环图的拓扑排序</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831032509984.png" data-fancybox="group" data-caption="image-20200831032509984" class="fancybox"><img alt="image-20200831032509984" style="zoom:50%;" title="image-20200831032509984" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831032509984.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题也没啥好说的，就是注意一点：<br>⚠️ 用queue结果WA了，样例结果是0 3 1 2，题目中说“请按照题目描述中的算法依次输出图的拓扑有序序列”，题中用的是stack，所以将queue改为stack后AC，样例结果3 0 1 2<br>这两个答案其实都是正确的拓扑序列，只是因为queue是先进先出，stack是后进先出，所以顺序输出的不一样。而这里要按照题目要求使用stack。<br>（🙃 所以要看清楚题目的要求）</p><p>另，这道题用了 vector&lt;int&gt; ans 存储最后的拓扑系列</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 55</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, inDegree[maxV] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) s.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        num++; <span class="comment">//加入拓扑排序的顶点数+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) s.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        Adj[u].<span class="built_in">clear</span>();<span class="comment">//清除u的所有出度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">1</span>) &#123;</span><br><span class="line">                Adj[i].push_back(j); <span class="comment">//出度</span></span><br><span class="line">                inDegree[j]++; <span class="comment">//入度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (topologicalSort()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-确定比赛名次"><a href="#B-确定比赛名次" class="headerlink" title="B 确定比赛名次"></a>B 确定比赛名次</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831033040148.png" data-fancybox="group" data-caption="image-20200831033040148" class="fancybox"><img alt="image-20200831033040148" style="zoom:50%;" title="image-20200831033040148" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831033040148.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题也是常规拓扑排序题目，没啥难的。就是题目要求“符合条件的排名不唯一时，输出编号小的队伍在前”，所以用了priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</p><p>还有就是，注意题目中编号从1开始</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 505</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, inDegree[maxV] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//注意题目中从1开始 ！！！</span></span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        Adj[u].<span class="built_in">clear</span>();<span class="comment">//因为题目中保证输入的数据一定有符合要求的拓扑排序结果，所以Adj[i]中肯定都能清空，下一组输入用例前就不用循环清空一遍了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(inDegree, <span class="number">0</span>, <span class="keyword">sizeof</span>(inDegree));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            inDegree[b]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (topologicalSort()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; ans.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 10.6拓扑排序
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>10.7 关键路径</title>
    <link href="https://angelia-wang.github.io/2020/08/28/10.7%20%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/"/>
    <id>https://angelia-wang.github.io/2020/08/28/10.7%20%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:40.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-7-关键路径"><a href="#10-7-关键路径" class="headerlink" title="10.7 关键路径"></a>10.7 关键路径</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p><h2 id="A-关键路径"><a href="#A-关键路径" class="headerlink" title="A 关键路径"></a>A 关键路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" data-fancybox="group" data-caption="image-20200901020549631" class="fancybox"><img alt="image-20200901020549631" style="zoom:50%;" title="image-20200901020549631" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题用了dp做，书p439页有讲解<br>PS：个人觉得这里输入给出的各顶点abcde没啥用，但有可能不是按照26个英文字母顺序给出的顶点<br>（我默认顶点是顺序给出的AC了）</p><p>用拓扑排序的代码可参考：<a href="https://blog.csdn.net/morizunzhu/article/details/96652800" target="_blank" rel="noopener">https://blog.csdn.net/morizunzhu/article/details/96652800</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn]; <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn]; <span class="comment">//dp[i]表示以i为起点的能得到的最长路径长度</span></span><br><span class="line"><span class="keyword">int</span> choose[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = DP(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; dp[i]) &#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choose[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (choose[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c,%c) "</span>, i + <span class="number">97</span>, choose[i] + <span class="number">97</span>);</span><br><span class="line">        i = choose[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(choose, choose + maxn, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">            G[a - <span class="number">97</span>][b - <span class="number">97</span>] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, k,tt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tt = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (tt &gt; ans) &#123;</span><br><span class="line">                ans = tt;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printPath(k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 10.7关键路径
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11.1~11.6 动态规划</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.1~11.6%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.1~11.6%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-01T11:15:26.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-1-11-6-动态规划"><a href="#11-1-11-6-动态规划" class="headerlink" title="11.1~11.6 动态规划"></a>11.1~11.6 动态规划</h1><h2 id="11-2-最大连续子序列"><a href="#11-2-最大连续子序列" class="headerlink" title="11.2 最大连续子序列"></a>11.2 最大连续子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000626" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000626</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" data-fancybox="group" data-caption="image-20200831224406405" class="fancybox"><img alt="image-20200831224406405" style="zoom:50%;" title="image-20200831224406405" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>因为要输出序列的首尾元素，所以定义了结构体</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s, t; <span class="comment">//对应a中的起点终点值</span></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; dp[maxn];<span class="comment">// dp[i]表示以i结尾的最大连续子序列和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>].s = dp[<span class="number">0</span>].t = dp[<span class="number">0</span>].sum = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= dp[i - <span class="number">1</span>].sum + a[i]) &#123;</span><br><span class="line">                dp[i].s = dp[i].t = dp[i].sum = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i].s = dp[i - <span class="number">1</span>].s;</span><br><span class="line">                dp[i].t = a[i];</span><br><span class="line">                dp[i].sum = dp[i - <span class="number">1</span>].sum + a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i].sum &gt; dp[index].sum) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index].sum &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>, a[<span class="number">0</span>], a[n - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, dp[index].sum, dp[index].s, dp[index].t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-3-最长上升（不下降）子序列-LIS"><a href="#11-3-最长上升（不下降）子序列-LIS" class="headerlink" title="11.3 最长上升（不下降）子序列 LIS"></a>11.3 最长上升（不下降）子序列 LIS</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" data-fancybox="group" data-caption="image-20200831230441357" class="fancybox"><img alt="image-20200831230441357" style="zoom:50%;" title="image-20200831230441357" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm没事哈好说的，纯粹模板题</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn], dp[maxn]; <span class="comment">//dp[i]表示以a[i]结尾的最长上升子序列的长度</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= a[i]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-4-最长公共子序列"><a href="#11-4-最长公共子序列" class="headerlink" title="11.4 最长公共子序列"></a>11.4 最长公共子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000628" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000628</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" data-fancybox="group" data-caption="image-20200831232015842" class="fancybox"><img alt="image-20200831232015842" style="zoom:50%;" title="image-20200831232015842" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>递归边界若是dp[i][0]=dp[0][j]=0，则字符串下标1开始。<br>此处用string记录字符串，故字符串下标从0开始，故用<br>dp[i + 1][j + 1]=dp[i][j] + 1（若a[i] = b[j]）<br>dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);（若a[i] != b[j]）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i+1][j+1]表示a[i]和b[j]之前的最长公共子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a.length(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b.length(); i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[a.length()][b.length()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-5-最长回文字符串"><a href="#11-5-最长回文字符串" class="headerlink" title="11.5 最长回文字符串"></a>11.5 最长回文字符串</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000629" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000629</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" data-fancybox="group" data-caption="image-20200901002548365" class="fancybox"><img alt="image-20200901002548365" style="zoom:50%;" title="image-20200901002548365" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>将输入的字符串读入buf，将buf中的字母及数字存储到要进行回文比较的字符串s中（字母都转化成小写），为了最后能输对应的buf，用 p 数组记录 s 下标到 buf 下标的映射。</p><p>回文比较采用枚举回文串“中间”的i，然后不断向外扩张（书中的方法），此处要记录最长回文串长度以及起点在字符串s中的下标（都记录第一个&gt;max_len的值，因为题目中要求若有多个相同长度回文串，输出起始位置最靠左的，也就是 i 最小的）</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></span><br><span class="line"><span class="keyword">char</span> buf[maxn], s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn]; <span class="comment">//s下标到buf的映射</span></span><br><span class="line"><span class="keyword">bool</span> dp[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//dp[i][j]——s数组中下标i到j的字符串是否为回文字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gets(buf);</span><br><span class="line">    <span class="keyword">int</span> s_len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将buf中的字母变小写和数字一起放入s，建立s下标到buf的映射p</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buf); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = <span class="built_in">tolower</span>(buf[i]);</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = buf[i];</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_len = <span class="number">1</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; s_len - <span class="number">1</span> &amp;&amp; s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (max_len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                max_len = <span class="number">2</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">3</span>; L &lt;= s_len; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span> &lt; s_len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + L - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (max_len &lt; L) &#123;</span><br><span class="line">                    max_len = L;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p[start]; i &lt;= p[start + max_len - <span class="number">1</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="10-7-关键路径"><a href="#10-7-关键路径" class="headerlink" title="10.7 关键路径"></a>10.7 关键路径</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" data-fancybox="group" data-caption="image-20200901020549631" class="fancybox"><img alt="image-20200901020549631" style="zoom:50%;" title="image-20200901020549631" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题用了dp做，书p439页有讲解<br>PS：个人觉得这里输入给出的各顶点abcde没啥用，但有可能不是按照26个英文字母顺序给出的顶点<br>（我默认顶点是顺序给出的AC了）</p><p>用拓扑排序的代码可参考：<a href="https://blog.csdn.net/morizunzhu/article/details/96652800" target="_blank" rel="noopener">https://blog.csdn.net/morizunzhu/article/details/96652800</a></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn]; <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn]; <span class="comment">//dp[i]表示以i为起点的能得到的最长路径长度</span></span><br><span class="line"><span class="keyword">int</span> choose[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = DP(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; dp[i]) &#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choose[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (choose[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c,%c) "</span>, i + <span class="number">97</span>, choose[i] + <span class="number">97</span>);</span><br><span class="line">        i = choose[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(choose, choose + maxn, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">            G[a - <span class="number">97</span>][b - <span class="number">97</span>] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, k,tt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tt = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (tt &gt; ans) &#123;</span><br><span class="line">                ans = tt;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printPath(k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="11-6-DAG-最长路-🌟"><a href="#11-6-DAG-最长路-🌟" class="headerlink" title="11.6 DAG 最长路 🌟"></a>11.6 DAG 最长路 🌟</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000630" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000630</a></p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" data-fancybox="group" data-caption="image-20200901023502064" class="fancybox"><img alt="image-20200901023502064" style="zoom:50%;" title="image-20200901023502064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" class="lazyload"></a><h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>将此问题是典型 DAG 最长路问题，需将每个矩形都看作一个顶点，并将嵌套关系视为顶点之间的有向边，边权为1。</p><p>1️⃣ 构造DAG图，便于使用DP求DAG的最长路 ——将每个矩形变为一个顶点，根据矩形间是否能嵌套，判断两个顶点间是否有有向边</p><ul><li>这里定义了结构体rect存储输入的矩形的宽，因为嵌套条件是a&lt;c,b&lt;d或者b&lt;c,a&lt;d，所以为了之后比较方便，统一将输入的更大的数作为长，另一个数作为宽</li><li>所有矩形数据输入完毕后，开始两两比较能否嵌套，默认每个矩形代表的顶点编号根据输入的顺序依次0~n-1，若能嵌套（r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w），则令顶点 i 与 j 之间有一条有向边（ G[i][j] = 1）</li></ul><p>2️⃣ 构造完 DAG图后，就是常规操作，使用DP计算最长路长度ans</p><p>3️⃣ 需注意的是，最后要输出的是能最多嵌套的矩形数目，⚠️ 所以输出ans+1</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, w;</span><br><span class="line">&#125; r[maxn];</span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= b) r[i].l = a, r[i].w = b;</span><br><span class="line">            <span class="keyword">else</span> r[i].l = b, r[i].w = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w) &#123;</span><br><span class="line">                    G[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.1~11.6动态规划
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11.8 动态规划专题总结</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.8%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.8%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-02T18:50:04.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-8-动态规划专题总结"><a href="#11-8-动态规划专题总结" class="headerlink" title="11.8 动态规划专题总结"></a>11.8 动态规划专题总结</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000632" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000632</a></p><h2 id="A-第二题-❓"><a href="#A-第二题-❓" class="headerlink" title="A 第二题 ❓"></a>A 第二题 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" data-fancybox="group" data-caption="image-20200903015140498" class="fancybox"><img alt="image-20200903015140498" style="zoom:50%;" title="image-20200903015140498" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>1️⃣ 做法一：使用DFS，搜索每一个最小于等于sum/2的子数组，并且找出其中和最接近sum/2的子数组。<br>一开始写得dfs代码👇<code>时间超时50</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (total &gt; sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (total == sum || index == n) &#123; <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt; sum1) sum1 = total;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum);</span><br></pre></td></tr></table></figure></div><p>后来剪枝优化的DFS代码👇但还是<code>时间超时50</code>🤣 _(:з」∠)_</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2️⃣ 做法二：使用DP，使用01背包的做法，寻找容量为sum/2的最优解<br>因为只有一个维度——元素大小，这相当于物品的重量，则将元素的大小也作为物品的价值<br>dp[v] = max(dp[v], dp[v - a[j]] + a[j])<br>但最后<code>运行错误50</code>，可能是内存超限，不清楚</p><p>🔵 最后在网上找到了一个DFS的AC代码，但觉得和我的差不多，不知道为啥我就超时<br><a href="https://blog.csdn.net/qq_41773202/article/details/104917949" target="_blank" rel="noopener">https://blog.csdn.net/qq_41773202/article/details/104917949</a></p><h3 id="代码（DFS——WA）"><a href="#代码（DFS——WA）" class="headerlink" title="代码（DFS——WA）"></a>代码（DFS——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, sum1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> temp, sum;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        n = <span class="number">0</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dfs(<span class="number">0</span>, <span class="number">0</span>, sum / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（DP——WA）"><a href="#代码（DP——WA）" class="headerlink" title="代码（DP——WA）"></a>代码（DP——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxv];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n, temp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, sum1;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        n = <span class="number">1</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> v = sum / <span class="number">2</span>; v &gt;= a[j]; v--) &#123;</span><br><span class="line">                    dp[v] = <span class="built_in">max</span>(dp[v], dp[v - a[j]] + a[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum1 = dp[sum / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（网上的——AC）"><a href="#代码（网上的——AC）" class="headerlink" title="代码（网上的——AC）"></a>代码（网上的——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> ans, <span class="keyword">int</span> half, <span class="keyword">int</span> num[], <span class="keyword">int</span> count, <span class="keyword">int</span> &amp;res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == count)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (ans + num[index] &lt;= half) &#123;</span><br><span class="line">res = <span class="built_in">max</span>(res, ans + num[index]);<span class="comment">//res每次存小于等于half且最接近half的子数组和。</span></span><br><span class="line"><span class="keyword">if</span> (res == half)<span class="comment">//等于half最优直接返回</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs(index + <span class="number">1</span>, ans + num[index], half, num, count, res);<span class="comment">//如果选了第index个数，和还小于half继续dfs</span></span><br><span class="line">&#125;</span><br><span class="line">dfs(index + <span class="number">1</span>, ans, half, num, count, res);<span class="comment">//不选第index个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line"><span class="comment">//处理字符串，存入数组之中。</span></span><br><span class="line"><span class="keyword">int</span> pre = <span class="number">0</span>, number[<span class="number">1010</span>], count = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">' '</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> str = s.substr(pre, i - pre);</span><br><span class="line"><span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">sum += temp;</span><br><span class="line">number[count++] = temp;</span><br><span class="line">pre = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> str = s.substr(pre, s.length() - pre);<span class="comment">//判断最后一个字符串</span></span><br><span class="line"><span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">sum += temp;</span><br><span class="line">number[count++] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找最接近sum/2的子数组。</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> half = sum / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, half, number, count, res);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - res &lt;&lt; <span class="string">" "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-拦截导弹"><a href="#B-拦截导弹" class="headerlink" title="B 拦截导弹"></a>B 拦截导弹</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" data-fancybox="group" data-caption="image-20200903020331886" class="fancybox"><img alt="image-20200903020331886" style="zoom:50%;" title="image-20200903020331886" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>一开始没发现这道题是最长不上升子序列的DP题目，直接按照自己的想法做，自然WA了🙈，错误原因是认为能拦截的导弹是连续的，下一个导弹若不能拦截，则重新开始计数。最后统计最大值。</p><h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = a[<span class="number">0</span>], t_sum = <span class="number">1</span>, max_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= temp) &#123;</span><br><span class="line">                t_sum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum;</span><br><span class="line">                t_sum = <span class="number">1</span>; <span class="comment">//从当前这个比temp大的数算起</span></span><br><span class="line">            &#125;</span><br><span class="line">            temp = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum; <span class="comment">//处理最后一个t_sum</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是最长不上升子序列的问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn], dp[maxn]; <span class="comment">//dp[i] 表示以a[i]结尾的最长不下降子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt;= a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-合唱队形-🌟"><a href="#C-合唱队形-🌟" class="headerlink" title="C 合唱队形 🌟"></a>C 合唱队形 🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" data-fancybox="group" data-caption="image-20200903020748404" class="fancybox"><img alt="image-20200903020748404" style="zoom:50%;" title="image-20200903020748404" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>遍历输入的同学数组，计算每一个位置对应的最长上升子序列数目、最长下降子序列数目，假设二者和为temp，则每次对应要出列的学生数目= sum-temp+1</p><p>Why加一？<br>因为对Ti，计算[T1, Ti ]的最长上升子序列数目，计算[Ti, Tn]的最长下降子序列数目，Ti会被重复计算，所以sum-temp多减了一个Ti，要加回来。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [0, mid] 的最长上升子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mid; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [mid, n) 的最长下降子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mid; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = increase(i) + decrease(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; sum) sum = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - sum + <span class="number">1</span>); <span class="comment">//因为中间的Ti被重复计算，所以要加上去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-Coincidence"><a href="#D-Coincidence" class="headerlink" title="D: Coincidence"></a>D: Coincidence</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" data-fancybox="group" data-caption="image-20200903021359064" class="fancybox"><img alt="image-20200903021359064" style="zoom:50%;" title="image-20200903021359064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准最长上升子序列问题</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最长公共子序列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i][j]表示a的前i个字符与b的前j个字符的最长公共子序列的长度</span></span><br><span class="line">    <span class="keyword">while</span> (gets(a + <span class="number">1</span>) &amp;&amp; gets(b + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena; i++) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lenb; i++) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lena; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[lena][lenb]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-最大子矩阵-🌟🌟"><a href="#E-最大子矩阵-🌟🌟" class="headerlink" title="E 最大子矩阵 🌟🌟"></a>E 最大子矩阵 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" data-fancybox="group" data-caption="image-20200903021547619" class="fancybox"><img alt="image-20200903021547619" style="zoom:50%;" title="image-20200903021547619" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是一个二维的最大连续子序列和问题【完全没想到orz】，需降至一维进行求解<br>对于确定的从第 A 行到 第 B 行，将同一列的数相加，最终得到一个一维的数序列，对于这个数序列求最大连续子序列即可🙈</p><p>状态转移方程为：dp[i] = max(dp[i - 1] + A[i], A[i])</p><p>⚠️ 注意ans的初值（看代码）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维的最大连续子序列和</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, dp[maxn]; <span class="comment">//dp[i]以A[i]结尾的最大连续子序列和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sequence</span><span class="params">(<span class="keyword">int</span> *A)</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = dp[<span class="number">0</span>]; <span class="comment">// i从1开始否则dp[i-1]越界，ans初始化为dp[0]，否则若只有A[0]时不进行for循环，ans就得不到值了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + A[i], A[i]);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t[maxn];</span><br><span class="line">        <span class="keyword">int</span> ans = a[<span class="number">0</span>][<span class="number">0</span>], temp; <span class="comment">//!!!有可能输入的都是负数，所以不能将ans初始化为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    t[k] += a[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                temp = sequence(t);</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="F-放苹果-🌟🌟🌟"><a href="#F-放苹果-🌟🌟🌟" class="headerlink" title="F 放苹果 🌟🌟🌟"></a>F 放苹果 🌟🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" data-fancybox="group" data-caption="image-20200903022028745" class="fancybox"><img alt="image-20200903022028745" style="zoom:50%;" title="image-20200903022028745" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" class="lazyload"></a><h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>所有不同的摆放方法可以分为两类：至少有一个盘子空着和所有的盘子都不空。<br>我们可以分别计算这两类摆放方法的数目，然后把它们加起来。<br>1️⃣ 至少空一个盘子：N 个盘子摆放 M 个苹果的摆放数目 = N-1 个盘子摆放 M 个苹果的摆放方法数目<br>2️⃣所有盘子都不空：即N个盘子中至少有1个苹果，则 N个盘子摆放 M 个苹果的摆放方法数目 = N 个盘子摆放 M-N 个苹果的摆放方法数目<br>我们可以据此来用递归的方法求解这个问题。</p><p>设f（m,n）为m个苹果，n个盘子的放法数目，则先对n作讨论：</p><ol><li>若 n&gt;m，必定至少有 n-m 个盘子永远空着，去掉它们对摆放苹果放法数目不产生影响 if(n&gt;m) f(m,n)=f(m,m)</li><li>若 n&lt;=m，不同的方法可以分为两类👇<ul><li>有至少一个盘子空着：f(m,n)=f(m,n-1)</li><li>所有盘子都有苹果，则可以从每个盘子中拿掉一个苹果，不影响不同放法的数目f(m,n)=f(m-n,n)</li><li>总的放苹果的放法数目等于两者的和，即f(m,n)=f(m,n-1)+ f(m-n,n)</li></ul></li><li>边界：f(m,n)=f(m,n-1) 时 n 不断变小，f(m,n)=f(m-n,n)时 m 不断变小，因为n&gt;m时return f(m,m)终会到达出口m==0<ul><li>n=1时，所有苹果都必须放到一个盘子里，所有返回1</li><li>m=0时，当没有苹果可放时，定义为1种放法（空盘）</li></ul></li></ol><p>PS：这个blog是各种情况的总结，我没自己看orz，有时间研究下：<br><a href="https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html" target="_blank" rel="noopener">https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html</a></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// m个苹果，n个盘子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没有苹果/只有一个盘子都只有一种放法：空盘子/放这个盘子里</span></span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> f(m, m); <span class="comment">//盘子比苹果多，则至少有n-m个空盘子，所以接下来需要在m个盘子里放m个苹果</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(m - n, n) + f(m, n - <span class="number">1</span>); <span class="comment">//苹果比盘子多，则可以不空盘子，在当前所有盘子里放一个苹果/空一个盘子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f(m, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="G-点菜问题"><a href="#G-点菜问题" class="headerlink" title="G 点菜问题"></a>G 点菜问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" data-fancybox="group" data-caption="image-20200903022224149" class="fancybox"><img alt="image-20200903022224149" style="zoom:50%;" title="image-20200903022224149" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" class="lazyload"></a><h3 id="题目解析-6"><a href="#题目解析-6" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准01背包题</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="H-最大包销额-❓"><a href="#H-最大包销额-❓" class="headerlink" title="H 最大包销额 ❓"></a>H 最大包销额 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" data-fancybox="group" data-caption="image-20200903022345915" class="fancybox"><img alt="image-20200903022345915" style="zoom:50%;" title="image-20200903022345915" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" class="lazyload"></a><h3 id="题目解析-7"><a href="#题目解析-7" class="headerlink" title="题目解析"></a>题目解析</h3><p>首先判断每张发票的有效性，若有效则将这张发票的金额和*100（化为整数）加入需计算01背包的数组w<br>⚠️ 不能将有效发票的每个物品金额*100加入w数组，因为每张发票要报销只能一整张包销</p><p>01背包的容量是报销额度*100</p><p>🔞但最后还是不知道为啥<code>错误50</code> 🙈🙃吐血了</p><h3 id="错误代码-1"><a href="#错误代码-1" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> q, temp[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m, V, w[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>, &amp;q, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        V = <span class="keyword">int</span>(q * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> lenw = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span> t;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c:%lf"</span>, &amp;t, &amp;temp[j]);</span><br><span class="line">                <span class="keyword">if</span> (temp[j] &gt; <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (t == <span class="string">'A'</span> || t == <span class="string">'B'</span> || t == <span class="string">'C'</span>) sum += temp[j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; m || sum &gt; <span class="number">1000</span>) <span class="keyword">continue</span>;</span><br><span class="line">            w[lenw++] = <span class="keyword">int</span>(sum * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenw; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, dp[V] / <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="I-毕业bg"><a href="#I-毕业bg" class="headerlink" title="I 毕业bg"></a>I 毕业bg</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" data-fancybox="group" data-caption="image-20200903022503520" class="fancybox"><img alt="image-20200903022503520" style="zoom:50%;" title="image-20200903022503520" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" class="lazyload"></a><h3 id="题目解析-8"><a href="#题目解析-8" class="headerlink" title="题目解析"></a>题目解析</h3><p>网上说是01背包题。。。完全没看出来_(:з」∠)_</p><p>发起人必须在几小时后离开，这就相当于背包的体积，即在这几个小时里，可以安排多少场bg，以获得最大的快乐度，然后持续时间，相当于一个物品的容积，快乐度相当于物品的价值</p><p>⚠️ </p><ol><li>要对所有bg按照发起人离开时间 t 从小到大进行排序，保证每次新加进来一个bg后可以保证这段时间内前面所有bg都能完成。</li><li>每次当前dp[i][v]时的背包容量是dp[i].t，不是V</li><li>最后不能直接输出dp[V]，要遍历多有的dp[i]，因为每次的背包容量不一定相同</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BG</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> h, l, t;</span><br><span class="line">&#125; bg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(BG a, BG b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;bg[i].h, &amp;bg[i].l, &amp;bg[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(bg + <span class="number">1</span>, bg + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">int</span> V = bg[n].t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = bg[i].t; v &gt;= bg[i].l; v--) &#123; <span class="comment">//前i个活动的V是bg[i].t</span></span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - bg[i].l] + bg[i].h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//!!! 不能直接输出dp[V]</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = V; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.8动态规划专题总结
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11.7 背包问题</title>
    <link href="https://angelia-wang.github.io/2020/08/28/11.7%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://angelia-wang.github.io/2020/08/28/11.7%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-28T13:47:25.000Z</published>
    <updated>2020-09-01T12:21:54.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-7-背包问题"><a href="#11-7-背包问题" class="headerlink" title="11.7 背包问题"></a>11.7 背包问题</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000631" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000631</a></p><h2 id="A-装箱问题"><a href="#A-装箱问题" class="headerlink" title="A 装箱问题"></a>A 装箱问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" data-fancybox="group" data-caption="image-20200901191649727" class="fancybox"><img alt="image-20200901191649727" style="zoom:50%;" title="image-20200901191649727" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就是01背包，01背包的二维状态转移方程：</p><p>令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br>dp[i][v] = max{ dp[i-1][v] , dp[i-1][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)<br>化简为一维状态转移方程：【==<strong>要逆序遍历v</strong>==】<br>dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)</p><p>此题只有容量V和每个物品的体积，没有箱子的价值，所以这里也将箱子的体积作为箱子的价值，一维状态转移方程：<br>dp[i][v]表示前i个物品恰好装入容量为v的箱子中所能获得的最大体积<br>dp[v] = max{ dp[v] , dp[v-w[i]]+w[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)<br>最后遍历所有dp[v] (0&lt;=v&lt;=V) 找到最大的那个就是能获得的最大体积max_v<br>==我现在觉得不用遍历所有的dp[v]。。。dp[V]就是答案，不明白为什么书上说要遍历所有的取最大值，我觉得dp[V]肯定是最大的==</p><p>⚠️ 最后要求输出的是最小剩余空间，故为1-ans</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 20005 <span class="comment">//体积上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100 <span class="comment">//物品上限</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> v[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxV];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//对应d[0][i]=0 前0间物品装i容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= v[i]; j--) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到dp[n][j]前n件物品装j容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, V - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-采药"><a href="#B-采药" class="headerlink" title="B 采药"></a>B 采药</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" data-fancybox="group" data-caption="image-20200901194210442" class="fancybox"><img alt="image-20200901194210442" style="zoom:50%;" title="image-20200901194210442" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就是原原本本的01背包：<br>T总共能够用来采药的时间——背包的容量<br>M山洞里的草药的数目——物品的种类<br>采摘某株草药的时间和这株草药的价值——每项物品的重量和价值</p><p>PS：我觉得最后可以直接输出dp[V]，这就是答案，不用遍历后取最大值</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105 <span class="comment">//最大物品数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005 <span class="comment">//V上限</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//初始化dp[0][i]为前0件物品装入容量为i背包中的最大价值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">            dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-货币系统-🌟🌟"><a href="#C-货币系统-🌟🌟" class="headerlink" title="C 货币系统 🌟🌟"></a>C 货币系统 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" data-fancybox="group" data-caption="image-20200901194523444" class="fancybox"><img alt="image-20200901194523444" style="zoom:50%;" title="image-20200901194523444" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" class="lazyload"></a><h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p>这道题是恰好装满的完全背包问题</p><p>1️⃣ 01背包 🆚 完全背包</p><ol><li><p>一维的状态转移方程相同：dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)<br> ==01背包要逆序遍历v，完全背包要顺序遍历v==</p></li><li><p>==完全背包的二维状态方程与01背包不同==，这就是为啥01背包是逆序遍历v，而完全背包是顺序遍历的原因<br> 完全背包二维状态方程：<br> 令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br> dp[i][v] = max{ dp[i-1][v] , dp[i][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)</p></li><li><p>所以完全背包化简为一维后，dp[v]是上一状态的dp[i-1][v]， dp[v-w[i]]是此时状态的dp[i][v-w[i]]，故顺序遍历<br> 01背包中dp[v]、dp[v-w[i]]都是上一状态的，故逆序遍历<br> （否则遍历到dp[j]时dp[0~j-1]都是此时的状态，上一状态已经被覆盖）</p></li></ol><p>2️⃣ ==恰好装满 🆚 无需完全装满==</p><ol><li>要求恰好装满背包，那么在初始化时除 dp[0]为0其它f[1..V]均设为-∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解</li><li>如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将 dp[0..V]全部设为0。</li><li>Why？可以这样理解——<ul><li>初始化的dp数组事实上就是前0件物品可以放入背包时的合法状态。</li><li>如果要求背包恰好装满，那么此时只有容量为0的背包可能被价值为0的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，它们的值就都应该是-∞了。</li><li>如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了</li></ul></li></ol><p>💡这个小技巧完全可以推广到其它类型的背包问题</p><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是恰好装满的完全背包问题，每种货币可选多次，要组成货币面值为V</p><p>1️⃣ 设置dp[i][v] 表示前i种货币恰好组成面值v的方案，为👇两种方案数相加</p><ul><li>当前不选第i种货币，则为前 i-1 种货币组成面值v的方案</li><li>当前选第i中货币，则为前i种货币组成面值 v-w[i] 的方案（w[i]存储第 i 种货币的面值）</li></ul><p>​     dp[i][v] = dp[i-1][v] + dp[i][v-w[i]] (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V)</p><p>2️⃣ 因为最终要恰好组成面值V，所以是“恰好完全装满”问题，这时dp[0][0]用前0种货币恰好组成面值0的方案数目为1<br>（只有0面值能被前0种货币构成这一种合法解）其他dp[0][v]=0，表示都没有合法解，方案数是0</p><p>3️⃣ 化简为一维动态转移方程：dp[v] = dp[v] + dp[v-w[i]] (w[i]&lt;=v&lt;=V)<br>因为是完全背包，所以顺序遍历 v，边界dp[v]=0 (0&lt;=v&lt;=V), ==dp[0]=1==</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 10005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, V;</span><br><span class="line">    <span class="keyword">int</span> w[maxn];</span><br><span class="line">    LL dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;V) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxv, <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = w[i]; v &lt;= V; v++) &#123;</span><br><span class="line">                dp[v] = dp[v] + dp[v - w[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 11.7背包问题
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.7 堆</title>
    <link href="https://angelia-wang.github.io/2020/08/27/9.7%20%E5%A0%86/"/>
    <id>https://angelia-wang.github.io/2020/08/27/9.7%20%E5%A0%86/</id>
    <published>2020-08-27T13:47:25.000Z</published>
    <updated>2020-10-15T13:50:00.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-7-堆"><a href="#9-7-堆" class="headerlink" title="9.7 堆"></a>9.7 堆</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000616" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000616</a></p><h2 id="A-算法10-10-10-11：堆排序"><a href="#A-算法10-10-10-11：堆排序" class="headerlink" title="A 算法10-10,10-11：堆排序"></a>A 算法10-10,10-11：堆排序</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827192807960.png" data-fancybox="group" data-caption="image-20200827192807960" class="fancybox"><img alt="image-20200827192807960" style="zoom:50%;" title="image-20200827192807960" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827192807960.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>向下调整downAdjust函数构建最大堆，则heapSort从小到大排序。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> heap[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> heigh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = low;   <span class="comment">//父结点</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">2</span> * f; <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">while</span> (c &lt;= heigh) &#123;  <span class="comment">//左孩子存在</span></span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">1</span> &lt;= heigh) &#123; <span class="comment">//右孩子存在</span></span><br><span class="line">            <span class="keyword">if</span> (heap[c + <span class="number">1</span>] &gt; heap[c]) c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[c] &gt; heap[f]) &#123;</span><br><span class="line">            swap(heap[f], heap[c]);</span><br><span class="line">            f = c; <span class="comment">//保持father为欲更改结点</span></span><br><span class="line">            c = <span class="number">2</span> * f;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        downAdjust(i, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    createHeap();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swap(heap[i], heap[<span class="number">1</span>]);</span><br><span class="line">        downAdjust(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;heap[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    heapSort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, heap[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-序列合并"><a href="#B-序列合并" class="headerlink" title="B 序列合并"></a>B 序列合并</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827193145697.png" data-fancybox="group" data-caption="image-20200827193145697" class="fancybox"><img alt="image-20200827193145697" style="zoom:50%;" title="image-20200827193145697" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827193145697.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>自己的代码时间超限，晚上找的AC代码：<a href="https://www.cnblogs.com/heyour/p/12711821.html" target="_blank" rel="noopener">https://www.cnblogs.com/heyour/p/12711821.html</a></p><p>大致思路如下：<br>首先，取a[]数组中的最小元素，也就是a[0]，分别加上b[i]（0&lt;=i&lt;n），并放入优先队列中。那么可以确定，此时优先队列队首的元素，也即a[0]+b[0]的值就是最小的，可以输出，并将a[1]+b[0]输入优先队列，依次类推，直到输出了n个数为止。</p><h3 id="代码（时间超限）"><a href="#代码（时间超限）" class="headerlink" title="代码（时间超限）"></a>代码（时间超限）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">int</span> n, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            q.push(a[j] + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; !q.empty(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, q.top());</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码（AC）"><a href="#代码（AC）" class="headerlink" title="代码（AC）"></a>代码（AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index, sum;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum &gt; t.sum; <span class="comment">//优先队列表示按sum的大小排列 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n, a[MAX], b[MAX];</span><br><span class="line">    Node temp, now;</span><br><span class="line">    priority_queue&lt;Node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">            temp.index = <span class="number">0</span>;</span><br><span class="line">            temp.sum = b[i] + a[temp.index];  <span class="comment">//index表示a[]中的第几个数字 </span></span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            now = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(now.index+<span class="number">1</span> &lt; n)&#123;</span><br><span class="line">                temp.index = now.index + <span class="number">1</span>;</span><br><span class="line">                temp.sum = now.sum - a[now.index] + a[temp.index];</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, now.sum, i==n<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.7堆
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.8 哈弗曼树</title>
    <link href="https://angelia-wang.github.io/2020/08/27/9.8%20%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91/"/>
    <id>https://angelia-wang.github.io/2020/08/27/9.8%20%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91/</id>
    <published>2020-08-27T13:47:25.000Z</published>
    <updated>2020-10-15T13:50:41.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-7-堆"><a href="#9-7-堆" class="headerlink" title="9.7 堆"></a>9.7 堆</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000617" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000617</a></p><h2 id="C-哈弗曼树"><a href="#C-哈弗曼树" class="headerlink" title="C 哈弗曼树"></a>C 哈弗曼树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215058546.png" data-fancybox="group" data-caption="image-20200827215058546" class="fancybox"><img alt="image-20200827215058546" style="zoom:50%;" title="image-20200827215058546" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215058546.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><strong>⚠️ 树的带权路径长度 = 叶子结点的带权路径长度之和</strong><br>       求树的最小带权路径 = 求哈弗曼树的带权路径</p><p>大体思路：</p><ul><li>使用优先队列，先将所有叶子结点都压入队列中</li><li>每次从优先队列中取出两个最小的数，将它们相加后压入优先队列（在外部定义ans，将相加的结果累加），直到优先队列中只剩下一个元素</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, temp, ans;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            a = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            b = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            q.push(a + b);</span><br><span class="line">            ans += a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-Haffman编码"><a href="#D-Haffman编码" class="headerlink" title="D Haffman编码"></a>D Haffman编码</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215351252.png" data-fancybox="group" data-caption="image-20200827215351252" class="fancybox"><img alt="image-20200827215351252" style="zoom:50%;" title="image-20200827215351252" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215351252.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>1️⃣ 使用优先队列实现哈弗曼树的构造：</p><ol><li>先将所有叶子结点都压入队列中</li><li>每次从优先队列中取出两个权值最小的树，将它们组合成一棵树后压入优先队列，直到优先队列中只剩下个根结点root</li></ol><p>2️⃣ 使用DFS完成哈夫曼的编码，使用map完成字符到编码的映射</p><ol><li>DFS左孩子时，编码code+“0”</li><li>DFS右孩子时，编码code+“1”</li><li>死胡同——无左右孩子【因为哈弗曼树没有度为1的结点，故要么左右孩子都有，要么都没有】</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> d;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="comment">// 权重w大的优先级低，权重相等时ACSII大的优先级低</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node *a, node *b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a-&gt;w != b-&gt;w) <span class="keyword">return</span> a-&gt;w &gt; b-&gt;w;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a-&gt;d &gt; b-&gt;d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node *, <span class="built_in">vector</span>&lt;node *&gt;, cmp&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">createHaffmanTree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node *a, *b, *sum, *temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp = <span class="keyword">new</span> node;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp-&gt;d &gt;&gt; temp-&gt;w;</span><br><span class="line">        temp-&gt;lchild = temp-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        a = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        b = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        sum = <span class="keyword">new</span> node;</span><br><span class="line">        sum-&gt;w = a-&gt;w + b-&gt;w;</span><br><span class="line">        sum-&gt;d = a-&gt;d;  <span class="comment">//满足题目中的小规定：创建的新节点所代表的字符与它的做孩子的字符相同</span></span><br><span class="line">        sum-&gt;lchild = a, sum-&gt;rchild = b;</span><br><span class="line">        q.push(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(node *root, <span class="built_in">string</span> code)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; root-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ans[root-&gt;d] = code;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild != <span class="literal">NULL</span>) DFS(root-&gt;lchild, code + <span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild != <span class="literal">NULL</span>) DFS(root-&gt;rchild, code + <span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    node *root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        root = createHaffmanTree(n);</span><br><span class="line">        DFS(root, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;::iterator it = ans.<span class="built_in">begin</span>(); it != ans.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">":"</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-合并果子-NOIP2004TGT2"><a href="#E-合并果子-NOIP2004TGT2" class="headerlink" title="E 合并果子-NOIP2004TGT2"></a>E 合并果子-NOIP2004TGT2</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827220031070.png" data-fancybox="group" data-caption="image-20200827220031070" class="fancybox"><img alt="image-20200827220031070" style="zoom:50%;" title="image-20200827220031070" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827220031070.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题实际就是求树的最小带权路径，即哈夫曼树的带权路径长度，也即叶子结点的带权路径长度之和</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, temp, a, b, ans = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        a = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        b = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        q.push(a + b);</span><br><span class="line">        ans += a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.8哈弗曼树
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.3 树的遍历</title>
    <link href="https://angelia-wang.github.io/2020/08/26/9.3%20%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://angelia-wang.github.io/2020/08/26/9.3%20%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2020-08-26T13:47:25.000Z</published>
    <updated>2020-10-15T13:50:19.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-3-树的遍历"><a href="#9-3-树的遍历" class="headerlink" title="9.3 树的遍历"></a>9.3 树的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000612" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000612</a></p><h2 id="A-树查找"><a href="#A-树查找" class="headerlink" title="A 树查找"></a>A 树查找</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826010850612.png" data-fancybox="group" data-caption="image-20200826010850612" class="fancybox"><img alt="image-20200826010850612" style="zoom:50%;" title="image-20200826010850612" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826010850612.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题指明树是完全二叉树，依次输入结点。</p><p>对完全二叉树当中的任何一个结点（设编号为x），其左孩子的编号是2x，右孩子编号是2x+1<br>❗根结点必须从1开始！！！（否则2*0=0）</p><p>所以大体解题思路：<br>1️⃣ 使用Node[maxn] 数组存储树的结点，对当前下标为x的结点，可通过下标2x访问其左孩子，2x+1访问其右孩子<br>2️⃣ 输入的是结点的data，需要记录层次，所以node结构体中有成员data、layer<br>3️⃣ 使用BFS遍历整棵树，存储d层次的结点<br>（之所以存储下来而不是直接输出，因为土题目要求节点间用空格隔开，最后一个节点后没有空格）<br>4️⃣ 输出存储的d层次的结点</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">&#125; Node[maxn];</span><br><span class="line"><span class="keyword">int</span> n, d; <span class="comment">//结点个数，深度</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn], digit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    Node[root].layer = <span class="number">1</span>;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = q.front();</span><br><span class="line">        <span class="keyword">if</span> (Node[front].layer == d) &#123;</span><br><span class="line">            ans[digit++] = Node[front].data;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//左孩子存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * front &lt;= n) &#123;</span><br><span class="line">            Node[<span class="number">2</span> * front].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(<span class="number">2</span> * front);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * front + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            Node[<span class="number">2</span> * front + <span class="number">1</span>].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(<span class="number">2</span> * front + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Node[i].data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">        digit = <span class="number">0</span>;</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (digit == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digit; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; digit - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-树的高度"><a href="#B-树的高度" class="headerlink" title="B 树的高度"></a>B 树的高度</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826011655470.png" data-fancybox="group" data-caption="image-20200826011655470" class="fancybox"><img alt="image-20200826011655470" style="zoom:50%;" title="image-20200826011655470" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826011655470.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题考察的是普通树的遍历，用数组存储树的所有结点</p><p>因为输入的是树各个结点之间的关系，所以node结构体不用存储data。因为要输出树的高度，所以要记录layer<br>（用vector&lt;int&gt; child存储此结点所有的孩子结点）</p><p>⚠️ 唯一要注意一点：<br>一开始没有用ans在BFS过程中记录最大的结点layer，认为Node[n].layer一定最大，直接在main中输出Node[n].layer，结果WA。（🙃maybe 结点不一定按照层数顺序编号，可能会有大的结点在较低高度的情况）</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105  <span class="comment">//随便写的大小，题目没说，但是AC了</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125; Node[maxn];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    Node[root].layer = <span class="number">1</span>;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (Node[front].layer &gt; ans) ans = Node[front].layer;  <span class="comment">//!!重要</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[front].child.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = Node[front].child[i];</span><br><span class="line">            Node[child].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Node[a].child.push_back(b);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.3树的遍历
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.4 二叉查找树</title>
    <link href="https://angelia-wang.github.io/2020/08/26/9.4%20%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>https://angelia-wang.github.io/2020/08/26/9.4%20%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</id>
    <published>2020-08-26T13:47:25.000Z</published>
    <updated>2020-10-15T13:50:28.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-4-二叉查找树"><a href="#9-4-二叉查找树" class="headerlink" title="9.4 二叉查找树"></a>9.4 二叉查找树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000613" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000613</a></p><h2 id="A-二叉排序树"><a href="#A-二叉排序树" class="headerlink" title="A 二叉排序树"></a>A 二叉排序树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201100960.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201100960.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>唯一的坑在于“输入中可能有重复元素，但是输出的二叉树遍历序列中重复元素不用输出。”<br>题目中没说。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//注意&amp;！！！</span></span><br><span class="line">    <span class="comment">// 找到插入位置</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == root-&gt;data) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        insert(root, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">    preOrder(root-&gt;lchild);</span><br><span class="line">    preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root-&gt;lchild);</span><br><span class="line">    postOrder(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        node *root = create();</span><br><span class="line">        preOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        postOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-二叉搜索树"><a href="#B-二叉搜索树" class="headerlink" title="B 二叉搜索树"></a>B 二叉搜索树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201345691.png" data-fancybox="group" data-caption="image-20200826201345691" class="fancybox"><img alt="image-20200826201345691" style="zoom:50%;" title="image-20200826201345691" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201345691.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>中序遍历+前序遍历/后序遍历才能唯一的确定一棵二叉树</p><p>对 ==二叉排序树== 而言，相同元素的二叉排序树中序遍历一定相同，而不同元素二叉排序树使用前序遍历就可以发现不相同，所以==只需要前序遍历两个二叉树==，比较一下就可以判断</p><p>❗️“答案错误50”，看了半天不知道哪里错了。看了网上的代码，觉得写得没差别<em>(:з」∠)</em></p><h3 id="代码（答案错误50）"><a href="#代码（答案错误50）" class="headerlink" title="代码（答案错误50）"></a>代码（答案错误50）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">        insert(root, data[i] - <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    s += root-&gt;data;</span><br><span class="line">    preOrder(root-&gt;lchild, s);</span><br><span class="line">    preOrder(root-&gt;rchild, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild, s);</span><br><span class="line">    s += root-&gt;data;</span><br><span class="line">    inOrder(root-&gt;rchild, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">string</span> pre1, pre2, in1, in2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        node *root = create(s);</span><br><span class="line">        preOrder(root, pre1);</span><br><span class="line">        inOrder(root, in1);</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            pre2.<span class="built_in">clear</span>();</span><br><span class="line">            in2.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            root = create(s);</span><br><span class="line">            preOrder(root, pre2);</span><br><span class="line">            inOrder(root, in2);</span><br><span class="line">            <span class="keyword">if</span> (pre1 == pre2 &amp;&amp; in1 == in2) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.4二叉查找树
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.5 平衡二叉树</title>
    <link href="https://angelia-wang.github.io/2020/08/26/9.5%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://angelia-wang.github.io/2020/08/26/9.5%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-08-26T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:47.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-5-平衡二叉树"><a href="#9-5-平衡二叉树" class="headerlink" title="9.5 平衡二叉树"></a>9.5 平衡二叉树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000614" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000614</a></p><h2 id="A-二叉排序树"><a href="#A-二叉排序树" class="headerlink" title="A 二叉排序树"></a>A 二叉排序树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826214000557.png" data-fancybox="group" data-caption="image-20200826214000557" class="fancybox"><img alt="image-20200826214000557" style="zoom:50%;" title="image-20200826214000557" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826214000557.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>注意函数L、R、insert的写法，⚠️有&amp;</p><p>❗️==不要在search返回true/false，这里WA了半天==，这样最终只能返回false，大概因为search本身就是递归的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> root-&gt;<span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结点的高度等于左右子树的最大高度+1 ⚠️要加1！！！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    root-&gt;<span class="built_in">height</span> = <span class="built_in">max</span>(getHeight(root-&gt;lchild), getHeight(root-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平衡因子 = 左右子树高度差</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBananceFactor</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root-&gt;lchild) - getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(node *&amp;root)</span> </span>&#123;  <span class="comment">//注意&amp;</span></span><br><span class="line">    node *temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(node *&amp;root)</span> </span>&#123; <span class="comment">//注意&amp;</span></span><br><span class="line">    node *temp = root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild = root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//往左子树插，导致左子树高度&gt;右子树高度</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span> (getBananceFactor(root) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getBananceFactor(root-&gt;lchild) == <span class="number">1</span>) &#123; <span class="comment">//LL</span></span><br><span class="line">                R(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBananceFactor(root-&gt;lchild) == <span class="number">-1</span>) &#123; <span class="comment">//LR</span></span><br><span class="line">                L(root-&gt;lchild);</span><br><span class="line">                R(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span> (getBananceFactor(root) == <span class="number">-2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getBananceFactor(root-&gt;rchild) == <span class="number">-1</span>) &#123; <span class="comment">//RR</span></span><br><span class="line">                L(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBananceFactor(root-&gt;rchild) == <span class="number">1</span>) &#123; <span class="comment">//RL</span></span><br><span class="line">                R(root-&gt;rchild);</span><br><span class="line">                L(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        insert(root, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node *root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == root-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;data) search(root-&gt;lchild, x);</span><br><span class="line">    <span class="keyword">else</span> search(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    preOrder(root-&gt;lchild);</span><br><span class="line">    preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) != EOF) &#123;</span><br><span class="line">        node *root = create(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            search(root, temp);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.5平衡二叉树
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.6 并查集</title>
    <link href="https://angelia-wang.github.io/2020/08/26/9.6%20%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://angelia-wang.github.io/2020/08/26/9.6%20%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2020-08-26T13:47:25.000Z</published>
    <updated>2020-10-15T13:49:55.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-6-并查集"><a href="#9-6-并查集" class="headerlink" title="9.6 并查集"></a>9.6 并查集</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000615" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000615</a></p><h2 id="B-畅通工程"><a href="#B-畅通工程" class="headerlink" title="B 畅通工程"></a>B 畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827144711658.png" data-fancybox="group" data-caption="image-20200827144711658" class="fancybox"><img alt="image-20200827144711658" style="zoom:50%;" title="image-20200827144711658" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827144711658.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>第一行n、m，接下来m行为相联系的各个结点。<br>求将n个结点都联系在一起，还需至少几条关系。</p><p>所以只需要找到目前m条联系后，n个结点内有几个并查集ans，最后答案为ans - 1<br>找n个结点内有几个并查集：遍历n各结点，若i与其father[i]相等，证明这个节点的根结点就是它自己，所以ans++</p><p>注意点⚠️<br>1️⃣在Union之前，需要将n个结点的father初始化为自己，即father[i]=i<br>（for循环从1开始，不从0开始，因为输入的m个关系中结点从1开始）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Union(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == father[i]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-More-is-better"><a href="#D-More-is-better" class="headerlink" title="D More is better"></a>D More is better</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827145427840.png" data-fancybox="group" data-caption="image-20200827145427840" class="fancybox"><img alt="image-20200827145427840" style="zoom:50%;" title="image-20200827145427840" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827145427840.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>一个房间里面有若干人maxn(0 ≤ n ≤10 000 000)。他们之间有些是朋友有些不是。现在从中选出一个群体（朋友的朋友也是朋友都是一个群体）。要使这个群体最大。</p><p>现在输入他们之间的关系：<br>第一行输入有多少个关系需要输入n (0 ≤ n ≤ 100 000)。<br>以下n行为具体的关系。<br>若输入1 2 。则表示1和2是朋友。</p><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题要求所有人maxn(0 ≤ n ≤10 000 000)，添加n(0 ≤ n ≤ 100 000)个关系后，形成的所有并查集中最大并查集的元素个数</p><p>注意点⚠️<br>1️⃣ 初始化father[i]=i时，要对所有人maxn初始化，因为不知道输入的关系中最大的结点是啥<br>2️⃣ 求每个并查集中元素数目：设立group[maxn]数组，遍历所有结点，将group[findFather(i)]++<br>（❗️是findFather不是father，虽然在findFather中使用了路径压缩，让所有的father都是根结点，但最后一次Union后没有使用过findFather，所以有一些结点的father不是根结点）<br>3️⃣这里本来最后两个for循环也是for (int i = 1; i &lt;= maxn; i++) ，但是这样“时间超限”，所以优化了下，设置循环截止条件为max，max是n个关系中最大的结点。<br>（因为最后并查集是在输入了关系的结点之间，之前因为不知道最大结点是啥，才在初始化时直接初始化所有结点）</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> group[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, <span class="built_in">max</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(group, <span class="number">0</span>, <span class="keyword">sizeof</span>(group));</span><br><span class="line">        <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) father[i] = i;  <span class="comment">//!!!是maxn</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Union(a, b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = a;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">            group[findFather(i)]++;  <span class="comment">//!!!是findFather不是Father</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group[i] &gt; ans) ans = group[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.6并查集
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>7.1 栈的应用</title>
    <link href="https://angelia-wang.github.io/2020/08/03/7.1%20%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://angelia-wang.github.io/2020/08/03/7.1%20%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-03T14:29:20.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-1-栈的应用"><a href="#7-1-栈的应用" class="headerlink" title="7.1 栈的应用"></a>7.1 栈的应用</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000605" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000605</a></p><p><code>6.8 stack的常见用法详解</code>与此节题目相同</p><h2 id="A-简单计算器"><a href="#A-简单计算器" class="headerlink" title="A  简单计算器"></a>A  简单计算器</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" data-fancybox="group" data-caption="image-20200803214737346" class="fancybox"><img alt="image-20200803214737346" style="zoom:50%;" title="image-20200803214737346" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm代码注释很清楚，标注⚠️的地方都是写代码的时候漏掉的，要注意！！！</p><p>一开始没有写node结构体，但是考虑到如果不管操作数还是操作符都用char表示的话，操作数最大为127而且不能有浮点数，这显然是不可能的，所以还是改成了node结构体。</p><p>【书p147也有此题解析和代码，可参考】</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> num;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">bool</span> flag;  <span class="comment">//为true表示为操作符，false为操作符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s;    <span class="comment">//在change函数中用于存放放操作符，在calculate函数中存放操作数</span></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;    <span class="comment">//存放后缀表达式</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;<span class="comment">//操作符优先级</span></span><br><span class="line"><span class="built_in">string</span> str;       <span class="comment">//读入的中缀表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历中缀表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length();) &#123;</span><br><span class="line">        node temp;</span><br><span class="line">        <span class="comment">//若是操作数，则加入q</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            temp.flag = <span class="literal">true</span>;</span><br><span class="line">            temp.num = str[i++] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; str.length() &amp;&amp; str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;  <span class="comment">//i &lt; str.length()很重要！！！⚠️</span></span><br><span class="line">                temp.num = temp.num * <span class="number">10</span> + str[i] - <span class="string">'0'</span>; <span class="comment">//因为这个操作数不一定只有一位</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是操作符</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp.flag = <span class="literal">false</span>;</span><br><span class="line">            temp.op = str[i];</span><br><span class="line">            <span class="comment">//若操作符优先级 &lt;= 栈顶优先级，则不停出栈</span></span><br><span class="line">            <span class="keyword">while</span> (!s.empty() &amp;&amp; mp[str[i]] &lt;= mp[s.top().op]) &#123;  <span class="comment">// !s.empty() 很重要！！！⚠️</span></span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若s中还有操作符，则加入后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        q.push(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算后缀表达式,最后s中的数为最终结果</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop(); <span class="comment">//别忘了！！！⚠️</span></span><br><span class="line">        <span class="comment">//为操作数，则压栈</span></span><br><span class="line">        <span class="keyword">if</span> (temp.flag) &#123;</span><br><span class="line">            s.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为操作符，则出栈两个进行计算，然后结果压栈</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            node a, b, c;</span><br><span class="line">            c.flag = <span class="literal">true</span>;</span><br><span class="line">            b = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            a = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (temp.op == <span class="string">'+'</span>) c.num = a.num + b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'-'</span>) c.num = a.num - b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'*'</span>) c.num = a.num * b.num;</span><br><span class="line">            <span class="keyword">else</span> c.num = a.num / b.num;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.top().num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp[<span class="string">'+'</span>] = <span class="number">1</span>, mp[<span class="string">'-'</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">'*'</span>] = <span class="number">2</span>, mp[<span class="string">'/'</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str) &amp;&amp; str != <span class="string">"0"</span>) &#123;</span><br><span class="line">        <span class="comment">//将str的所有空格都去掉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span>::iterator it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">' '</span>) str.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">        change();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, calculate());</span><br><span class="line">        s.pop(); <span class="comment">//因为s最后还有一个数字，要清空s</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="B-Problem-E"><a href="#B-Problem-E" class="headerlink" title="B Problem E"></a>B Problem E</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" data-fancybox="group" data-caption="image-20200803215233202" class="fancybox"><img alt="image-20200803215233202" style="zoom:50%;" title="image-20200803215233202" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>定义栈stack，遍历输入的字符串。</p><ul><li>若是 (、[、{ 肯定要入栈；</li><li>若是 )、]、}，若栈为空则return false；若栈不为空，但与栈顶元素不匹配，则return false</li><li>遍历完后，若stack为空，证明都匹配完全 return true；否则证明有多余的符号，return false【故可简化为return stack.empty() 】</li></ul><p>⚠️ 使用getline时，因为getline可以读入空格，故若前面使用了scanf，要先用getchar吸收掉换行</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">'('</span> &amp;&amp; b == <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'['</span> &amp;&amp; b == <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'&#123;'</span> &amp;&amp; b == <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span> || str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span>) s.push(str[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span> || str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!match(s.top(), str[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            getline(<span class="built_in">cin</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (deal()) <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()) s.pop();<span class="comment">//别忘了最后要清空stack，因为下一次还要用的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 7.1栈的应用
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>8.1 DFS</title>
    <link href="https://angelia-wang.github.io/2020/08/03/8.1%20DFS/"/>
    <id>https://angelia-wang.github.io/2020/08/03/8.1%20DFS/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-25T15:05:37.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-1-DFS"><a href="#8-1-DFS" class="headerlink" title="8.1 DFS"></a>8.1 DFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000608" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000608</a></p><h2 id="B-【递归入门】组合的输出"><a href="#B-【递归入门】组合的输出" class="headerlink" title="B 【递归入门】组合的输出"></a>B 【递归入门】组合的输出</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" data-fancybox="group" data-caption="image-20200824041227376" class="fancybox"><img alt="image-20200824041227376" style="zoom:50%;" title="image-20200824041227376" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题实际是递归求全排列的变体</p><p>🆚 求全排列</p><ol><li>全排列每次从n个数中选择一个没选过的，最后组成n个数的序列；此处从n个数中选择一个没选过的，最后组成r个数的序列</li><li>全排列中对n个数序列之间的顺序无要求；此处是组合，也就是不要重复的序列，可通过添加限制要求：后一个数一定比前一个数大实现——x&gt;=p[index-1]</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> n, r, p[maxn];</span><br><span class="line"><span class="keyword">bool</span> hashtable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == r + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[x] &amp;&amp; x &gt;= p[index - <span class="number">1</span>]) &#123;</span><br><span class="line">            p[index] = x;</span><br><span class="line">            hashtable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashtable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r) != EOF) &#123;</span><br><span class="line">        generateP(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="E【递归入门】出栈序列统计"><a href="#E【递归入门】出栈序列统计" class="headerlink" title="E【递归入门】出栈序列统计"></a>E【递归入门】出栈序列统计</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" data-fancybox="group" data-caption="image-20200824041717626" class="fancybox"><img alt="image-20200824041717626" style="zoom:50%;" title="image-20200824041717626" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目意思：输入n接下来模拟栈的入栈、出栈操作，需要得到入栈n次，出栈n次。问有几种不同的操作顺序<br>（一开始愣是没读懂题目啥意思😂）</p><p>设入栈次数in_num，出栈次数out_num<br>所以DFS岔路口是选择入栈还是出栈。<br>若in_num &gt; n || out_num &gt; n 到达死胡同，in_num == n &amp;&amp; out_num == n 表示终点。其他都是岔路口。<br>但需注意的是，只有 in_num &gt; out_num 时才能出栈 </p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in_num表示入栈次数，out_num表示出栈次数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> in_num, <span class="keyword">int</span> out_num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_num == n &amp;&amp; out_num == n) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; n || out_num &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (in_num &lt; n) DFS(in_num + <span class="number">1</span>, out_num); <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; out_num &amp;&amp; out_num &lt; n) DFS(in_num, out_num + <span class="number">1</span>); <span class="comment">//出栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="F-【递归入门】走迷宫"><a href="#F-【递归入门】走迷宫" class="headerlink" title="F 【递归入门】走迷宫"></a>F 【递归入门】走迷宫</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" data-fancybox="group" data-caption="image-20200824042426531" class="fancybox"><img alt="image-20200824042426531" style="zoom:50%;" title="image-20200824042426531" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ </p><ol><li>要弄清楚x，y方向和n、m界限分别是对x还是y</li><li>题目要求按照左上右下方向拓展，这里WA了一次</li></ol><p>题外话：这里用bool数组b[i][j]记录点x=i，y=j是否已经走过，但是BFS中用bool数组记录点是否如果队</p><p>💡这里代码没有做矩阵有全0行/全0列时肯定无解的剪枝</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m,digit=<span class="number">0</span>;</span><br><span class="line">node S,T, Node;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];<span class="comment">//存储迷宫的情况</span></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">20</span>][<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;;<span class="comment">//每个点有没有走过</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;; <span class="comment">//左上右下</span></span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == T.x &amp;&amp; y == T.y) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(%d,%d)"</span>,(*it).x,(*it).y);</span><br><span class="line">            <span class="keyword">if</span>(it&lt;ans.<span class="built_in">end</span>()<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        digit++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> newX = x + X[i];</span><br><span class="line">        <span class="keyword">int</span> newY = y + Y[i];</span><br><span class="line">        <span class="comment">// 结点可以走，且没被走过</span></span><br><span class="line">        <span class="keyword">if</span> (judge(newX, newY) &amp;&amp; !b[newX][newY]) &#123;</span><br><span class="line">            Node.x = newX;</span><br><span class="line">            Node.y = newY;</span><br><span class="line">            b[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">            ans.push_back(Node);</span><br><span class="line">            DFS(Node.x, Node.y);</span><br><span class="line">            ans.pop_back();</span><br><span class="line">            b[newX][newY] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S.x, &amp;S.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T.x, &amp;T.y);</span><br><span class="line">    b[S.x][S.y]= <span class="literal">true</span>;</span><br><span class="line">    ans.push_back(S);</span><br><span class="line">    DFS(S.x,S.y);</span><br><span class="line">    <span class="keyword">if</span> (digit==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 8.1DFS
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>8.2 BFS</title>
    <link href="https://angelia-wang.github.io/2020/08/03/8.2%20BFS/"/>
    <id>https://angelia-wang.github.io/2020/08/03/8.2%20BFS/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-08-31T14:43:25.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-2-BFS"><a href="#8-2-BFS" class="headerlink" title="8.2 BFS"></a>8.2 BFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000609" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000609</a></p><h2 id="A-Jugs"><a href="#A-Jugs" class="headerlink" title="A Jugs"></a>A Jugs</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" data-fancybox="group" data-caption="image-20200825011917985" class="fancybox"><img alt="image-20200825011917985" style="zoom:50%;" title="image-20200825011917985" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" class="lazyload"></a><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" data-fancybox="group" data-caption="image-20200825011952480" class="fancybox"><img alt="image-20200825011952480" style="zoom:50%;" title="image-20200825011952480" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" class="lazyload"></a><h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>你有两个杯子A、B和无限量的水，杯子容量是Ca、Cb，问如何通过👇操作，使第二杯中有容量为N的水。<br>能进行的操作是 “fill A”, “empty A”, “fill B”, “empty B”, “pour A B”, “pour B A”<br>其中pour A B表示将A中的水倒入B中，直到A为空或者B满</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>BFS题解模板👇</p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" data-fancybox="group" data-caption="image-20200825012235783" class="fancybox"><img alt="image-20200825012235783" style="zoom:40%;" title="image-20200825012235783" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" class="lazyload"></a><ol><li><p>这道题有6中操作，所以BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b，通过a、b来判断能进行什么操作。又因为最后要输出所有操作，故每一步选择什么操作都要记录。</p><ul><li>因此，定义结构体node，含成员a、b、string型的op</li><li><strong>💡tip：每次记录操作不便于存储，所以定义一个ans[6]数组存放操作，则op只需累加记录每一步操作对应的数就可以</strong></li></ul></li><li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b的状态是否重复入队</p></li><li><p>根据BFS模板写代码，S表示初始状态，杯中水量a、b都为0。S入队。</p><ul><li>while循环中每次取出队首元素，判断b是否为K（是否满足条件），若是则输出具体操作</li><li>否则，判断当前a、b容量下能进行什么操作，将对应的元素加入队列</li></ul></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">string</span> op) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;op = op;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ans[<span class="number">6</span>] = &#123;<span class="string">"fill A"</span>, <span class="string">"empty A"</span>, <span class="string">"fill B"</span>, <span class="string">"empty B"</span>, <span class="string">"pour A B"</span>, <span class="string">"pour B A"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ca, cb, n;</span><br><span class="line"><span class="function">node <span class="title">S</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//a、b为目前两容器的量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q; <span class="comment">//定义队列</span></span><br><span class="line">    q.push(S);     <span class="comment">//首元素入队</span></span><br><span class="line">    inq[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;<span class="comment">//标记首元素已入队</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">//队列非空</span></span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (temp.b == n) &#123;  <span class="comment">//终止条件是第二杯水满足题目要求</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[temp.op[i] - <span class="string">'0'</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[ca][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b, temp.op + <span class="string">"0"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[ca][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(<span class="number">0</span>, temp.b, temp.op + <span class="string">"1"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][cb]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, cb, temp.op + <span class="string">"2"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][cb] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, <span class="number">0</span>, temp.op + <span class="string">"3"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从A倒入B</span></span><br><span class="line">        <span class="keyword">if</span> (temp.a &gt;= cb - temp.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[temp.a - (cb - temp.b)][cb]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(temp.a - (cb - temp.b), cb, temp.op + <span class="string">"4"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[temp.a - (cb - temp.b)][cb] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b + temp.a]) &#123;</span><br><span class="line">            node t(<span class="number">0</span>, temp.b + temp.a, temp.op + <span class="string">"4"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b + temp.a] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从B倒入A</span></span><br><span class="line">        <span class="keyword">if</span> (temp.b &gt;= ca - temp.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][temp.b - (ca - temp.a)]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b - (ca - temp.a), temp.op + <span class="string">"5"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[ca][temp.b - (ca - temp.a)] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[temp.a + temp.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node t(temp.a + temp.b, <span class="number">0</span>, temp.op + <span class="string">"5"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a + temp.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ca, &amp;cb, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(inq,<span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">        BFS();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="B-DFS-or-BFS"><a href="#B-DFS-or-BFS" class="headerlink" title="B DFS or BFS?"></a>B DFS or BFS?</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" data-fancybox="group" data-caption="image-20200825013705700" class="fancybox"><img alt="image-20200825013705700" style="zoom:50%;" title="image-20200825013705700" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" class="lazyload"></a><h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目注意点⚠️</p><ol><li><p>可以原地不动</p></li><li><p>因为石头不断下降，所以每次面对的地图情况都不同，所以不用bool数组判断是否已入队</p></li><li><p>每入队一层结点，石头下降一次，所以node结点中需要当前层数step</p><ul><li>观察用法，不能在while中的for循环中判断flag=true，最后for循环外根据flag判断是否更新地图，因为只有当本层结点都走过后才能更新地图到下一层结点</li><li>所以通过定义level，判断level &lt; Node.step，然后选择是否更新地图</li><li>🌰 假设第0层有A，第1层有B、C、D，第2层B后有E、F。<ul><li>🔵 如果通过flag方式，则A入队，for循环中BCD入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第1层状态。</li><li>B出队，for循环中EF入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第2层状态。【此时queue中为CDEF】</li><li>C出队，此时应该是第1层石头的状态，不应该是第2层，所以出错了❌</li><li>🔵 如果通过level方式，则A入队，for循环中BCD入队</li><li>B出队，此时B的step=1，level=0&lt;1，故下降一层石头变成第1层状态，for循环中EF入队</li><li>C出队，此时C的step=1，level=step，故不下降石头 ✅</li></ul></li></ul></li><li><p>更新地图只能从后往前更新 for (int i = 7; i &gt;= 0; i–) ，否则从前往后一个石头就变成一列石头了【自己思考下】</p></li><li><p>如果step&gt;=8 肯定能走到终点，因为石头都掉光了（剪枝）</p></li><li><p>每组数据之后还有一个空行，要getchar()</p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>; <span class="comment">//每层掉一次石头</span></span><br><span class="line">&#125; U, A, Node;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"><span class="comment">// 上，下，左，右，左上，右上，左下，右下，原地不动</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">9</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">9</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否安全</span></span><br><span class="line"><span class="comment">//不需要判是否已入队，因为石头会下降所以每次都是不同情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">7</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">7</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置有石头</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; a[x - <span class="number">1</span>][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置上方有石头</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新大石头位置</span></span><br><span class="line"><span class="comment">//!!!!! 要从后往前更新，本来我想的是在先判断这个位置是不是落石，如果是的话，那就把下面一个也变成落石，可是这样的话，就会对地图再一次更新</span></span><br><span class="line"><span class="comment">//就会产生一列都是S的情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">7</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">'S'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; <span class="number">8</span>) a[i + <span class="number">1</span>][j] = <span class="string">'S'</span>;</span><br><span class="line">                a[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(U);</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (level &lt; Node.<span class="built_in">step</span>) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">            level = Node.<span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Node.x == A.x &amp;&amp; Node.y == A.y) || Node.<span class="built_in">step</span> &gt;= <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//若能撑过8步，则石头都掉完了，肯定能到达终点</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = Node.x + X[i];</span><br><span class="line">            <span class="keyword">int</span> newY = Node.y + Y[i];</span><br><span class="line">            <span class="comment">//当前位置安全</span></span><br><span class="line">            <span class="keyword">if</span> (judge(newX, newY)) &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                node temp;</span><br><span class="line">                temp.x = newX, temp.y = newY, temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">int</span> time = n;</span><br><span class="line">    U.x = <span class="number">7</span>, U.y = <span class="number">0</span>, U.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    A.x = <span class="number">0</span>, A.y = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();<span class="comment">//去掉换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        getchar(); <span class="comment">//每组数据后还有一个空行要去掉</span></span><br><span class="line">        <span class="keyword">if</span> (BFS()) <span class="built_in">printf</span>(<span class="string">"Case #%d: Yes\n"</span>, time - n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>, time - n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="C-【宽搜入门】8数码难题"><a href="#C-【宽搜入门】8数码难题" class="headerlink" title="C 【宽搜入门】8数码难题"></a>C 【宽搜入门】8数码难题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" data-fancybox="group" data-caption="image-20200825014955081" class="fancybox"><img alt="image-20200825014955081" style="zoom:50%;" title="image-20200825014955081" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" class="lazyload"></a><h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ 这道题中，不断移动的是空行，每次空格0能否上下左右移动，除了要判断碰到墙壁的情况，还要判断当前9个数字的状态是否重复。</p><ol><li><p>因为移动的是空格（题中用0表示），所以需记录空格的位置x、y。为了记录每次9中数字的状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</p></li><li><p>S表示开始状态，T表示目的状态。</p></li><li><p>队列中每次取出的队首元素如果状态和T相同，则输出步数；</p><p> 否则看当前0能移动的位置，判断此时的状态序列是否重复，若否则加入队列</p></li><li><p>❗️因为vector是一维数组，0记录的是在二维数组中的位置，所以转换每次0移动后转换为序列时要注意换算。</p><ul><li>若0的坐标（x,y）转换到一维数组中是status[3*x+y]<ul><li>🌰 输入样例中“2，8，3，1，6，4，7，0，5”中0的坐标是（2，1），在status中是status[7]</li></ul></li><li>若0向上移动X[i]=-1，则status中对应下标-3</li><li>若0向下移动X[i]=1，则status中对应下标+3</li><li>若0向左移动Y[i]=-1,则status中对应下标-1</li><li>若0向右移动Y[i]=1,则status中对应下标+1</li></ul></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="keyword">int</span> x, y, <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            node temp;</span><br><span class="line">            temp.x = Node.x + X[i];</span><br><span class="line">            temp.y = Node.y + Y[i];</span><br><span class="line">            <span class="keyword">if</span> (temp.x &lt; <span class="number">0</span> || temp.x &gt; <span class="number">2</span> || temp.y &lt; <span class="number">0</span> || temp.y &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 得到新的序列</span></span><br><span class="line">            temp.status = Node.status;</span><br><span class="line">            <span class="keyword">int</span> pos_0 = <span class="number">3</span> * Node.x + Node.y;</span><br><span class="line">            <span class="keyword">if</span> (X[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">3</span>]);</span><br><span class="line">                pos_0 += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (X[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">3</span>]);</span><br><span class="line">                pos_0 -= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Y[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Y[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!hashtable[temp.status]) &#123;</span><br><span class="line">                temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                hashtable[temp.status] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            S.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) S.x = i, S.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            T.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) T.x = i, T.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, BFS());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="D-【宽搜入门】魔板"><a href="#D-【宽搜入门】魔板" class="headerlink" title="D 【宽搜入门】魔板"></a>D 【宽搜入门】魔板</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" data-fancybox="group" data-caption="image-20200825020323065" class="fancybox"><img alt="image-20200825020323065" style="zoom:50%;" title="image-20200825020323065" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" class="lazyload"></a><h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>与C题差不多，都需要记录每次的总体数字状态（异曲同工的感觉🙃）</p><p>⚠️ 这道题中，魔板每次都能进行A、B、C三种操作，要判断魔板的状态是否重复。</p><ol><li>因为最后要求输出具体的操作，所以使用string记录每次操作，为了记录每次魔板状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</li><li>❗️开始状态总是 1 2 3 4 5 6 7 8（是顺时针取的数），最终要达到输入的状态。</li><li>当心每次A、B、C操作的状态转换：</li></ol><ul><li>🌰 从基本状态 1 2 3 4 5 6 7 8作A转换 -》8 7 6 5 4 3 2 1<ul><li>🌰 从基本状态 1 2 3 <u>4 5</u> 6 7 8作B转换 -》<u>4</u> 1 2 3 6 7 8 <u>5</u></li></ul></li><li>🌰 从基本状态 1 <u>2 3</u> 4 5 <u>6 7</u> 8作C转换 -》1 <u>7 2</u> 4 5 <u>3 6</u> 8</li></ul><ol start="4"><li>❗️题目要求输出除最后一行外，每行输出60个字符</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 王怡静 on 2020/8/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop()</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Node.<span class="built_in">step</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Node.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; Node.op[i<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">60</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作A——交换上下两行</span></span><br><span class="line">        node temp1 = node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            temp1.status.push_back(Node.status[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp1.status]) &#123;</span><br><span class="line">            temp1.op = Node.op + <span class="string">"A"</span>;</span><br><span class="line">            temp1.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp1.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作B——将最右边的一列插入最左边</span></span><br><span class="line">        node temp2 = node();</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">8</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp2.status]) &#123;</span><br><span class="line">            temp2.op = Node.op + <span class="string">"B"</span>;</span><br><span class="line">            temp2.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp2.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作C——魔板中央四格作顺时针旋转</span></span><br><span class="line">        node temp3 = node();</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">0</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">6</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">1</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">2</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">5</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">7</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp3.status]) &#123;</span><br><span class="line">            temp3.op = Node.op + <span class="string">"C"</span>;</span><br><span class="line">            temp3.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp3.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) S.status.push_back(i);</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        T.status.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    BFS();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="E-【宽搜入门】巧妙取量"><a href="#E-【宽搜入门】巧妙取量" class="headerlink" title="E 【宽搜入门】巧妙取量"></a>E 【宽搜入门】巧妙取量</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" data-fancybox="group" data-caption="image-20200825021349019" class="fancybox"><img alt="image-20200825021349019" style="zoom:50%;" title="image-20200825021349019" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" class="lazyload"></a><h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实和A题倒水性质是一样的，区别在于，这道题一开始的水量是满杯A的水，没有无限的水给你装。最后判断三个杯子中一个是要求的K水量就可以。<br>所以操作就6种：A倒B、A倒C、B倒A、B倒C、C倒A、C倒B。</p><ol><li><p>BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b、c，因为最后只需要输出最少的步骤，所以再存一下step就可以</p></li><li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b、c的状态是否重复入队</p></li><li><p>根据BFS模板写代码，S表示初始状态，杯中水量a为容量ca，b和c都为0。S入队。</p><ul><li>while循环中每次取出队首元素，判断Node.a==k || Node.b==k|| Node.c==k 若是则return Node.step</li><li>否则，判断当前a、b、c容量下能进行什么操作，将对应的元素加入队列</li></ul></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ca, cb, cc, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> <span class="built_in">step</span>) : a(a), b(b), c(c), <span class="built_in">step</span>(<span class="built_in">step</span>) &#123;&#125;</span><br><span class="line">&#125; S, Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    q.push(S);</span><br><span class="line">    inq[S.a][S.b][S.c] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(Node.a==k || Node.b==k|| Node.c==k) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="comment">// A-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cb - Node.b)][cb][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cb - Node.b), cb, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cb - Node.b)][cb][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.a + Node.b][Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.a + Node.b, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.a + Node.b][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cc - Node.c)][Node.b][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cc - Node.c), Node.b, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cc - Node.c)][Node.b][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.b][Node.a + Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.b, Node.a + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.b][Node.a + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b - (ca - Node.a)][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b - (ca - Node.a), Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b - (ca - Node.a)][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.b][<span class="number">0</span>][Node.c]) &#123;</span><br><span class="line">            node temp(Node.a + Node.b, <span class="number">0</span>, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.b][<span class="number">0</span>][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][Node.b - cc + Node.c][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, Node.b - cc + Node.c, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][Node.b - cc + Node.c][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][<span class="number">0</span>][Node.b + Node.c]) &#123;</span><br><span class="line">            node temp(Node.a, <span class="number">0</span>, Node.b + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][<span class="number">0</span>][Node.b + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b][Node.c - ca + Node.a]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b, Node.c - ca + Node.a, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b][Node.c - ca + Node.a] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.c][Node.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a + Node.c, Node.b, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.c][Node.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][cb][Node.c - cb + Node.b]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, cb, Node.c - cb + Node.b, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][cb][Node.c - cb + Node.b] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][Node.b + Node.c][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a, Node.b + Node.c, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][Node.b + Node.c][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;ca, &amp;cb, &amp;cc, &amp;k) != EOF) &#123;</span><br><span class="line">        S.a = ca, S.b = <span class="number">0</span>, S.c = <span class="number">0</span>, S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=BFS();</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n%d\n"</span>,ans);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 8.2BFS
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>9.2 二叉树的遍历</title>
    <link href="https://angelia-wang.github.io/2020/08/03/9.2%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://angelia-wang.github.io/2020/08/03/9.2%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2020-08-03T13:47:25.000Z</published>
    <updated>2020-10-15T13:50:11.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-2-二叉树的遍历"><a href="#9-2-二叉树的遍历" class="headerlink" title="9.2 二叉树的遍历"></a>9.2 二叉树的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000611" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000611</a></p><h2 id="D-二叉树遍历"><a href="#D-二叉树遍历" class="headerlink" title="D 二叉树遍历"></a>D 二叉树遍历</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825230447016.png" data-fancybox="group" data-caption="image-20200825230447016" class="fancybox"><img alt="image-20200825230447016" style="zoom:50%;" title="image-20200825230447016" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825230447016.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️这道题之所以能用先序遍历就能构造树，是因为把空结点用#表示出来了</p><p>❗️仔细观察create函数，这里char c = pre[i++]; 然后根据c的值看要不要给root赋值。<br>(根据先序遍历的顺序，根结点-》左子树-》右子树)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">string</span> pre, in;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = pre[i++];</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'#'</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    node *root = <span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data = c;</span><br><span class="line">    root-&gt;lchild = create();</span><br><span class="line">    root-&gt;rchild = create();</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    in += root-&gt;data;</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; pre) &#123;</span><br><span class="line">        in = <span class="string">""</span>;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        inOrder(create());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; in.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, in[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 9.2二叉树的遍历
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>6.9 algorithm头文件下常用函数介绍</title>
    <link href="https://angelia-wang.github.io/2020/08/02/6.9%20algorithm/"/>
    <id>https://angelia-wang.github.io/2020/08/02/6.9%20algorithm/</id>
    <published>2020-08-02T07:47:25.000Z</published>
    <updated>2020-08-03T14:10:03.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-9-algorithm头文件下常用函数介绍"><a href="#6-9-algorithm头文件下常用函数介绍" class="headerlink" title="6.9 algorithm头文件下常用函数介绍"></a>6.9 algorithm头文件下常用函数介绍</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000604" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000604</a></p><h2 id="B-全排列"><a href="#B-全排列" class="headerlink" title="B  全排列"></a>B  全排列</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️next_permutation不能对string使用，可对char使用</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> (gets(a)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(a, a + <span class="built_in">strlen</span>(a)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 6.9algorithm头文件下常用函数介绍
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>6.5 queue的常见用法详解</title>
    <link href="https://angelia-wang.github.io/2020/08/01/6.5%20queue/"/>
    <id>https://angelia-wang.github.io/2020/08/01/6.5%20queue/</id>
    <published>2020-08-01T07:52:25.000Z</published>
    <updated>2020-08-01T10:20:12.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-5-queue的常见用法详解"><a href="#6-5-queue的常见用法详解" class="headerlink" title="6.5 queue的常见用法详解"></a>6.5 queue的常见用法详解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000600" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000600</a></p><h2 id="A-C语言-数字交换"><a href="#A-C语言-数字交换" class="headerlink" title="A  C语言-数字交换"></a>A  C语言-数字交换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" data-fancybox="group" data-caption="image-20200801180500941" class="fancybox"><img alt="image-20200801180500941" style="zoom:50%;" title="image-20200801180500941" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" class="lazyload"></a><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就需要注意一点⚠️</p><p>有的数字可能要交换两次：如 9 3 4 5 6 2 2 2 2 7</p><p>最小数为2，所以若先把最小的和第一个数交换，即2和9交换，则2 3 4 5 6 9 2 2 2 7</p><p>最大数位9，把最大的和最后一个数交换，即9和7交换，则2 3 4 5 6 7 2 2 2 9</p><p>则9交换了两次</p><p><strong><u>所以每交换一次需要重新计算最大值/最小值；</u></strong></p><p>若按照错误的代码来，直接一次记录最大最小值9和2的序号为0、5，然后最小数序号5和第一个数换，为2 3 4 5 6 9 2 2 2 7，最大数序号0和最后一个数换，为7 3 4 5 6 9 2 2 2 2，就不对了 🤦‍♀️</p><h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      算法笔记配套习题CodeUp题解 6.5queue的常见用法详解
    
    </summary>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法笔记" scheme="https://angelia-wang.github.io/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
