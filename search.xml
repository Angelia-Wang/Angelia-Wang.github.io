<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10.4 最短路径</title>
    <url>/2020/08/28/10.4%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="10-4-最短路径"><a href="#10-4-最短路径" class="headerlink" title="10.4 最短路径"></a>10.4 最短路径</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000621" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000621</a></p>
<h2 id="C-最短路径"><a href="#C-最短路径" class="headerlink" title="C 最短路径"></a>C 最短路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830163030532.png" data-fancybox="group" data-caption="image-20200830163030532" class="fancybox"><img alt="image-20200830163030532" style="zoom:50%;" title="image-20200830163030532" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830163030532.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>❗️这道题有个大坑，一开始用Dijkstra做WA了，每条路的长度（权重）是2^K，K∈[0, 500]，所以肯定不能直接存的，会爆int，所以这里用了快速幂求解。但问题就是存的长度是MOD 100000 之后的值，就根本没办法简单比较大小。</p>
<p>看了网上的题解，不用Dijsktra，关键在于只要前面输入的点之间是连通的，这些路径就是最短路径<br>因为2^0 + 2^1 + …… + 2^(k-1) = 2^k-1 &lt; 2^k，证明前面若连通，即使是所有路径长度相加都比下一条路径短</p>
<p>所以这道题用<code>并查集</code>做，只需根据尽可能早出现的两点（越早输入则两点间距离越短），生成的连通集合间各点距离越短【据说是<code>最小生成树</code>题】：<br>1️⃣ 使用dis[][]数组记录两点之间的最短距离（⚠️ 根据题目，dis[i][i]=0别忘了）<br>2️⃣ 按题目要求读入两点a，b，若a,b是不连通的（即父结点不是一个），就要计算之间距离d，将它们合并为一个集合，则需通过这条边，更新所有a、b集合内的点之间的距离；若a，b是连通的（即父结点是一个）就不用管这条路了，因为此集合中各点之间的距离肯定比算上这条边要短。<br>🔴 其实这样算出了所有点到其他点的最短距离【全源最短路】，但最后只需要起点0到其他点的最短路，故最后遍历输出d[0][i]</p>
<h3 id="代码（Dijkstra——WA）"><a href="#代码（Dijkstra——WA）" class="headerlink" title="代码（Dijkstra——WA）"></a>代码（Dijkstra——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> a * binaryPow(a, b - <span class="number">1</span>, m) % m;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = binaryPow(a, b / <span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">return</span> temp * <span class="number">2</span> % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">//循环n次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;  <span class="comment">//找到一个没被标记且与起点s最小距离最小的点</span></span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp;G[u][v]!=INF &amp;&amp; d[u] + G[u][v] &lt; d[v]) &#123; <span class="comment">//V-S中的v且u可达</span></span><br><span class="line">                d[v] = d[u] + G[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, w;</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        w = binaryPow(<span class="number">2</span>, i, <span class="number">100000</span>);</span><br><span class="line">        G[a][b] = w;</span><br><span class="line">        G[b][a] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        G[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i] == INF) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（并查集——AC）"><a href="#代码（并查集——AC）" class="headerlink" title="代码（并查集——AC）"></a>代码（并查集——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n, dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a, LL b, LL m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span> ==<span class="number">1</span>) <span class="keyword">return</span> a * binaryPow(a, b - <span class="number">1</span>, m) % m;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        LL temp = binaryPow(a, b / <span class="number">2</span>, m);  <span class="comment">///！！！ 是LL</span></span><br><span class="line">        <span class="keyword">return</span> temp * temp % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dis[i][i] = <span class="number">0</span>;</span><br><span class="line">            father[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">int</span> x = findFather(a);</span><br><span class="line">            <span class="keyword">int</span> y = findFather(b);</span><br><span class="line">            <span class="keyword">if</span> (x != y) &#123; <span class="comment">//若这条路径的两个顶点在同一集合中，则不需要更新，因为距离是越来越大的 1+2^1+······+2^(k-1)=2^k-1 &lt; 2^k</span></span><br><span class="line">                <span class="comment">//更新距离，合并二者</span></span><br><span class="line">                d = binaryPow(<span class="number">2</span>, i, <span class="number">100000</span>);</span><br><span class="line">                <span class="comment">// 通过新联系a至b, 更新两个集合中各点之间的最短距离</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (findFather(u) == x) &#123; <span class="comment">//找到以 x 为根节点的集合上所有点</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (findFather(v) == y) &#123; <span class="comment">//找到以 y 为根节点的集合上所有点</span></span><br><span class="line">                                dis[u][v] = dis[v][u] = (dis[u][a] + d + dis[b][v]) % <span class="number">100000</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//合并这两个集合</span></span><br><span class="line">                father[y] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[<span class="number">0</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-最短路径"><a href="#D-最短路径" class="headerlink" title="D 最短路径"></a>D 最短路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165134053.png" data-fancybox="group" data-caption="image-20200830165134053" class="fancybox"><img alt="image-20200830165134053" style="zoom:50%;" title="image-20200830165134053" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165134053.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这里都采用了Dijsktra+DFS的做法，⚠️ 需注意的是要输出字典序最小的那条，因为使用vector记录tempPath与path，所以可以直接用比较符进行比较，但是二者中点都是倒序的，最后也是倒序输出，所以若要字典序最小，则tempPath &gt; path。</p>
<p>一开始用邻接矩阵做，一直错误50，不知道为啥，网上有博主说这道题会出现重复的边，所以要用邻接表做。用邻接表确实AC了，但是最后在邻接矩阵代码中加入判断 if (w &lt; G[a][b]) G[a][b] = G[b][a] = w; 让可能出现的重复边权重一直保持最小的，还是WA，不知道为啥了🙃</p>
<p>这里用邻接表做，想特别提醒下❗️一定要特别注意题目中各点是从0开始，还是从1开始，因为vector中push_back后遍历都是从0开始，一开始在👇这里WA了半天没看出来，当初写得</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v=Adj[u][j].v; <span class="comment">///注意顶点v是从1开始，但是对应的Adj中的点是j=0开始</span></span><br><span class="line">    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[u] + Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">            d[v] = d[u] + Adj[u][j].dis;</span><br><span class="line">            pre[v].<span class="built_in">clear</span>();</span><br><span class="line">            pre[v].push_back(u);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + Adj[u][j].dis == d[v]) &#123;</span><br><span class="line">            pre[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; Adj[u].<span class="built_in">size</span>(); v++)&#123; </span><br><span class="line">    <span class="keyword">if</span> (!vis[Adj[u][v].v])&#123;</span><br><span class="line">        <span class="keyword">if</span> (d[u] + Adj[u][v].dis &lt; d[v])&#123; <span class="comment">//这里d[v]错了，应该是d[Adj[u][v].v]</span></span><br><span class="line">            ……</span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（邻接矩阵——WA）"><a href="#代码（邻接矩阵——WA）" class="headerlink" title="代码（邻接矩阵——WA）"></a>代码（邻接矩阵——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, m, st, ed;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[maxn];<span class="comment">//存放每个结点的所有前驱结点</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; tempPath;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//循环n次</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; G[u][v] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">                    d[v] = d[u] + G[u][v];</span><br><span class="line">                    pre[v].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + G[u][v] == d[v]) &#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起点s，从后往前遍历到顶点u</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == s) &#123;</span><br><span class="line">        tempPath.push_back(s);</span><br><span class="line">        <span class="keyword">if</span> (tempPath &gt; path || path.empty()) path = tempPath; <span class="comment">// 要得到字典序最小的，则要tempPath &gt; path,因为path中是倒序的</span></span><br><span class="line">        tempPath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.push_back(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        DFS(s, pre[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed) != EOF) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i].<span class="built_in">clear</span>();</span><br><span class="line">        tempPath.<span class="built_in">clear</span>();</span><br><span class="line">        path.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (w &lt; G[a][b]) G[a][b] = G[b][a] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(st);</span><br><span class="line">        <span class="keyword">if</span> (d[ed] == INF) <span class="built_in">printf</span>(<span class="string">"can't arrive\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            DFS(st, ed);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[ed]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">//倒着输出</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（邻接表——AC）"><a href="#代码（邻接表——AC）" class="headerlink" title="代码（邻接表——AC）"></a>代码（邻接表——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, st, ed;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dis) : v(_v), dis(_dis) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempPath;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v=Adj[u][j].v; <span class="comment">///注意顶点v是从1开始，但是对应的Adj中的点是j=0开始</span></span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">                    d[v] = d[u] + Adj[u][j].dis;</span><br><span class="line">                    pre[v].<span class="built_in">clear</span>();</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + Adj[u][j].dis == d[v]) &#123;</span><br><span class="line">                    pre[v].push_back(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == u) &#123;</span><br><span class="line">        tempPath.push_back(s);</span><br><span class="line">        <span class="keyword">if</span> (tempPath &gt; path || path.empty()) path = tempPath;</span><br><span class="line">        tempPath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.push_back(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        DFS(s, pre[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    tempPath.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;st, &amp;ed) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">            pre[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        tempPath.<span class="built_in">clear</span>();</span><br><span class="line">        path.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">            Adj[a].push_back(node(b, w));</span><br><span class="line">            Adj[b].push_back(node(a, w));</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(st);</span><br><span class="line">        <span class="keyword">if</span> (d[ed] == INF) <span class="built_in">printf</span>(<span class="string">"can't arrive\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[ed]);</span><br><span class="line">            DFS(st, ed);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-最短路径问题"><a href="#E-最短路径问题" class="headerlink" title="E 最短路径问题"></a>E 最短路径问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165837960.png" data-fancybox="group" data-caption="image-20200830165837960" class="fancybox"><img alt="image-20200830165837960" style="zoom:50%;" title="image-20200830165837960" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830165837960.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题还是很常规的，用Dijkstra做出来没啥问题。看了提示后尝试直接用DFS做，也AC了。</p>
<h3 id="代码（Dijkstra）"><a href="#代码（Dijkstra）" class="headerlink" title="代码（Dijkstra）"></a>代码（Dijkstra）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn], c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    <span class="built_in">fill</span>(c, c + maxn, INF);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    c[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[u][j] != INF) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[u] + dis[u][j] &lt; d[j]) &#123;</span><br><span class="line">                    d[j] = d[u] + dis[u][j];</span><br><span class="line">                    c[j] = c[u] + cost[u][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + dis[u][j] == d[j] &amp;&amp; c[u] + cost[u][j] &lt; c[j]) &#123;</span><br><span class="line">                    c[j] = c[u] + cost[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, dd, p, s, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n &amp;&amp; m) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;dd, &amp;p);</span><br><span class="line">            dis[a][b] = dis[b][a] = dd;</span><br><span class="line">            cost[a][b] = cost[b][a] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">        Dijkstra(s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, d[t], c[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（DFS）"><a href="#代码（DFS）" class="headerlink" title="代码（DFS）"></a>代码（DFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, s, t;</span><br><span class="line"><span class="keyword">int</span> ansD, ansP;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前遍历到点u</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> totalD, <span class="keyword">int</span> totalP)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (totalD &gt; ansD || (totalD == ansD &amp;&amp; totalP &gt; ansP)) <span class="keyword">return</span>; <span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">        ansD = totalD;</span><br><span class="line">        ansP = totalP;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; dis[u][i] != INF) &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            DFS(i, totalD + dis[u][i], totalP + cost[u][i]);</span><br><span class="line">            vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b, d, p;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n &amp;&amp; m) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis[<span class="number">0</span>], dis[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(cost[<span class="number">0</span>], cost[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="literal">false</span>);</span><br><span class="line">        ansD = INF, ansP = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;d, &amp;p);</span><br><span class="line">            dis[a][b] = dis[b][a] = d;</span><br><span class="line">            cost[a][b] = cost[b][a] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">        vis[s] = <span class="literal">true</span>;</span><br><span class="line">        DFS(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ansD, ansP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>10.3 图的遍历</title>
    <url>/2020/08/28/10.3%20%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="10-3-图的遍历"><a href="#10-3-图的遍历" class="headerlink" title="10.3 图的遍历"></a>10.3 图的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000620" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000620</a></p>
<h2 id="B-连通图"><a href="#B-连通图" class="headerlink" title="B 连通图"></a>B 连通图</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200828205154636.png" data-fancybox="group" data-caption="image-20200828205154636" class="fancybox"><img alt="image-20200828205154636" style="zoom:50%;" title="image-20200828205154636" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200828205154636.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>倾向于用邻接表做所有的图题目，因为邻接图要求顶点数目不超过1000，否则内存超限</p>
<p>这道题就是遍历整个图，一次DFS/BFS能完成一个连通子图的遍历，BFS/DFS的次数就是图含有连通子图的个数</p>
<p>⚠️注意DFS/BFS代码的写法<br>DFS中用vis数组表示结点是否已访问；BFS中用inq数组表示结点是否入过队，且在push结点temp时要设置inq[temp]=true，而DFS中在往下遍历DFS(v)时不用设置vis[v]=true，因为每次DFS开头都会设置vis[u] = true</p>
<p>PS:我觉得这道题也可以用并查集做</p>
<h3 id="代码（DFS）"><a href="#代码（DFS）" class="headerlink" title="代码（DFS）"></a>代码（DFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            DFS(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; u++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[u]) &#123;</span><br><span class="line">            DFS(u);</span><br><span class="line">            time++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (time==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            Adj[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        DFSTrave();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（BFS）"><a href="#代码（BFS）" class="headerlink" title="代码（BFS）"></a>代码（BFS）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u);</span><br><span class="line">    inq[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Adj[v][i];</span><br><span class="line">            <span class="keyword">if</span> (!inq[temp]) &#123;</span><br><span class="line">                inq[temp] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);  <span class="comment">// 注意！！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTrave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inq[i]) &#123;</span><br><span class="line">            BFS(i);</span><br><span class="line">            time++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            Adj[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        BFSTrave();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>10.5 最小生成树</title>
    <url>/2020/08/28/10.5%20%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h1 id="10-5-最小生成树"><a href="#10-5-最小生成树" class="headerlink" title="10.5 最小生成树"></a>10.5 最小生成树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000622" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000622</a></p>
<h2 id="A-还是畅通工程"><a href="#A-还是畅通工程" class="headerlink" title="A 还是畅通工程"></a>A 还是畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830214304256.png" data-fancybox="group" data-caption="image-20200830214304256" class="fancybox"><img alt="image-20200830214304256" style="zoom:50%;" title="image-20200830214304256" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830214304256.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>没啥可说的，常规题。</p>
<p>Prime算法适合稠密图，邻接矩阵O(V2);邻接表O(V2+E)，采取堆优化【用priority_queue】能降低到O(VlogV+E)<br>Kruskal算法适合稀疏图，O(ElogE)，其中logE用于对边的排序<br>（V为定点数，E为边数）<br>🙈感觉Kruskal更好的样子，之后最小生成树的题也都用Kruskal做了</p>
<p>⚠️ 使用Prime时要注意默认点是0还是1，有的题目点从1开始计的，如果代码还是默认0就会错误<br>（当然你默认1、2、3也可以😂反正要在n以内）</p>
<h3 id="代码（Prime）"><a href="#代码（Prime）" class="headerlink" title="代码（Prime）"></a>代码（Prime）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, dis;</span><br><span class="line">    node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dis) : v(_v), dis(_dis) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];<span class="comment">//各点到集合S的距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d, d + maxn, INF);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//默认从顶点1开始</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, MIN = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        ans += d[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][j].v;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; Adj[u][j].dis &lt; d[v]) &#123;</span><br><span class="line">                d[v] = Adj[u][j].dis;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, dd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Adj[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">fill</span>(vis, vis + maxn, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * (n - <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;dd);</span><br><span class="line">            Adj[a].push_back(node(b, dd));</span><br><span class="line">            Adj[b].push_back(node(a, dd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = prime();</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（Kruskal）"><a href="#代码（Kruskal）" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, num_edge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            num_edge++;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            <span class="keyword">if</span> (num_edge == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num_edge != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, dd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].dis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-Freckles"><a href="#B-Freckles" class="headerlink" title="B Freckles"></a>B Freckles</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830215407000.png" data-fancybox="group" data-caption="image-20200830215407000" class="fancybox"><img alt="image-20200830215407000" style="zoom:50%;" title="image-20200830215407000" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830215407000.png" class="lazyload"></a>

<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>英文水平不行，没具体看题目内容，大概意思就是：<br>第一行输入n，表示有n个结点。下面n行为第i个结点的x、y坐标<br>求把这些点连接起来的最小边权，就是求最小生成树</p>
<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题之所以放上来，是因为之前的题目两点间距离都直接告诉我们的，这里需要自己根据sqrt((x1-x2)^2^+(y1-y2)^2^)算<br>哎呦~有点意思🙃</p>
<p>PS：这题中每两个点都能构成一条边，即边有 $C^2_n=\frac{n(n-1)}{2}$ 条，所以边很多，用了Kruskal</p>
<h3 id="代码（Kruskal）-1"><a href="#代码（Kruskal）-1" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">location</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">&#125; V[maxV];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点数，边数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> edge_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            edge_num++;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;V[i].x, &amp;V[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                E[m].v = i;</span><br><span class="line">                E[m].u = j;</span><br><span class="line">                E[m].dis = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(V[i].x - V[j].x, <span class="number">2</span>) + <span class="built_in">pow</span>(V[i].y - V[j].y, <span class="number">2</span>));</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-继续畅通工程"><a href="#D-继续畅通工程" class="headerlink" title="D 继续畅通工程"></a>D 继续畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830220210158.png" data-fancybox="group" data-caption="image-20200830220210158" class="fancybox"><img alt="image-20200830220210158" style="zoom:50%;" title="image-20200830220210158" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830220210158.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题和A题区别在于有些路径已经建好了，所以在求最小生成树的时候，这条边算edge_num（edge_num==n-1时已形成最小生成树），但是所求的边权中不用加这条边。</p>
<h3 id="代码（Kruskal）-2"><a href="#代码（Kruskal）-2" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 5000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"><span class="keyword">int</span> edge_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            edge_num++;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        edge_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].dis, &amp;temp);</span><br><span class="line">            <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">                <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">                <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">                <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">                    father[faU] = faV;</span><br><span class="line">                    edge_num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=kruskal(n,m);</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-Jungle-Roads"><a href="#E-Jungle-Roads" class="headerlink" title="E Jungle Roads"></a>E Jungle Roads</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830221511244.png" data-fancybox="group" data-caption="image-20200830221511244" class="fancybox"><img alt="image-20200830221511244" style="zoom:50%;" title="image-20200830221511244" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200830221511244.png" class="lazyload"></a>

<h3 id="题目释义-1"><a href="#题目释义-1" class="headerlink" title="题目释义"></a>题目释义</h3><p>大概意思就是：各个村庄由路相连，以前有很多路，但是需要很多钱维护，否则路会被森林覆盖，现在决定要在保证各个村庄都能到达的情况下使道路维护费用最少。给出各条公路的情况，请输出最少的维护费用。<br>各条道路用26个大写字母命名，总共不超过75条道路。</p>
<p>第一行输入n表示村庄的数目，后面n-1行依次是各村庄的情况（固定按照26个字母排下来，最后一个村庄不输入）<br>每行以村庄名开头，后跟次村庄的道路数k，若k&gt;0，后面跟此道路通向的村庄名称和维护费用</p>
<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>觉得这道题输入挺新颖，就放上来了，没啥坑感觉</p>
<p>💡这里为了方便，没有按照题目的用字母作为结点的标识，统一将字母-65存int，这样father[]也方便<br>否则father就要用map&lt;char,char&gt;了；当然father[]直接用65~91也可以，就是觉得有点浪费🙃</p>
<h3 id="代码（Kruskal）-3"><a href="#代码（Kruskal）-3" class="headerlink" title="代码（Kruskal）"></a>代码（Kruskal）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxE 80</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">&#125; E[maxE];</span><br><span class="line"><span class="keyword">int</span> father[maxV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, edge_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) father[i] = i;</span><br><span class="line">    sort(E, E + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> faU = findFather(E[i].u);</span><br><span class="line">        <span class="keyword">int</span> faV = findFather(E[i].v);</span><br><span class="line">        <span class="keyword">if</span> (faU != faV) &#123;</span><br><span class="line">            father[faU] = faV;</span><br><span class="line">            ans += E[i].dis;</span><br><span class="line">            edge_num++;</span><br><span class="line">            <span class="keyword">if</span> (edge_num == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge_num != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, d;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; k;</span><br><span class="line">            <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; b &gt;&gt; d;</span><br><span class="line">                E[m].v = a - <span class="number">65</span>;</span><br><span class="line">                E[m].u = b - <span class="number">65</span>;</span><br><span class="line">                E[m].dis = d;</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = kruskal(n, m);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>10.6 拓扑排序</title>
    <url>/2020/08/28/10.6%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="10-6-拓扑排序"><a href="#10-6-拓扑排序" class="headerlink" title="10.6 拓扑排序"></a>10.6 拓扑排序</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000623" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000623</a></p>
<p><strong>==拓扑排序的重要应用——判断一个给定的图是否是 <u>有向无环</u> 图==</strong></p>
<h2 id="A-算法7-12：有向无环图的拓扑排序"><a href="#A-算法7-12：有向无环图的拓扑排序" class="headerlink" title="A 算法7-12：有向无环图的拓扑排序"></a>A 算法7-12：有向无环图的拓扑排序</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831032509984.png" data-fancybox="group" data-caption="image-20200831032509984" class="fancybox"><img alt="image-20200831032509984" style="zoom:50%;" title="image-20200831032509984" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831032509984.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题也没啥好说的，就是注意一点：<br>⚠️ 用queue结果WA了，样例结果是0 3 1 2，题目中说“请按照题目描述中的算法依次输出图的拓扑有序序列”，题中用的是stack，所以将queue改为stack后AC，样例结果3 0 1 2<br>这两个答案其实都是正确的拓扑序列，只是因为queue是先进先出，stack是后进先出，所以顺序输出的不一样。而这里要按照题目要求使用stack。<br>（🙃 所以要看清楚题目的要求）</p>
<p>另，这道题用了 vector&lt;int&gt; ans 存储最后的拓扑系列</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 55</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, inDegree[maxV] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) s.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        num++; <span class="comment">//加入拓扑排序的顶点数+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) s.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        Adj[u].<span class="built_in">clear</span>();<span class="comment">//清除u的所有出度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">1</span>) &#123;</span><br><span class="line">                Adj[i].push_back(j); <span class="comment">//出度</span></span><br><span class="line">                inDegree[j]++; <span class="comment">//入度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (topologicalSort()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-确定比赛名次"><a href="#B-确定比赛名次" class="headerlink" title="B 确定比赛名次"></a>B 确定比赛名次</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831033040148.png" data-fancybox="group" data-caption="image-20200831033040148" class="fancybox"><img alt="image-20200831033040148" style="zoom:50%;" title="image-20200831033040148" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831033040148.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题也是常规拓扑排序题目，没啥难的。就是题目要求“符合条件的排名不唯一时，输出编号小的队伍在前”，所以用了priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</p>
<p>还有就是，注意题目中编号从1开始</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 505</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxV];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, inDegree[maxV] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//注意题目中从1开始 ！！！</span></span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Adj[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][i];</span><br><span class="line">            inDegree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        Adj[u].<span class="built_in">clear</span>();<span class="comment">//因为题目中保证输入的数据一定有符合要求的拓扑排序结果，所以Adj[i]中肯定都能清空，下一组输入用例前就不用循环清空一遍了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n) &#123;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(inDegree, <span class="number">0</span>, <span class="keyword">sizeof</span>(inDegree));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Adj[a].push_back(b);</span><br><span class="line">            inDegree[b]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (topologicalSort()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; ans.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>10.7 关键路径</title>
    <url>/2020/08/28/10.7%20%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="10-7-关键路径"><a href="#10-7-关键路径" class="headerlink" title="10.7 关键路径"></a>10.7 关键路径</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p>
<h2 id="A-关键路径"><a href="#A-关键路径" class="headerlink" title="A 关键路径"></a>A 关键路径</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" data-fancybox="group" data-caption="image-20200901020549631" class="fancybox"><img alt="image-20200901020549631" style="zoom:50%;" title="image-20200901020549631" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题用了dp做，书p439页有讲解<br>PS：个人觉得这里输入给出的各顶点abcde没啥用，但有可能不是按照26个英文字母顺序给出的顶点<br>（我默认顶点是顺序给出的AC了）</p>
<p>用拓扑排序的代码可参考：<a href="https://blog.csdn.net/morizunzhu/article/details/96652800" target="_blank" rel="noopener">https://blog.csdn.net/morizunzhu/article/details/96652800</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn]; <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn]; <span class="comment">//dp[i]表示以i为起点的能得到的最长路径长度</span></span><br><span class="line"><span class="keyword">int</span> choose[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = DP(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; dp[i]) &#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choose[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (choose[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c,%c) "</span>, i + <span class="number">97</span>, choose[i] + <span class="number">97</span>);</span><br><span class="line">        i = choose[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(choose, choose + maxn, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">            G[a - <span class="number">97</span>][b - <span class="number">97</span>] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, k,tt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tt = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (tt &gt; ans) &#123;</span><br><span class="line">                ans = tt;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printPath(k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>11.1~11.6 动态规划</title>
    <url>/2020/08/28/11.1~11.6%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="11-1-11-6-动态规划"><a href="#11-1-11-6-动态规划" class="headerlink" title="11.1~11.6 动态规划"></a>11.1~11.6 动态规划</h1><h2 id="11-2-最大连续子序列"><a href="#11-2-最大连续子序列" class="headerlink" title="11.2 最大连续子序列"></a>11.2 最大连续子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000626" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000626</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" data-fancybox="group" data-caption="image-20200831224406405" class="fancybox"><img alt="image-20200831224406405" style="zoom:50%;" title="image-20200831224406405" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831224406405.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>因为要输出序列的首尾元素，所以定义了结构体</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s, t; <span class="comment">//对应a中的起点终点值</span></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; dp[maxn];<span class="comment">// dp[i]表示以i结尾的最大连续子序列和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>].s = dp[<span class="number">0</span>].t = dp[<span class="number">0</span>].sum = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= dp[i - <span class="number">1</span>].sum + a[i]) &#123;</span><br><span class="line">                dp[i].s = dp[i].t = dp[i].sum = a[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i].s = dp[i - <span class="number">1</span>].s;</span><br><span class="line">                dp[i].t = a[i];</span><br><span class="line">                dp[i].sum = dp[i - <span class="number">1</span>].sum + a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i].sum &gt; dp[index].sum) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index].sum &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>, a[<span class="number">0</span>], a[n - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, dp[index].sum, dp[index].s, dp[index].t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-3-最长上升（不下降）子序列-LIS"><a href="#11-3-最长上升（不下降）子序列-LIS" class="headerlink" title="11.3 最长上升（不下降）子序列 LIS"></a>11.3 最长上升（不下降）子序列 LIS</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" data-fancybox="group" data-caption="image-20200831230441357" class="fancybox"><img alt="image-20200831230441357" style="zoom:50%;" title="image-20200831230441357" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831230441357.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm没事哈好说的，纯粹模板题</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[maxn], dp[maxn]; <span class="comment">//dp[i]表示以a[i]结尾的最长上升子序列的长度</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= a[i]) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-4-最长公共子序列"><a href="#11-4-最长公共子序列" class="headerlink" title="11.4 最长公共子序列"></a>11.4 最长公共子序列</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000628" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000628</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" data-fancybox="group" data-caption="image-20200831232015842" class="fancybox"><img alt="image-20200831232015842" style="zoom:50%;" title="image-20200831232015842" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200831232015842.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>递归边界若是dp[i][0]=dp[0][j]=0，则字符串下标1开始。<br>此处用string记录字符串，故字符串下标从0开始，故用<br>dp[i + 1][j + 1]=dp[i][j] + 1（若a[i] = b[j]）<br>dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);（若a[i] != b[j]）</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i+1][j+1]表示a[i]和b[j]之前的最长公共子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a.length(); i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b.length(); i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[a.length()][b.length()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-5-最长回文字符串"><a href="#11-5-最长回文字符串" class="headerlink" title="11.5 最长回文字符串"></a>11.5 最长回文字符串</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000629" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000629</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" data-fancybox="group" data-caption="image-20200901002548365" class="fancybox"><img alt="image-20200901002548365" style="zoom:50%;" title="image-20200901002548365" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901002548365.png" class="lazyload"></a>

<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>将输入的字符串读入buf，将buf中的字母及数字存储到要进行回文比较的字符串s中（字母都转化成小写），为了最后能输对应的buf，用 p 数组记录 s 下标到 buf 下标的映射。</p>
<p>回文比较采用枚举回文串“中间”的i，然后不断向外扩张（书中的方法），此处要记录最长回文串长度以及起点在字符串s中的下标（都记录第一个&gt;max_len的值，因为题目中要求若有多个相同长度回文串，输出起始位置最靠左的，也就是 i 最小的）</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></span><br><span class="line"><span class="keyword">char</span> buf[maxn], s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn]; <span class="comment">//s下标到buf的映射</span></span><br><span class="line"><span class="keyword">bool</span> dp[maxn][maxn] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//dp[i][j]——s数组中下标i到j的字符串是否为回文字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gets(buf);</span><br><span class="line">    <span class="keyword">int</span> s_len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将buf中的字母变小写和数字一起放入s，建立s下标到buf的映射p</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buf); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalpha</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = <span class="built_in">tolower</span>(buf[i]);</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(buf[i])) &#123;</span><br><span class="line">            s[s_len] = buf[i];</span><br><span class="line">            p[s_len] = i;</span><br><span class="line">            s_len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_len = <span class="number">1</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; s_len - <span class="number">1</span> &amp;&amp; s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (max_len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                max_len = <span class="number">2</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">3</span>; L &lt;= s_len; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span> &lt; s_len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + L - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (max_len &lt; L) &#123;</span><br><span class="line">                    max_len = L;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p[start]; i &lt;= p[start + max_len - <span class="number">1</span>]; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="10-7-关键路径"><a href="#10-7-关键路径" class="headerlink" title="10.7 关键路径"></a>10.7 关键路径</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000627" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000627</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" data-fancybox="group" data-caption="image-20200901020549631" class="fancybox"><img alt="image-20200901020549631" style="zoom:50%;" title="image-20200901020549631" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901020549631.png" class="lazyload"></a>

<h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题用了dp做，书p439页有讲解<br>PS：个人觉得这里输入给出的各顶点abcde没啥用，但有可能不是按照26个英文字母顺序给出的顶点<br>（我默认顶点是顺序给出的AC了）</p>
<p>用拓扑排序的代码可参考：<a href="https://blog.csdn.net/morizunzhu/article/details/96652800" target="_blank" rel="noopener">https://blog.csdn.net/morizunzhu/article/details/96652800</a></p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn]; <span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn]; <span class="comment">//dp[i]表示以i为起点的能得到的最长路径长度</span></span><br><span class="line"><span class="keyword">int</span> choose[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = DP(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; dp[i]) &#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choose[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (choose[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%c,%c) "</span>, i + <span class="number">97</span>, choose[i] + <span class="number">97</span>);</span><br><span class="line">        i = choose[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(choose, choose + maxn, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">            G[a - <span class="number">97</span>][b - <span class="number">97</span>] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, k,tt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tt = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (tt &gt; ans) &#123;</span><br><span class="line">                ans = tt;</span><br><span class="line">                k=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printPath(k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-6-DAG-最长路-🌟"><a href="#11-6-DAG-最长路-🌟" class="headerlink" title="11.6 DAG 最长路 🌟"></a>11.6 DAG 最长路 🌟</h2><p><a href="http://codeup.hustoj.com/contest.php?cid=100000630" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000630</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" data-fancybox="group" data-caption="image-20200901023502064" class="fancybox"><img alt="image-20200901023502064" style="zoom:50%;" title="image-20200901023502064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901023502064.png" class="lazyload"></a>

<h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>将此问题是典型 DAG 最长路问题，需将每个矩形都看作一个顶点，并将嵌套关系视为顶点之间的有向边，边权为1。</p>
<p>1️⃣ 构造DAG图，便于使用DP求DAG的最长路 ——将每个矩形变为一个顶点，根据矩形间是否能嵌套，判断两个顶点间是否有有向边</p>
<ul>
<li>这里定义了结构体rect存储输入的矩形的宽，因为嵌套条件是a&lt;c,b&lt;d或者b&lt;c,a&lt;d，所以为了之后比较方便，统一将输入的更大的数作为长，另一个数作为宽</li>
<li>所有矩形数据输入完毕后，开始两两比较能否嵌套，默认每个矩形代表的顶点编号根据输入的顺序依次0~n-1，若能嵌套（r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w），则令顶点 i 与 j 之间有一条有向边（ G[i][j] = 1）</li>
</ul>
<p>2️⃣ 构造完 DAG图后，就是常规操作，使用DP计算最长路长度ans</p>
<p>3️⃣ 需注意的是，最后要输出的是能最多嵌套的矩形数目，⚠️ 所以输出ans+1</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, w;</span><br><span class="line">&#125; r[maxn];</span><br><span class="line"><span class="keyword">int</span> n, G[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G[i][j] != INF) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], DP(j) + G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(G[<span class="number">0</span>], G[<span class="number">0</span>] + maxn * maxn, INF);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= b) r[i].l = a, r[i].w = b;</span><br><span class="line">            <span class="keyword">else</span> r[i].l = b, r[i].w = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r[i].l &lt; r[j].l &amp;&amp; r[i].w &lt; r[j].w) &#123;</span><br><span class="line">                    G[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = DP(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>11.8 动态规划专题总结</title>
    <url>/2020/08/28/11.8%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="11-8-动态规划专题总结"><a href="#11-8-动态规划专题总结" class="headerlink" title="11.8 动态规划专题总结"></a>11.8 动态规划专题总结</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000632" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000632</a></p>
<h2 id="A-第二题-❓"><a href="#A-第二题-❓" class="headerlink" title="A 第二题 ❓"></a>A 第二题 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" data-fancybox="group" data-caption="image-20200903015140498" class="fancybox"><img alt="image-20200903015140498" style="zoom:50%;" title="image-20200903015140498" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903015140498.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>1️⃣ 做法一：使用DFS，搜索每一个最小于等于sum/2的子数组，并且找出其中和最接近sum/2的子数组。<br>一开始写得dfs代码👇<code>时间超时50</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (total &gt; sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (total == sum || index == n) &#123; <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt; sum1) sum1 = total;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum);</span><br></pre></td></tr></table></figure></div>

<p>后来剪枝优化的DFS代码👇但还是<code>时间超时50</code>🤣 _(:з」∠)_</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2️⃣ 做法二：使用DP，使用01背包的做法，寻找容量为sum/2的最优解<br>因为只有一个维度——元素大小，这相当于物品的重量，则将元素的大小也作为物品的价值<br>dp[v] = max(dp[v], dp[v - a[j]] + a[j])<br>但最后<code>运行错误50</code>，可能是内存超限，不清楚</p>
<p>🔵 最后在网上找到了一个DFS的AC代码，但觉得和我的差不多，不知道为啥我就超时<br><a href="https://blog.csdn.net/qq_41773202/article/details/104917949" target="_blank" rel="noopener">https://blog.csdn.net/qq_41773202/article/details/104917949</a></p>
<h3 id="代码（DFS——WA）"><a href="#代码（DFS——WA）" class="headerlink" title="代码（DFS——WA）"></a>代码（DFS——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, sum1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> total, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n) <span class="keyword">return</span>;</span><br><span class="line">    dfs(index + <span class="number">1</span>, total, sum); <span class="comment">//不选第index号物品</span></span><br><span class="line">    <span class="keyword">if</span> (total + a[index] &lt;= sum) &#123; <span class="comment">//加入index号物品，和不超过sum才继续</span></span><br><span class="line">        <span class="keyword">if</span> (total + a[index] &gt; sum1) &#123;</span><br><span class="line">            sum1 = total + a[index];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(index + <span class="number">1</span>, total + a[index], sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> temp, sum;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        n = <span class="number">0</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dfs(<span class="number">0</span>, <span class="number">0</span>, sum / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（DP——WA）"><a href="#代码（DP——WA）" class="headerlink" title="代码（DP——WA）"></a>代码（DP——WA）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxv];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n, temp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, sum1;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        n = <span class="number">1</span>, temp = <span class="number">0</span>, sum = <span class="number">0</span>, sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">'0'</span> &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                temp = temp * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">' '</span> || s[i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                a[n] = temp;</span><br><span class="line">                sum += temp;</span><br><span class="line">                n++;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= s.length()) <span class="built_in">printf</span>(<span class="string">"ERROR\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> v = sum / <span class="number">2</span>; v &gt;= a[j]; v--) &#123;</span><br><span class="line">                    dp[v] = <span class="built_in">max</span>(dp[v], dp[v - a[j]] + a[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum1 = dp[sum / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum2 = sum - sum1;</span><br><span class="line">            <span class="keyword">if</span> (sum1 &gt; sum2) <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, sum2, sum1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（网上的——AC）"><a href="#代码（网上的——AC）" class="headerlink" title="代码（网上的——AC）"></a>代码（网上的——AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> ans, <span class="keyword">int</span> half, <span class="keyword">int</span> num[], <span class="keyword">int</span> count, <span class="keyword">int</span> &amp;res)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index == count)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (ans + num[index] &lt;= half) &#123;</span><br><span class="line">		res = <span class="built_in">max</span>(res, ans + num[index]);<span class="comment">//res每次存小于等于half且最接近half的子数组和。</span></span><br><span class="line">		<span class="keyword">if</span> (res == half)<span class="comment">//等于half最优直接返回</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		dfs(index + <span class="number">1</span>, ans + num[index], half, num, count, res);<span class="comment">//如果选了第index个数，和还小于half继续dfs</span></span><br><span class="line">	&#125;</span><br><span class="line">	dfs(index + <span class="number">1</span>, ans, half, num, count, res);<span class="comment">//不选第index个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span> (getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line">		<span class="comment">//处理字符串，存入数组之中。</span></span><br><span class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>, number[<span class="number">1010</span>], count = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">				<span class="built_in">string</span> str = s.substr(pre, i - pre);</span><br><span class="line">				<span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line">					<span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">					sum += temp;</span><br><span class="line">					number[count++] = temp;</span><br><span class="line">					pre = i + <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">string</span> str = s.substr(pre, s.length() - pre);<span class="comment">//判断最后一个字符串</span></span><br><span class="line">		<span class="keyword">if</span> (judge(str)) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = stoi(str);</span><br><span class="line">			sum += temp;</span><br><span class="line">			number[count++] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//寻找最接近sum/2的子数组。</span></span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="keyword">int</span> half = sum / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">			dfs(<span class="number">0</span>, <span class="number">0</span>, half, number, count, res);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; sum - res &lt;&lt; <span class="string">" "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-拦截导弹"><a href="#B-拦截导弹" class="headerlink" title="B 拦截导弹"></a>B 拦截导弹</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" data-fancybox="group" data-caption="image-20200903020331886" class="fancybox"><img alt="image-20200903020331886" style="zoom:50%;" title="image-20200903020331886" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020331886.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>一开始没发现这道题是最长不上升子序列的DP题目，直接按照自己的想法做，自然WA了🙈，错误原因是认为能拦截的导弹是连续的，下一个导弹若不能拦截，则重新开始计数。最后统计最大值。</p>
<h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = a[<span class="number">0</span>], t_sum = <span class="number">1</span>, max_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= temp) &#123;</span><br><span class="line">                t_sum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum;</span><br><span class="line">                t_sum = <span class="number">1</span>; <span class="comment">//从当前这个比temp大的数算起</span></span><br><span class="line">            &#125;</span><br><span class="line">            temp = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t_sum &gt; max_sum) max_sum = t_sum; <span class="comment">//处理最后一个t_sum</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//是最长不上升子序列的问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[maxn], dp[maxn]; <span class="comment">//dp[i] 表示以a[i]结尾的最长不下降子序列长度</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt;= a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="C-合唱队形-🌟"><a href="#C-合唱队形-🌟" class="headerlink" title="C 合唱队形 🌟"></a>C 合唱队形 🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" data-fancybox="group" data-caption="image-20200903020748404" class="fancybox"><img alt="image-20200903020748404" style="zoom:50%;" title="image-20200903020748404" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903020748404.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>遍历输入的同学数组，计算每一个位置对应的最长上升子序列数目、最长下降子序列数目，假设二者和为temp，则每次对应要出列的学生数目= sum-temp+1</p>
<p>Why加一？<br>因为对Ti，计算[T1, Ti ]的最长上升子序列数目，计算[Ti, Tn]的最长下降子序列数目，Ti会被重复计算，所以sum-temp多减了一个Ti，要加回来。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [0, mid] 的最长上升子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mid; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求 [mid, n) 的最长下降子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fill</span>(dp, dp + maxn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mid; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[i] &amp;&amp; dp[i] &lt; dp[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            temp = increase(i) + decrease(i);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; sum) sum = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - sum + <span class="number">1</span>); <span class="comment">//因为中间的Ti被重复计算，所以要加上去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-Coincidence"><a href="#D-Coincidence" class="headerlink" title="D: Coincidence"></a>D: Coincidence</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" data-fancybox="group" data-caption="image-20200903021359064" class="fancybox"><img alt="image-20200903021359064" style="zoom:50%;" title="image-20200903021359064" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021359064.png" class="lazyload"></a>

<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准最长上升子序列问题</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最长公共子序列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">//dp[i][j]表示a的前i个字符与b的前j个字符的最长公共子序列的长度</span></span><br><span class="line">    <span class="keyword">while</span> (gets(a + <span class="number">1</span>) &amp;&amp; gets(b + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena; i++) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lenb; i++) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lena; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[lena][lenb]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-最大子矩阵-🌟🌟"><a href="#E-最大子矩阵-🌟🌟" class="headerlink" title="E 最大子矩阵 🌟🌟"></a>E 最大子矩阵 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" data-fancybox="group" data-caption="image-20200903021547619" class="fancybox"><img alt="image-20200903021547619" style="zoom:50%;" title="image-20200903021547619" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903021547619.png" class="lazyload"></a>

<h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是一个二维的最大连续子序列和问题【完全没想到orz】，需降至一维进行求解<br>对于确定的从第 A 行到 第 B 行，将同一列的数相加，最终得到一个一维的数序列，对于这个数序列求最大连续子序列即可🙈</p>
<p>状态转移方程为：dp[i] = max(dp[i - 1] + A[i], A[i])</p>
<p>⚠️ 注意ans的初值（看代码）</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维的最大连续子序列和</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, dp[maxn]; <span class="comment">//dp[i]以A[i]结尾的最大连续子序列和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sequence</span><span class="params">(<span class="keyword">int</span> *A)</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = dp[<span class="number">0</span>]; <span class="comment">// i从1开始否则dp[i-1]越界，ans初始化为dp[0]，否则若只有A[0]时不进行for循环，ans就得不到值了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + A[i], A[i]);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t[maxn];</span><br><span class="line">        <span class="keyword">int</span> ans = a[<span class="number">0</span>][<span class="number">0</span>], temp; <span class="comment">//!!!有可能输入的都是负数，所以不能将ans初始化为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    t[k] += a[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                temp = sequence(t);</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; ans) ans = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="F-放苹果-🌟🌟🌟"><a href="#F-放苹果-🌟🌟🌟" class="headerlink" title="F 放苹果 🌟🌟🌟"></a>F 放苹果 🌟🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" data-fancybox="group" data-caption="image-20200903022028745" class="fancybox"><img alt="image-20200903022028745" style="zoom:50%;" title="image-20200903022028745" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022028745.png" class="lazyload"></a>

<h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>所有不同的摆放方法可以分为两类：至少有一个盘子空着和所有的盘子都不空。<br>我们可以分别计算这两类摆放方法的数目，然后把它们加起来。<br>1️⃣ 至少空一个盘子：N 个盘子摆放 M 个苹果的摆放数目 = N-1 个盘子摆放 M 个苹果的摆放方法数目<br>2️⃣所有盘子都不空：即N个盘子中至少有1个苹果，则 N个盘子摆放 M 个苹果的摆放方法数目 = N 个盘子摆放 M-N 个苹果的摆放方法数目<br>我们可以据此来用递归的方法求解这个问题。</p>
<p>设f（m,n）为m个苹果，n个盘子的放法数目，则先对n作讨论：</p>
<ol>
<li>若 n&gt;m，必定至少有 n-m 个盘子永远空着，去掉它们对摆放苹果放法数目不产生影响 if(n&gt;m) f(m,n)=f(m,m)</li>
<li>若 n&lt;=m，不同的方法可以分为两类👇<ul>
<li>有至少一个盘子空着：f(m,n)=f(m,n-1)</li>
<li>所有盘子都有苹果，则可以从每个盘子中拿掉一个苹果，不影响不同放法的数目f(m,n)=f(m-n,n)</li>
<li>总的放苹果的放法数目等于两者的和，即f(m,n)=f(m,n-1)+ f(m-n,n)</li>
</ul>
</li>
<li>边界：f(m,n)=f(m,n-1) 时 n 不断变小，f(m,n)=f(m-n,n)时 m 不断变小，因为n&gt;m时return f(m,m)终会到达出口m==0<ul>
<li>n=1时，所有苹果都必须放到一个盘子里，所有返回1</li>
<li>m=0时，当没有苹果可放时，定义为1种放法（空盘）</li>
</ul>
</li>
</ol>
<p>PS：这个blog是各种情况的总结，我没自己看orz，有时间研究下：<br><a href="https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html" target="_blank" rel="noopener">https://www.cnblogs.com/celia01/archive/2012/02/19/2358673.html</a></p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// m个苹果，n个盘子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//没有苹果/只有一个盘子都只有一种放法：空盘子/放这个盘子里</span></span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> f(m, m); <span class="comment">//盘子比苹果多，则至少有n-m个空盘子，所以接下来需要在m个盘子里放m个苹果</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(m - n, n) + f(m, n - <span class="number">1</span>); <span class="comment">//苹果比盘子多，则可以不空盘子，在当前所有盘子里放一个苹果/空一个盘子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f(m, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="G-点菜问题"><a href="#G-点菜问题" class="headerlink" title="G 点菜问题"></a>G 点菜问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" data-fancybox="group" data-caption="image-20200903022224149" class="fancybox"><img alt="image-20200903022224149" style="zoom:50%;" title="image-20200903022224149" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022224149.png" class="lazyload"></a>

<h3 id="题目解析-6"><a href="#题目解析-6" class="headerlink" title="题目解析"></a>题目解析</h3><p>标准01背包题</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="H-最大包销额-❓"><a href="#H-最大包销额-❓" class="headerlink" title="H 最大包销额 ❓"></a>H 最大包销额 ❓</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" data-fancybox="group" data-caption="image-20200903022345915" class="fancybox"><img alt="image-20200903022345915" style="zoom:50%;" title="image-20200903022345915" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022345915.png" class="lazyload"></a>

<h3 id="题目解析-7"><a href="#题目解析-7" class="headerlink" title="题目解析"></a>题目解析</h3><p>首先判断每张发票的有效性，若有效则将这张发票的金额和*100（化为整数）加入需计算01背包的数组w<br>⚠️ 不能将有效发票的每个物品金额*100加入w数组，因为每张发票要报销只能一整张包销</p>
<p>01背包的容量是报销额度*100</p>
<p>🔞但最后还是不知道为啥<code>错误50</code> 🙈🙃吐血了</p>
<h3 id="错误代码-1"><a href="#错误代码-1" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> q, temp[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> n, m, V, w[maxn], dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>, &amp;q, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        V = <span class="keyword">int</span>(q * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> lenw = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span> t;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c:%lf"</span>, &amp;t, &amp;temp[j]);</span><br><span class="line">                <span class="keyword">if</span> (temp[j] &gt; <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (t == <span class="string">'A'</span> || t == <span class="string">'B'</span> || t == <span class="string">'C'</span>) sum += temp[j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; m || sum &gt; <span class="number">1000</span>) <span class="keyword">continue</span>;</span><br><span class="line">            w[lenw++] = <span class="keyword">int</span>(sum * <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenw; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, dp[V] / <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="I-毕业bg"><a href="#I-毕业bg" class="headerlink" title="I 毕业bg"></a>I 毕业bg</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" data-fancybox="group" data-caption="image-20200903022503520" class="fancybox"><img alt="image-20200903022503520" style="zoom:50%;" title="image-20200903022503520" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200903022503520.png" class="lazyload"></a>

<h3 id="题目解析-8"><a href="#题目解析-8" class="headerlink" title="题目解析"></a>题目解析</h3><p>网上说是01背包题。。。完全没看出来_(:з」∠)_</p>
<p>发起人必须在几小时后离开，这就相当于背包的体积，即在这几个小时里，可以安排多少场bg，以获得最大的快乐度，然后持续时间，相当于一个物品的容积，快乐度相当于物品的价值</p>
<p>⚠️ </p>
<ol>
<li>要对所有bg按照发起人离开时间 t 从小到大进行排序，保证每次新加进来一个bg后可以保证这段时间内前面所有bg都能完成。</li>
<li>每次当前dp[i][v]时的背包容量是dp[i].t，不是V</li>
<li>最后不能直接输出dp[V]，要遍历多有的dp[i]，因为每次的背包容量不一定相同</li>
</ol>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BG</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> h, l, t;</span><br><span class="line">&#125; bg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(BG a, BG b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;bg[i].h, &amp;bg[i].l, &amp;bg[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(bg + <span class="number">1</span>, bg + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">int</span> V = bg[n].t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = bg[i].t; v &gt;= bg[i].l; v--) &#123; <span class="comment">//前i个活动的V是bg[i].t</span></span><br><span class="line">                dp[v] = <span class="built_in">max</span>(dp[v], dp[v - bg[i].l] + bg[i].h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//!!! 不能直接输出dp[V]</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = V; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>11.7 背包问题</title>
    <url>/2020/08/28/11.7%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="11-7-背包问题"><a href="#11-7-背包问题" class="headerlink" title="11.7 背包问题"></a>11.7 背包问题</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000631" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000631</a></p>
<h2 id="A-装箱问题"><a href="#A-装箱问题" class="headerlink" title="A 装箱问题"></a>A 装箱问题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" data-fancybox="group" data-caption="image-20200901191649727" class="fancybox"><img alt="image-20200901191649727" style="zoom:50%;" title="image-20200901191649727" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901191649727.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就是01背包，01背包的二维状态转移方程：</p>
<p>令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br>dp[i][v] = max{ dp[i-1][v] , dp[i-1][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)<br>化简为一维状态转移方程：【==<strong>要逆序遍历v</strong>==】<br>dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)</p>
<p>此题只有容量V和每个物品的体积，没有箱子的价值，所以这里也将箱子的体积作为箱子的价值，一维状态转移方程：<br>dp[i][v]表示前i个物品恰好装入容量为v的箱子中所能获得的最大体积<br>dp[v] = max{ dp[v] , dp[v-w[i]]+w[i]} (w[i]&lt;=v&lt;=V)，边界：dp[v]=0(0&lt;=v&lt;=V)<br>最后遍历所有dp[v] (0&lt;=v&lt;=V) 找到最大的那个就是能获得的最大体积max_v<br>==我现在觉得不用遍历所有的dp[v]。。。dp[V]就是答案，不明白为什么书上说要遍历所有的取最大值，我觉得dp[V]肯定是最大的==</p>
<p>⚠️ 最后要求输出的是最小剩余空间，故为1-ans</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxV 20005 <span class="comment">//体积上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100 <span class="comment">//物品上限</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> v[maxn];</span><br><span class="line">    <span class="keyword">int</span> dp[maxV];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//对应d[0][i]=0 前0间物品装i容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= v[i]; j--) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到dp[n][j]前n件物品装j容量箱子的最大体积</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, V - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-采药"><a href="#B-采药" class="headerlink" title="B 采药"></a>B 采药</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" data-fancybox="group" data-caption="image-20200901194210442" class="fancybox"><img alt="image-20200901194210442" style="zoom:50%;" title="image-20200901194210442" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194210442.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就是原原本本的01背包：<br>T总共能够用来采药的时间——背包的容量<br>M山洞里的草药的数目——物品的种类<br>采摘某株草药的时间和这株草药的价值——每项物品的重量和价值</p>
<p>PS：我觉得最后可以直接输出dp[V]，这就是答案，不用遍历后取最大值</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105 <span class="comment">//最大物品数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 1005 <span class="comment">//V上限</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V, n;</span><br><span class="line">    <span class="keyword">int</span> w[maxn], c[maxn], dp[maxv];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) dp[i] = <span class="number">0</span>; <span class="comment">//初始化dp[0][i]为前0件物品装入容量为i背包中的最大价值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = V; v &gt;= w[i]; v--) &#123;</span><br><span class="line">            dp[v] = <span class="built_in">max</span>(dp[v], dp[v - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="C-货币系统-🌟🌟"><a href="#C-货币系统-🌟🌟" class="headerlink" title="C 货币系统 🌟🌟"></a>C 货币系统 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" data-fancybox="group" data-caption="image-20200901194523444" class="fancybox"><img alt="image-20200901194523444" style="zoom:50%;" title="image-20200901194523444" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200901194523444.png" class="lazyload"></a>

<h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p>这道题是恰好装满的完全背包问题</p>
<p>1️⃣ 01背包 🆚 完全背包</p>
<ol>
<li><p>一维的状态转移方程相同：dp[v] = max{ dp[v] , dp[v-w[i]]+c[i]} (w[i]&lt;=v&lt;=V)<br> ==01背包要逆序遍历v，完全背包要顺序遍历v==</p>
</li>
<li><p>==完全背包的二维状态方程与01背包不同==，这就是为啥01背包是逆序遍历v，而完全背包是顺序遍历的原因<br> 完全背包二维状态方程：<br> 令dp[i][v] 表示前i件物品恰好装入容量为v的背包中所能获得的最大价值<br> dp[i][v] = max{ dp[i-1][v] , dp[i][v-w[i]]+c[i]} (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V) ，边界：dp[0][v]=0(0&lt;=v&lt;=V)</p>
</li>
<li><p>所以完全背包化简为一维后，dp[v]是上一状态的dp[i-1][v]， dp[v-w[i]]是此时状态的dp[i][v-w[i]]，故顺序遍历<br> 01背包中dp[v]、dp[v-w[i]]都是上一状态的，故逆序遍历<br> （否则遍历到dp[j]时dp[0~j-1]都是此时的状态，上一状态已经被覆盖）</p>
</li>
</ol>
<p>2️⃣ ==恰好装满 🆚 无需完全装满==</p>
<ol>
<li>要求恰好装满背包，那么在初始化时除 dp[0]为0其它f[1..V]均设为-∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解</li>
<li>如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将 dp[0..V]全部设为0。</li>
<li>Why？可以这样理解——<ul>
<li>初始化的dp数组事实上就是前0件物品可以放入背包时的合法状态。</li>
<li>如果要求背包恰好装满，那么此时只有容量为0的背包可能被价值为0的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，它们的值就都应该是-∞了。</li>
<li>如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了</li>
</ul>
</li>
</ol>
<p>💡这个小技巧完全可以推广到其它类型的背包问题</p>
<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题是恰好装满的完全背包问题，每种货币可选多次，要组成货币面值为V</p>
<p>1️⃣ 设置dp[i][v] 表示前i种货币恰好组成面值v的方案，为👇两种方案数相加</p>
<ul>
<li>当前不选第i种货币，则为前 i-1 种货币组成面值v的方案</li>
<li>当前选第i中货币，则为前i种货币组成面值 v-w[i] 的方案（w[i]存储第 i 种货币的面值）</li>
</ul>
<p>​     dp[i][v] = dp[i-1][v] + dp[i][v-w[i]] (1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V)</p>
<p>2️⃣ 因为最终要恰好组成面值V，所以是“恰好完全装满”问题，这时dp[0][0]用前0种货币恰好组成面值0的方案数目为1<br>（只有0面值能被前0种货币构成这一种合法解）其他dp[0][v]=0，表示都没有合法解，方案数是0</p>
<p>3️⃣ 化简为一维动态转移方程：dp[v] = dp[v] + dp[v-w[i]] (w[i]&lt;=v&lt;=V)<br>因为是完全背包，所以顺序遍历 v，边界dp[v]=0 (0&lt;=v&lt;=V), ==dp[0]=1==</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxv 10005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, V;</span><br><span class="line">    <span class="keyword">int</span> w[maxn];</span><br><span class="line">    LL dp[maxv];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;V) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + maxv, <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = w[i]; v &lt;= V; v++) &#123;</span><br><span class="line">                dp[v] = dp[v] + dp[v - w[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[V]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.7 堆</title>
    <url>/2020/08/27/9.7%20%E5%A0%86/</url>
    <content><![CDATA[<h1 id="9-7-堆"><a href="#9-7-堆" class="headerlink" title="9.7 堆"></a>9.7 堆</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000616" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000616</a></p>
<h2 id="A-算法10-10-10-11：堆排序"><a href="#A-算法10-10-10-11：堆排序" class="headerlink" title="A 算法10-10,10-11：堆排序"></a>A 算法10-10,10-11：堆排序</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827192807960.png" data-fancybox="group" data-caption="image-20200827192807960" class="fancybox"><img alt="image-20200827192807960" style="zoom:50%;" title="image-20200827192807960" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827192807960.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>向下调整downAdjust函数构建最大堆，则heapSort从小到大排序。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> heap[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> heigh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = low;   <span class="comment">//父结点</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">2</span> * f; <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">while</span> (c &lt;= heigh) &#123;  <span class="comment">//左孩子存在</span></span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">1</span> &lt;= heigh) &#123; <span class="comment">//右孩子存在</span></span><br><span class="line">            <span class="keyword">if</span> (heap[c + <span class="number">1</span>] &gt; heap[c]) c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[c] &gt; heap[f]) &#123;</span><br><span class="line">            swap(heap[f], heap[c]);</span><br><span class="line">            f = c; <span class="comment">//保持father为欲更改结点</span></span><br><span class="line">            c = <span class="number">2</span> * f;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        downAdjust(i, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    createHeap();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swap(heap[i], heap[<span class="number">1</span>]);</span><br><span class="line">        downAdjust(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;heap[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    heapSort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, heap[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-序列合并"><a href="#B-序列合并" class="headerlink" title="B 序列合并"></a>B 序列合并</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827193145697.png" data-fancybox="group" data-caption="image-20200827193145697" class="fancybox"><img alt="image-20200827193145697" style="zoom:50%;" title="image-20200827193145697" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827193145697.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>自己的代码时间超限，晚上找的AC代码：<a href="https://www.cnblogs.com/heyour/p/12711821.html" target="_blank" rel="noopener">https://www.cnblogs.com/heyour/p/12711821.html</a></p>
<p>大致思路如下：<br>首先，取a[]数组中的最小元素，也就是a[0]，分别加上b[i]（0&lt;=i&lt;n），并放入优先队列中。那么可以确定，此时优先队列队首的元素，也即a[0]+b[0]的值就是最小的，可以输出，并将a[1]+b[0]输入优先队列，依次类推，直到输出了n个数为止。</p>
<h3 id="代码（时间超限）"><a href="#代码（时间超限）" class="headerlink" title="代码（时间超限）"></a>代码（时间超限）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">int</span> n, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            q.push(a[j] + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; !q.empty(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, q.top());</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码（AC）"><a href="#代码（AC）" class="headerlink" title="代码（AC）"></a>代码（AC）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index, sum;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum &gt; t.sum; <span class="comment">//优先队列表示按sum的大小排列 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n, a[MAX], b[MAX];</span><br><span class="line">    Node temp, now;</span><br><span class="line">    priority_queue&lt;Node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">            temp.index = <span class="number">0</span>;</span><br><span class="line">            temp.sum = b[i] + a[temp.index];  <span class="comment">//index表示a[]中的第几个数字 </span></span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            now = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(now.index+<span class="number">1</span> &lt; n)&#123;</span><br><span class="line">                temp.index = now.index + <span class="number">1</span>;</span><br><span class="line">                temp.sum = now.sum - a[now.index] + a[temp.index];</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, now.sum, i==n<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.8 哈弗曼树</title>
    <url>/2020/08/27/9.8%20%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91/</url>
    <content><![CDATA[<h1 id="9-7-堆"><a href="#9-7-堆" class="headerlink" title="9.7 堆"></a>9.7 堆</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000617" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000617</a></p>
<h2 id="C-哈弗曼树"><a href="#C-哈弗曼树" class="headerlink" title="C 哈弗曼树"></a>C 哈弗曼树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215058546.png" data-fancybox="group" data-caption="image-20200827215058546" class="fancybox"><img alt="image-20200827215058546" style="zoom:50%;" title="image-20200827215058546" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215058546.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><strong>⚠️ 树的带权路径长度 = 叶子结点的带权路径长度之和</strong><br>       求树的最小带权路径 = 求哈弗曼树的带权路径</p>
<p>大体思路：</p>
<ul>
<li>使用优先队列，先将所有叶子结点都压入队列中</li>
<li>每次从优先队列中取出两个最小的数，将它们相加后压入优先队列（在外部定义ans，将相加的结果累加），直到优先队列中只剩下一个元素</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, temp, ans;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            a = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            b = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            q.push(a + b);</span><br><span class="line">            ans += a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-Haffman编码"><a href="#D-Haffman编码" class="headerlink" title="D Haffman编码"></a>D Haffman编码</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215351252.png" data-fancybox="group" data-caption="image-20200827215351252" class="fancybox"><img alt="image-20200827215351252" style="zoom:50%;" title="image-20200827215351252" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827215351252.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>1️⃣ 使用优先队列实现哈弗曼树的构造：</p>
<ol>
<li>先将所有叶子结点都压入队列中</li>
<li>每次从优先队列中取出两个权值最小的树，将它们组合成一棵树后压入优先队列，直到优先队列中只剩下个根结点root</li>
</ol>
<p>2️⃣ 使用DFS完成哈夫曼的编码，使用map完成字符到编码的映射</p>
<ol>
<li>DFS左孩子时，编码code+“0”</li>
<li>DFS右孩子时，编码code+“1”</li>
<li>死胡同——无左右孩子【因为哈弗曼树没有度为1的结点，故要么左右孩子都有，要么都没有】</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> d;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="comment">// 权重w大的优先级低，权重相等时ACSII大的优先级低</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node *a, node *b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a-&gt;w != b-&gt;w) <span class="keyword">return</span> a-&gt;w &gt; b-&gt;w;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a-&gt;d &gt; b-&gt;d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node *, <span class="built_in">vector</span>&lt;node *&gt;, cmp&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">createHaffmanTree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node *a, *b, *sum, *temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp = <span class="keyword">new</span> node;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp-&gt;d &gt;&gt; temp-&gt;w;</span><br><span class="line">        temp-&gt;lchild = temp-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        a = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        b = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        sum = <span class="keyword">new</span> node;</span><br><span class="line">        sum-&gt;w = a-&gt;w + b-&gt;w;</span><br><span class="line">        sum-&gt;d = a-&gt;d;  <span class="comment">//满足题目中的小规定：创建的新节点所代表的字符与它的做孩子的字符相同</span></span><br><span class="line">        sum-&gt;lchild = a, sum-&gt;rchild = b;</span><br><span class="line">        q.push(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(node *root, <span class="built_in">string</span> code)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; root-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ans[root-&gt;d] = code;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild != <span class="literal">NULL</span>) DFS(root-&gt;lchild, code + <span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild != <span class="literal">NULL</span>) DFS(root-&gt;rchild, code + <span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    node *root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        root = createHaffmanTree(n);</span><br><span class="line">        DFS(root, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;::iterator it = ans.<span class="built_in">begin</span>(); it != ans.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">":"</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-合并果子-NOIP2004TGT2"><a href="#E-合并果子-NOIP2004TGT2" class="headerlink" title="E 合并果子-NOIP2004TGT2"></a>E 合并果子-NOIP2004TGT2</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827220031070.png" data-fancybox="group" data-caption="image-20200827220031070" class="fancybox"><img alt="image-20200827220031070" style="zoom:50%;" title="image-20200827220031070" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827220031070.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题实际就是求树的最小带权路径，即哈夫曼树的带权路径长度，也即叶子结点的带权路径长度之和</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, temp, a, b, ans = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        a = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        b = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        q.push(a + b);</span><br><span class="line">        ans += a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.3 树的遍历</title>
    <url>/2020/08/26/9.3%20%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="9-3-树的遍历"><a href="#9-3-树的遍历" class="headerlink" title="9.3 树的遍历"></a>9.3 树的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000612" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000612</a></p>
<h2 id="A-树查找"><a href="#A-树查找" class="headerlink" title="A 树查找"></a>A 树查找</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826010850612.png" data-fancybox="group" data-caption="image-20200826010850612" class="fancybox"><img alt="image-20200826010850612" style="zoom:50%;" title="image-20200826010850612" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826010850612.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题指明树是完全二叉树，依次输入结点。</p>
<p>对完全二叉树当中的任何一个结点（设编号为x），其左孩子的编号是2x，右孩子编号是2x+1<br>❗根结点必须从1开始！！！（否则2*0=0）</p>
<p>所以大体解题思路：<br>1️⃣ 使用Node[maxn] 数组存储树的结点，对当前下标为x的结点，可通过下标2x访问其左孩子，2x+1访问其右孩子<br>2️⃣ 输入的是结点的data，需要记录层次，所以node结构体中有成员data、layer<br>3️⃣ 使用BFS遍历整棵树，存储d层次的结点<br>（之所以存储下来而不是直接输出，因为土题目要求节点间用空格隔开，最后一个节点后没有空格）<br>4️⃣ 输出存储的d层次的结点</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">&#125; Node[maxn];</span><br><span class="line"><span class="keyword">int</span> n, d; <span class="comment">//结点个数，深度</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn], digit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    Node[root].layer = <span class="number">1</span>;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = q.front();</span><br><span class="line">        <span class="keyword">if</span> (Node[front].layer == d) &#123;</span><br><span class="line">            ans[digit++] = Node[front].data;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//左孩子存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * front &lt;= n) &#123;</span><br><span class="line">            Node[<span class="number">2</span> * front].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(<span class="number">2</span> * front);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * front + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            Node[<span class="number">2</span> * front + <span class="number">1</span>].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(<span class="number">2</span> * front + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Node[i].data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">        digit = <span class="number">0</span>;</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (digit == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"EMPTY\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digit; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt; digit - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-树的高度"><a href="#B-树的高度" class="headerlink" title="B 树的高度"></a>B 树的高度</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826011655470.png" data-fancybox="group" data-caption="image-20200826011655470" class="fancybox"><img alt="image-20200826011655470" style="zoom:50%;" title="image-20200826011655470" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826011655470.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题考察的是普通树的遍历，用数组存储树的所有结点</p>
<p>因为输入的是树各个结点之间的关系，所以node结构体不用存储data。因为要输出树的高度，所以要记录layer<br>（用vector&lt;int&gt; child存储此结点所有的孩子结点）</p>
<p>⚠️ 唯一要注意一点：<br>一开始没有用ans在BFS过程中记录最大的结点layer，认为Node[n].layer一定最大，直接在main中输出Node[n].layer，结果WA。（🙃maybe 结点不一定按照层数顺序编号，可能会有大的结点在较低高度的情况）</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105  <span class="comment">//随便写的大小，题目没说，但是AC了</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> layer;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125; Node[maxn];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    Node[root].layer = <span class="number">1</span>;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> front = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (Node[front].layer &gt; ans) ans = Node[front].layer;  <span class="comment">//!!重要</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[front].child.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = Node[front].child[i];</span><br><span class="line">            Node[child].layer = Node[front].layer + <span class="number">1</span>;</span><br><span class="line">            q.push(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Node[a].child.push_back(b);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        BFS(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.4 二叉查找树</title>
    <url>/2020/08/26/9.4%20%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
    <content><![CDATA[<h1 id="9-4-二叉查找树"><a href="#9-4-二叉查找树" class="headerlink" title="9.4 二叉查找树"></a>9.4 二叉查找树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000613" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000613</a></p>
<h2 id="A-二叉排序树"><a href="#A-二叉排序树" class="headerlink" title="A 二叉排序树"></a>A 二叉排序树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201100960.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201100960.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>唯一的坑在于“输入中可能有重复元素，但是输出的二叉树遍历序列中重复元素不用输出。”<br>题目中没说。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//注意&amp;！！！</span></span><br><span class="line">    <span class="comment">// 找到插入位置</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == root-&gt;data) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        insert(root, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">    preOrder(root-&gt;lchild);</span><br><span class="line">    preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root-&gt;lchild);</span><br><span class="line">    postOrder(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        node *root = create();</span><br><span class="line">        preOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        postOrder(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-二叉搜索树"><a href="#B-二叉搜索树" class="headerlink" title="B 二叉搜索树"></a>B 二叉搜索树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201345691.png" data-fancybox="group" data-caption="image-20200826201345691" class="fancybox"><img alt="image-20200826201345691" style="zoom:50%;" title="image-20200826201345691" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826201345691.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>中序遍历+前序遍历/后序遍历才能唯一的确定一棵二叉树</p>
<p>对 ==二叉排序树== 而言，相同元素的二叉排序树中序遍历一定相同，而不同元素二叉排序树使用前序遍历就可以发现不相同，所以==只需要前序遍历两个二叉树==，比较一下就可以判断</p>
<p>❗️“答案错误50”，看了半天不知道哪里错了。看了网上的代码，觉得写得没差别<em>(:з」∠)</em></p>
<h3 id="代码（答案错误50）"><a href="#代码（答案错误50）" class="headerlink" title="代码（答案错误50）"></a>代码（答案错误50）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">        insert(root, data[i] - <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">    s += root-&gt;data;</span><br><span class="line">    preOrder(root-&gt;lchild, s);</span><br><span class="line">    preOrder(root-&gt;rchild, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild, s);</span><br><span class="line">    s += root-&gt;data;</span><br><span class="line">    inOrder(root-&gt;rchild, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">string</span> pre1, pre2, in1, in2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        node *root = create(s);</span><br><span class="line">        preOrder(root, pre1);</span><br><span class="line">        inOrder(root, in1);</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            pre2.<span class="built_in">clear</span>();</span><br><span class="line">            in2.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            root = create(s);</span><br><span class="line">            preOrder(root, pre2);</span><br><span class="line">            inOrder(root, in2);</span><br><span class="line">            <span class="keyword">if</span> (pre1 == pre2 &amp;&amp; in1 == in2) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.5 平衡二叉树</title>
    <url>/2020/08/26/9.5%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="9-5-平衡二叉树"><a href="#9-5-平衡二叉树" class="headerlink" title="9.5 平衡二叉树"></a>9.5 平衡二叉树</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000614" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000614</a></p>
<h2 id="A-二叉排序树"><a href="#A-二叉排序树" class="headerlink" title="A 二叉排序树"></a>A 二叉排序树</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826214000557.png" data-fancybox="group" data-caption="image-20200826214000557" class="fancybox"><img alt="image-20200826214000557" style="zoom:50%;" title="image-20200826214000557" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200826214000557.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>注意函数L、R、insert的写法，⚠️有&amp;</p>
<p>❗️==不要在search返回true/false，这里WA了半天==，这样最终只能返回false，大概因为search本身就是递归的</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> root-&gt;<span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结点的高度等于左右子树的最大高度+1 ⚠️要加1！！！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    root-&gt;<span class="built_in">height</span> = <span class="built_in">max</span>(getHeight(root-&gt;lchild), getHeight(root-&gt;rchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平衡因子 = 左右子树高度差</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBananceFactor</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root-&gt;lchild) - getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(node *&amp;root)</span> </span>&#123;  <span class="comment">//注意&amp;</span></span><br><span class="line">    node *temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(node *&amp;root)</span> </span>&#123; <span class="comment">//注意&amp;</span></span><br><span class="line">    node *temp = root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild = root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(temp);</span><br><span class="line">    root = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data = x;</span><br><span class="line">        root-&gt;<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">        root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//往左子树插，导致左子树高度&gt;右子树高度</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= root-&gt;data) &#123;</span><br><span class="line">        insert(root-&gt;lchild, x);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span> (getBananceFactor(root) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getBananceFactor(root-&gt;lchild) == <span class="number">1</span>) &#123; <span class="comment">//LL</span></span><br><span class="line">                R(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBananceFactor(root-&gt;lchild) == <span class="number">-1</span>) &#123; <span class="comment">//LR</span></span><br><span class="line">                L(root-&gt;lchild);</span><br><span class="line">                R(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(root-&gt;rchild, x);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span> (getBananceFactor(root) == <span class="number">-2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getBananceFactor(root-&gt;rchild) == <span class="number">-1</span>) &#123; <span class="comment">//RR</span></span><br><span class="line">                L(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getBananceFactor(root-&gt;rchild) == <span class="number">1</span>) &#123; <span class="comment">//RL</span></span><br><span class="line">                R(root-&gt;rchild);</span><br><span class="line">                L(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        insert(root, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node *root, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == root-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; root-&gt;data) search(root-&gt;lchild, x);</span><br><span class="line">    <span class="keyword">else</span> search(root-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    preOrder(root-&gt;lchild);</span><br><span class="line">    preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) != EOF) &#123;</span><br><span class="line">        node *root = create(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            search(root, temp);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.6 并查集</title>
    <url>/2020/08/26/9.6%20%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="9-6-并查集"><a href="#9-6-并查集" class="headerlink" title="9.6 并查集"></a>9.6 并查集</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000615" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000615</a></p>
<h2 id="B-畅通工程"><a href="#B-畅通工程" class="headerlink" title="B 畅通工程"></a>B 畅通工程</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827144711658.png" data-fancybox="group" data-caption="image-20200827144711658" class="fancybox"><img alt="image-20200827144711658" style="zoom:50%;" title="image-20200827144711658" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827144711658.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>第一行n、m，接下来m行为相联系的各个结点。<br>求将n个结点都联系在一起，还需至少几条关系。</p>
<p>所以只需要找到目前m条联系后，n个结点内有几个并查集ans，最后答案为ans - 1<br>找n个结点内有几个并查集：遍历n各结点，若i与其father[i]相等，证明这个节点的根结点就是它自己，所以ans++</p>
<p>注意点⚠️<br>1️⃣在Union之前，需要将n个结点的father初始化为自己，即father[i]=i<br>（for循环从1开始，不从0开始，因为输入的m个关系中结点从1开始）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) father[i] = i;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Union(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == father[i]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-More-is-better"><a href="#D-More-is-better" class="headerlink" title="D More is better"></a>D More is better</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827145427840.png" data-fancybox="group" data-caption="image-20200827145427840" class="fancybox"><img alt="image-20200827145427840" style="zoom:50%;" title="image-20200827145427840" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200827145427840.png" class="lazyload"></a>

<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>一个房间里面有若干人maxn(0 ≤ n ≤10 000 000)。他们之间有些是朋友有些不是。现在从中选出一个群体（朋友的朋友也是朋友都是一个群体）。要使这个群体最大。</p>
<p>现在输入他们之间的关系：<br>第一行输入有多少个关系需要输入n (0 ≤ n ≤ 100 000)。<br>以下n行为具体的关系。<br>若输入1 2 。则表示1和2是朋友。</p>
<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题要求所有人maxn(0 ≤ n ≤10 000 000)，添加n(0 ≤ n ≤ 100 000)个关系后，形成的所有并查集中最大并查集的元素个数</p>
<p>注意点⚠️<br>1️⃣ 初始化father[i]=i时，要对所有人maxn初始化，因为不知道输入的关系中最大的结点是啥<br>2️⃣ 求每个并查集中元素数目：设立group[maxn]数组，遍历所有结点，将group[findFather(i)]++<br>（❗️是findFather不是father，虽然在findFather中使用了路径压缩，让所有的father都是根结点，但最后一次Union后没有使用过findFather，所以有一些结点的father不是根结点）<br>3️⃣这里本来最后两个for循环也是for (int i = 1; i &lt;= maxn; i++) ，但是这样“时间超限”，所以优化了下，设置循环截止条件为max，max是n个关系中最大的结点。<br>（因为最后并查集是在输入了关系的结点之间，之前因为不知道最大结点是啥，才在初始化时直接初始化所有结点）</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> group[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = findFather(father[x]);</span><br><span class="line">        father[x] = v;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> faA = findFather(a);</span><br><span class="line">    <span class="keyword">int</span> faB = findFather(b);</span><br><span class="line">    <span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, <span class="built_in">max</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(group, <span class="number">0</span>, <span class="keyword">sizeof</span>(group));</span><br><span class="line">        <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) father[i] = i;  <span class="comment">//!!!是maxn</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            Union(a, b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = a;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">            group[findFather(i)]++;  <span class="comment">//!!!是findFather不是Father</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group[i] &gt; ans) ans = group[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>7.1 栈的应用</title>
    <url>/2020/08/03/7.1%20%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="7-1-栈的应用"><a href="#7-1-栈的应用" class="headerlink" title="7.1 栈的应用"></a>7.1 栈的应用</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000605" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000605</a></p>
<p><code>6.8 stack的常见用法详解</code>与此节题目相同</p>
<h2 id="A-简单计算器"><a href="#A-简单计算器" class="headerlink" title="A  简单计算器"></a>A  简单计算器</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" data-fancybox="group" data-caption="image-20200803214737346" class="fancybox"><img alt="image-20200803214737346" style="zoom:50%;" title="image-20200803214737346" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803214737346.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>emmmmm代码注释很清楚，标注⚠️的地方都是写代码的时候漏掉的，要注意！！！</p>
<p>一开始没有写node结构体，但是考虑到如果不管操作数还是操作符都用char表示的话，操作数最大为127而且不能有浮点数，这显然是不可能的，所以还是改成了node结构体。</p>
<p>【书p147也有此题解析和代码，可参考】</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> num;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">bool</span> flag;  <span class="comment">//为true表示为操作符，false为操作符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s;    <span class="comment">//在change函数中用于存放放操作符，在calculate函数中存放操作数</span></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;    <span class="comment">//存放后缀表达式</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;<span class="comment">//操作符优先级</span></span><br><span class="line"><span class="built_in">string</span> str;       <span class="comment">//读入的中缀表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历中缀表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length();) &#123;</span><br><span class="line">        node temp;</span><br><span class="line">        <span class="comment">//若是操作数，则加入q</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            temp.flag = <span class="literal">true</span>;</span><br><span class="line">            temp.num = str[i++] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; str.length() &amp;&amp; str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;  <span class="comment">//i &lt; str.length()很重要！！！⚠️</span></span><br><span class="line">                temp.num = temp.num * <span class="number">10</span> + str[i] - <span class="string">'0'</span>; <span class="comment">//因为这个操作数不一定只有一位</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是操作符</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp.flag = <span class="literal">false</span>;</span><br><span class="line">            temp.op = str[i];</span><br><span class="line">            <span class="comment">//若操作符优先级 &lt;= 栈顶优先级，则不停出栈</span></span><br><span class="line">            <span class="keyword">while</span> (!s.empty() &amp;&amp; mp[str[i]] &lt;= mp[s.top().op]) &#123;  <span class="comment">// !s.empty() 很重要！！！⚠️</span></span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若s中还有操作符，则加入后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        q.push(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算后缀表达式,最后s中的数为最终结果</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//遍历后缀表达式</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop(); <span class="comment">//别忘了！！！⚠️</span></span><br><span class="line">        <span class="comment">//为操作数，则压栈</span></span><br><span class="line">        <span class="keyword">if</span> (temp.flag) &#123;</span><br><span class="line">            s.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为操作符，则出栈两个进行计算，然后结果压栈</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            node a, b, c;</span><br><span class="line">            c.flag = <span class="literal">true</span>;</span><br><span class="line">            b = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            a = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (temp.op == <span class="string">'+'</span>) c.num = a.num + b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'-'</span>) c.num = a.num - b.num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.op == <span class="string">'*'</span>) c.num = a.num * b.num;</span><br><span class="line">            <span class="keyword">else</span> c.num = a.num / b.num;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.top().num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp[<span class="string">'+'</span>] = <span class="number">1</span>, mp[<span class="string">'-'</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">'*'</span>] = <span class="number">2</span>, mp[<span class="string">'/'</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, str) &amp;&amp; str != <span class="string">"0"</span>) &#123;</span><br><span class="line">        <span class="comment">//将str的所有空格都去掉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span>::iterator it = str.<span class="built_in">begin</span>(); it != str.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">' '</span>) str.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">        change();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, calculate());</span><br><span class="line">        s.pop(); <span class="comment">//因为s最后还有一个数字，要清空s</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="B-Problem-E"><a href="#B-Problem-E" class="headerlink" title="B Problem E"></a>B Problem E</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" data-fancybox="group" data-caption="image-20200803215233202" class="fancybox"><img alt="image-20200803215233202" style="zoom:50%;" title="image-20200803215233202" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200803215233202.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>定义栈stack，遍历输入的字符串。</p>
<ul>
<li>若是 (、[、{ 肯定要入栈；</li>
<li>若是 )、]、}，若栈为空则return false；若栈不为空，但与栈顶元素不匹配，则return false</li>
<li>遍历完后，若stack为空，证明都匹配完全 return true；否则证明有多余的符号，return false【故可简化为return stack.empty() 】</li>
</ul>
<p>⚠️ 使用getline时，因为getline可以读入空格，故若前面使用了scanf，要先用getchar吸收掉换行</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">'('</span> &amp;&amp; b == <span class="string">')'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'['</span> &amp;&amp; b == <span class="string">']'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'&#123;'</span> &amp;&amp; b == <span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span> || str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span>) s.push(str[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span> || str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!match(s.top(), str[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            getline(<span class="built_in">cin</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (deal()) <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()) s.pop();<span class="comment">//别忘了最后要清空stack，因为下一次还要用的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>8.1 DFS</title>
    <url>/2020/08/03/8.1%20DFS/</url>
    <content><![CDATA[<h1 id="8-1-DFS"><a href="#8-1-DFS" class="headerlink" title="8.1 DFS"></a>8.1 DFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000608" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000608</a></p>
<h2 id="B-【递归入门】组合的输出"><a href="#B-【递归入门】组合的输出" class="headerlink" title="B 【递归入门】组合的输出"></a>B 【递归入门】组合的输出</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" data-fancybox="group" data-caption="image-20200824041227376" class="fancybox"><img alt="image-20200824041227376" style="zoom:50%;" title="image-20200824041227376" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041227376.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题实际是递归求全排列的变体</p>
<p>🆚 求全排列</p>
<ol>
<li>全排列每次从n个数中选择一个没选过的，最后组成n个数的序列；此处从n个数中选择一个没选过的，最后组成r个数的序列</li>
<li>全排列中对n个数序列之间的顺序无要求；此处是组合，也就是不要重复的序列，可通过添加限制要求：后一个数一定比前一个数大实现——x&gt;=p[index-1]</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> n, r, p[maxn];</span><br><span class="line"><span class="keyword">bool</span> hashtable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == r + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[x] &amp;&amp; x &gt;= p[index - <span class="number">1</span>]) &#123;</span><br><span class="line">            p[index] = x;</span><br><span class="line">            hashtable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashtable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r) != EOF) &#123;</span><br><span class="line">        generateP(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="E【递归入门】出栈序列统计"><a href="#E【递归入门】出栈序列统计" class="headerlink" title="E【递归入门】出栈序列统计"></a>E【递归入门】出栈序列统计</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" data-fancybox="group" data-caption="image-20200824041717626" class="fancybox"><img alt="image-20200824041717626" style="zoom:50%;" title="image-20200824041717626" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824041717626.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目意思：输入n接下来模拟栈的入栈、出栈操作，需要得到入栈n次，出栈n次。问有几种不同的操作顺序<br>（一开始愣是没读懂题目啥意思😂）</p>
<p>设入栈次数in_num，出栈次数out_num<br>所以DFS岔路口是选择入栈还是出栈。<br>若in_num &gt; n || out_num &gt; n 到达死胡同，in_num == n &amp;&amp; out_num == n 表示终点。其他都是岔路口。<br>但需注意的是，只有 in_num &gt; out_num 时才能出栈 </p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in_num表示入栈次数，out_num表示出栈次数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> in_num, <span class="keyword">int</span> out_num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_num == n &amp;&amp; out_num == n) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; n || out_num &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (in_num &lt; n) DFS(in_num + <span class="number">1</span>, out_num); <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">if</span> (in_num &gt; out_num &amp;&amp; out_num &lt; n) DFS(in_num, out_num + <span class="number">1</span>); <span class="comment">//出栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="F-【递归入门】走迷宫"><a href="#F-【递归入门】走迷宫" class="headerlink" title="F 【递归入门】走迷宫"></a>F 【递归入门】走迷宫</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" data-fancybox="group" data-caption="image-20200824042426531" class="fancybox"><img alt="image-20200824042426531" style="zoom:50%;" title="image-20200824042426531" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200824042426531.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ </p>
<ol>
<li>要弄清楚x，y方向和n、m界限分别是对x还是y</li>
<li>题目要求按照左上右下方向拓展，这里WA了一次</li>
</ol>
<p>题外话：这里用bool数组b[i][j]记录点x=i，y=j是否已经走过，但是BFS中用bool数组记录点是否如果队</p>
<p>💡这里代码没有做矩阵有全0行/全0列时肯定无解的剪枝</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m,digit=<span class="number">0</span>;</span><br><span class="line">node S,T, Node;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>][<span class="number">20</span>];<span class="comment">//存储迷宫的情况</span></span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">20</span>][<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;;<span class="comment">//每个点有没有走过</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;; <span class="comment">//左上右下</span></span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == T.x &amp;&amp; y == T.y) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(%d,%d)"</span>,(*it).x,(*it).y);</span><br><span class="line">            <span class="keyword">if</span>(it&lt;ans.<span class="built_in">end</span>()<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        digit++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> newX = x + X[i];</span><br><span class="line">        <span class="keyword">int</span> newY = y + Y[i];</span><br><span class="line">        <span class="comment">// 结点可以走，且没被走过</span></span><br><span class="line">        <span class="keyword">if</span> (judge(newX, newY) &amp;&amp; !b[newX][newY]) &#123;</span><br><span class="line">            Node.x = newX;</span><br><span class="line">            Node.y = newY;</span><br><span class="line">            b[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">            ans.push_back(Node);</span><br><span class="line">            DFS(Node.x, Node.y);</span><br><span class="line">            ans.pop_back();</span><br><span class="line">            b[newX][newY] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S.x, &amp;S.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T.x, &amp;T.y);</span><br><span class="line">    b[S.x][S.y]= <span class="literal">true</span>;</span><br><span class="line">    ans.push_back(S);</span><br><span class="line">    DFS(S.x,S.y);</span><br><span class="line">    <span class="keyword">if</span> (digit==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>8.2 BFS</title>
    <url>/2020/08/03/8.2%20BFS/</url>
    <content><![CDATA[<h1 id="8-2-BFS"><a href="#8-2-BFS" class="headerlink" title="8.2 BFS"></a>8.2 BFS</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000609" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000609</a></p>
<h2 id="A-Jugs"><a href="#A-Jugs" class="headerlink" title="A Jugs"></a>A Jugs</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" data-fancybox="group" data-caption="image-20200825011917985" class="fancybox"><img alt="image-20200825011917985" style="zoom:50%;" title="image-20200825011917985" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011917985.png" class="lazyload"></a>

<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" data-fancybox="group" data-caption="image-20200825011952480" class="fancybox"><img alt="image-20200825011952480" style="zoom:50%;" title="image-20200825011952480" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825011952480.png" class="lazyload"></a>

<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>你有两个杯子A、B和无限量的水，杯子容量是Ca、Cb，问如何通过👇操作，使第二杯中有容量为N的水。<br>能进行的操作是 “fill A”, “empty A”, “fill B”, “empty B”, “pour A B”, “pour B A”<br>其中pour A B表示将A中的水倒入B中，直到A为空或者B满</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>BFS题解模板👇</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" data-fancybox="group" data-caption="image-20200825012235783" class="fancybox"><img alt="image-20200825012235783" style="zoom:40%;" title="image-20200825012235783" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825012235783.png" class="lazyload"></a>

<ol>
<li><p>这道题有6中操作，所以BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b，通过a、b来判断能进行什么操作。又因为最后要输出所有操作，故每一步选择什么操作都要记录。</p>
<ul>
<li>因此，定义结构体node，含成员a、b、string型的op</li>
<li><strong>💡tip：每次记录操作不便于存储，所以定义一个ans[6]数组存放操作，则op只需累加记录每一步操作对应的数就可以</strong></li>
</ul>
</li>
<li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b的状态是否重复入队</p>
</li>
<li><p>根据BFS模板写代码，S表示初始状态，杯中水量a、b都为0。S入队。</p>
<ul>
<li>while循环中每次取出队首元素，判断b是否为K（是否满足条件），若是则输出具体操作</li>
<li>否则，判断当前a、b容量下能进行什么操作，将对应的元素加入队列</li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">string</span> op) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;op = op;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ans[<span class="number">6</span>] = &#123;<span class="string">"fill A"</span>, <span class="string">"empty A"</span>, <span class="string">"fill B"</span>, <span class="string">"empty B"</span>, <span class="string">"pour A B"</span>, <span class="string">"pour B A"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ca, cb, n;</span><br><span class="line"><span class="function">node <span class="title">S</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//a、b为目前两容器的量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q; <span class="comment">//定义队列</span></span><br><span class="line">    q.push(S);     <span class="comment">//首元素入队</span></span><br><span class="line">    inq[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;<span class="comment">//标记首元素已入队</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">//队列非空</span></span><br><span class="line">        node temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (temp.b == n) &#123;  <span class="comment">//终止条件是第二杯水满足题目要求</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[temp.op[i] - <span class="string">'0'</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[ca][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b, temp.op + <span class="string">"0"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[ca][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空A</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(<span class="number">0</span>, temp.b, temp.op + <span class="string">"1"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装满B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][cb]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, cb, temp.op + <span class="string">"2"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][cb] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒空B</span></span><br><span class="line">        <span class="keyword">if</span> (!inq[temp.a][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="function">node <span class="title">t</span><span class="params">(temp.a, <span class="number">0</span>, temp.op + <span class="string">"3"</span>)</span></span>;</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从A倒入B</span></span><br><span class="line">        <span class="keyword">if</span> (temp.a &gt;= cb - temp.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[temp.a - (cb - temp.b)][cb]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(temp.a - (cb - temp.b), cb, temp.op + <span class="string">"4"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[temp.a - (cb - temp.b)][cb] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][temp.b + temp.a]) &#123;</span><br><span class="line">            node t(<span class="number">0</span>, temp.b + temp.a, temp.op + <span class="string">"4"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[<span class="number">0</span>][temp.b + temp.a] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从B倒入A</span></span><br><span class="line">        <span class="keyword">if</span> (temp.b &gt;= ca - temp.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][temp.b - (ca - temp.a)]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">t</span><span class="params">(ca, temp.b - (ca - temp.a), temp.op + <span class="string">"5"</span>)</span></span>;</span><br><span class="line">                q.push(t);</span><br><span class="line">                inq[ca][temp.b - (ca - temp.a)] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[temp.a + temp.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node t(temp.a + temp.b, <span class="number">0</span>, temp.op + <span class="string">"5"</span>);</span><br><span class="line">            q.push(t);</span><br><span class="line">            inq[temp.a + temp.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;ca, &amp;cb, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(inq,<span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">        BFS();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="B-DFS-or-BFS"><a href="#B-DFS-or-BFS" class="headerlink" title="B DFS or BFS?"></a>B DFS or BFS?</h3><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" data-fancybox="group" data-caption="image-20200825013705700" class="fancybox"><img alt="image-20200825013705700" style="zoom:50%;" title="image-20200825013705700" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825013705700.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目注意点⚠️</p>
<ol>
<li><p>可以原地不动</p>
</li>
<li><p>因为石头不断下降，所以每次面对的地图情况都不同，所以不用bool数组判断是否已入队</p>
</li>
<li><p>每入队一层结点，石头下降一次，所以node结点中需要当前层数step</p>
<ul>
<li>观察用法，不能在while中的for循环中判断flag=true，最后for循环外根据flag判断是否更新地图，因为只有当本层结点都走过后才能更新地图到下一层结点</li>
<li>所以通过定义level，判断level &lt; Node.step，然后选择是否更新地图</li>
<li>🌰 假设第0层有A，第1层有B、C、D，第2层B后有E、F。<ul>
<li>🔵 如果通过flag方式，则A入队，for循环中BCD入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第1层状态。</li>
<li>B出队，for循环中EF入队，flag=true，for循环结束后因flag=true，则下降一次石头变为第2层状态。【此时queue中为CDEF】</li>
<li>C出队，此时应该是第1层石头的状态，不应该是第2层，所以出错了❌</li>
<li>🔵 如果通过level方式，则A入队，for循环中BCD入队</li>
<li>B出队，此时B的step=1，level=0&lt;1，故下降一层石头变成第1层状态，for循环中EF入队</li>
<li>C出队，此时C的step=1，level=step，故不下降石头 ✅</li>
</ul>
</li>
</ul>
</li>
<li><p>更新地图只能从后往前更新 for (int i = 7; i &gt;= 0; i–) ，否则从前往后一个石头就变成一列石头了【自己思考下】</p>
</li>
<li><p>如果step&gt;=8 肯定能走到终点，因为石头都掉光了（剪枝）</p>
</li>
<li><p>每组数据之后还有一个空行，要getchar()</p>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>; <span class="comment">//每层掉一次石头</span></span><br><span class="line">&#125; U, A, Node;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"><span class="comment">// 上，下，左，右，左上，右上，左下，右下，原地不动</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">9</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">9</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否安全</span></span><br><span class="line"><span class="comment">//不需要判是否已入队，因为石头会下降所以每次都是不同情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">7</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">7</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[x][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置有石头</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; a[x - <span class="number">1</span>][y] == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当前位置上方有石头</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新大石头位置</span></span><br><span class="line"><span class="comment">//!!!!! 要从后往前更新，本来我想的是在先判断这个位置是不是落石，如果是的话，那就把下面一个也变成落石，可是这样的话，就会对地图再一次更新</span></span><br><span class="line"><span class="comment">//就会产生一列都是S的情况</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">7</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">'S'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; <span class="number">8</span>) a[i + <span class="number">1</span>][j] = <span class="string">'S'</span>;</span><br><span class="line">                a[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(U);</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (level &lt; Node.<span class="built_in">step</span>) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">            level = Node.<span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Node.x == A.x &amp;&amp; Node.y == A.y) || Node.<span class="built_in">step</span> &gt;= <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//若能撑过8步，则石头都掉完了，肯定能到达终点</span></span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = Node.x + X[i];</span><br><span class="line">            <span class="keyword">int</span> newY = Node.y + Y[i];</span><br><span class="line">            <span class="comment">//当前位置安全</span></span><br><span class="line">            <span class="keyword">if</span> (judge(newX, newY)) &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                node temp;</span><br><span class="line">                temp.x = newX, temp.y = newY, temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">int</span> time = n;</span><br><span class="line">    U.x = <span class="number">7</span>, U.y = <span class="number">0</span>, U.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    A.x = <span class="number">0</span>, A.y = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();<span class="comment">//去掉换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        getchar(); <span class="comment">//每组数据后还有一个空行要去掉</span></span><br><span class="line">        <span class="keyword">if</span> (BFS()) <span class="built_in">printf</span>(<span class="string">"Case #%d: Yes\n"</span>, time - n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>, time - n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="C-【宽搜入门】8数码难题"><a href="#C-【宽搜入门】8数码难题" class="headerlink" title="C 【宽搜入门】8数码难题"></a>C 【宽搜入门】8数码难题</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" data-fancybox="group" data-caption="image-20200825014955081" class="fancybox"><img alt="image-20200825014955081" style="zoom:50%;" title="image-20200825014955081" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825014955081.png" class="lazyload"></a>

<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ 这道题中，不断移动的是空行，每次空格0能否上下左右移动，除了要判断碰到墙壁的情况，还要判断当前9个数字的状态是否重复。</p>
<ol>
<li><p>因为移动的是空格（题中用0表示），所以需记录空格的位置x、y。为了记录每次9中数字的状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</p>
</li>
<li><p>S表示开始状态，T表示目的状态。</p>
</li>
<li><p>队列中每次取出的队首元素如果状态和T相同，则输出步数；</p>
<p> 否则看当前0能移动的位置，判断此时的状态序列是否重复，若否则加入队列</p>
</li>
<li><p>❗️因为vector是一维数组，0记录的是在二维数组中的位置，所以转换每次0移动后转换为序列时要注意换算。</p>
<ul>
<li>若0的坐标（x,y）转换到一维数组中是status[3*x+y]<ul>
<li>🌰 输入样例中“2，8，3，1，6，4，7，0，5”中0的坐标是（2，1），在status中是status[7]</li>
</ul>
</li>
<li>若0向上移动X[i]=-1，则status中对应下标-3</li>
<li>若0向下移动X[i]=1，则status中对应下标+3</li>
<li>若0向左移动Y[i]=-1,则status中对应下标-1</li>
<li>若0向右移动Y[i]=1,则status中对应下标+1</li>
</ul>
</li>
</ol>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="keyword">int</span> x, y, <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            node temp;</span><br><span class="line">            temp.x = Node.x + X[i];</span><br><span class="line">            temp.y = Node.y + Y[i];</span><br><span class="line">            <span class="keyword">if</span> (temp.x &lt; <span class="number">0</span> || temp.x &gt; <span class="number">2</span> || temp.y &lt; <span class="number">0</span> || temp.y &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 得到新的序列</span></span><br><span class="line">            temp.status = Node.status;</span><br><span class="line">            <span class="keyword">int</span> pos_0 = <span class="number">3</span> * Node.x + Node.y;</span><br><span class="line">            <span class="keyword">if</span> (X[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">3</span>]);</span><br><span class="line">                pos_0 += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (X[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">3</span>]);</span><br><span class="line">                pos_0 -= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Y[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 + <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Y[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                swap(temp.status[pos_0], temp.status[pos_0 - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!hashtable[temp.status]) &#123;</span><br><span class="line">                temp.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">                hashtable[temp.status] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            S.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) S.x = i, S.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">            T.status.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) T.x = i, T.y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, BFS());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-【宽搜入门】魔板"><a href="#D-【宽搜入门】魔板" class="headerlink" title="D 【宽搜入门】魔板"></a>D 【宽搜入门】魔板</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" data-fancybox="group" data-caption="image-20200825020323065" class="fancybox"><img alt="image-20200825020323065" style="zoom:50%;" title="image-20200825020323065" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825020323065.png" class="lazyload"></a>

<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>与C题差不多，都需要记录每次的总体数字状态（异曲同工的感觉🙃）</p>
<p>⚠️ 这道题中，魔板每次都能进行A、B、C三种操作，要判断魔板的状态是否重复。</p>
<ol>
<li>因为最后要求输出具体的操作，所以使用string记录每次操作，为了记录每次魔板状态，使用vector&lt;int&gt;，判断状态是否重复采用map&lt;vector&lt;int&gt;, bool&gt;映射。最后要输出步数，所以也需要记录step</li>
<li>❗️开始状态总是 1 2 3 4 5 6 7 8（是顺时针取的数），最终要达到输入的状态。</li>
<li>当心每次A、B、C操作的状态转换：</li>
</ol>
<ul>
<li>🌰 从基本状态 1 2 3 4 5 6 7 8作A转换 -》8 7 6 5 4 3 2 1<ul>
<li>🌰 从基本状态 1 2 3 <u>4 5</u> 6 7 8作B转换 -》<u>4</u> 1 2 3 6 7 8 <u>5</u></li>
</ul>
</li>
<li>🌰 从基本状态 1 <u>2 3</u> 4 5 <u>6 7</u> 8作C转换 -》1 <u>7 2</u> 4 5 <u>3 6</u> 8</li>
</ul>
<ol start="4">
<li>❗️题目要求输出除最后一行外，每行输出60个字符</li>
</ol>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 王怡静 on 2020/8/24.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status;</span><br><span class="line">    <span class="built_in">string</span> op;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125; S, T, Node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; hashtable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.status[i] != b.status[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);</span><br><span class="line">    hashtable[S.status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop()</span><br><span class="line">        <span class="keyword">if</span> (check(Node, T)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Node.<span class="built_in">step</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Node.op.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; Node.op[i<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">60</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作A——交换上下两行</span></span><br><span class="line">        node temp1 = node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            temp1.status.push_back(Node.status[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp1.status]) &#123;</span><br><span class="line">            temp1.op = Node.op + <span class="string">"A"</span>;</span><br><span class="line">            temp1.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp1.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作B——将最右边的一列插入最左边</span></span><br><span class="line">        node temp2 = node();</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">8</span>; i++) temp2.status.push_back(Node.status[i]);</span><br><span class="line">        temp2.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp2.status]) &#123;</span><br><span class="line">            temp2.op = Node.op + <span class="string">"B"</span>;</span><br><span class="line">            temp2.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp2.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作C——魔板中央四格作顺时针旋转</span></span><br><span class="line">        node temp3 = node();</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">0</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">6</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">1</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">3</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">4</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">2</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">5</span>]);</span><br><span class="line">        temp3.status.push_back(Node.status[<span class="number">7</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!hashtable[temp3.status]) &#123;</span><br><span class="line">            temp3.op = Node.op + <span class="string">"C"</span>;</span><br><span class="line">            temp3.<span class="built_in">step</span> = Node.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            hashtable[temp3.status] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) S.status.push_back(i);</span><br><span class="line">    S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        T.status.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    BFS();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-【宽搜入门】巧妙取量"><a href="#E-【宽搜入门】巧妙取量" class="headerlink" title="E 【宽搜入门】巧妙取量"></a>E 【宽搜入门】巧妙取量</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" data-fancybox="group" data-caption="image-20200825021349019" class="fancybox"><img alt="image-20200825021349019" style="zoom:50%;" title="image-20200825021349019" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825021349019.png" class="lazyload"></a>

<h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实和A题倒水性质是一样的，区别在于，这道题一开始的水量是满杯A的水，没有无限的水给你装。最后判断三个杯子中一个是要求的K水量就可以。<br>所以操作就6种：A倒B、A倒C、B倒A、B倒C、C倒A、C倒B。</p>
<ol>
<li><p>BFS每一步需选择进行哪种操作，因此就需要记录每一次杯子的容量a、b、c，因为最后只需要输出最少的步骤，所以再存一下step就可以</p>
</li>
<li><p>定义queue&lt;node&gt; q; 通过inq数组记录每一组a、b、c的状态是否重复入队</p>
</li>
<li><p>根据BFS模板写代码，S表示初始状态，杯中水量a为容量ca，b和c都为0。S入队。</p>
<ul>
<li>while循环中每次取出队首元素，判断Node.a==k || Node.b==k|| Node.c==k 若是则return Node.step</li>
<li>否则，判断当前a、b、c容量下能进行什么操作，将对应的元素加入队列</li>
</ul>
</li>
</ol>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ca, cb, cc, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line"></span><br><span class="line">    node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> <span class="built_in">step</span>) : a(a), b(b), c(c), <span class="built_in">step</span>(<span class="built_in">step</span>) &#123;&#125;</span><br><span class="line">&#125; S, Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    q.push(S);</span><br><span class="line">    inq[S.a][S.b][S.c] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        Node = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(Node.a==k || Node.b==k|| Node.c==k) <span class="keyword">return</span> Node.<span class="built_in">step</span>;</span><br><span class="line">        <span class="comment">// A-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cb - Node.b)][cb][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cb - Node.b), cb, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cb - Node.b)][cb][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.a + Node.b][Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.a + Node.b, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.a + Node.b][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.a &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a - (cc - Node.c)][Node.b][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a - (cc - Node.c), Node.b, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a - (cc - Node.c)][Node.b][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[<span class="number">0</span>][Node.b][Node.a + Node.c]) &#123;</span><br><span class="line">            node temp(<span class="number">0</span>, Node.b, Node.a + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[<span class="number">0</span>][Node.b][Node.a + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b - (ca - Node.a)][Node.c]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b - (ca - Node.a), Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b - (ca - Node.a)][Node.c] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.b][<span class="number">0</span>][Node.c]) &#123;</span><br><span class="line">            node temp(Node.a + Node.b, <span class="number">0</span>, Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.b][<span class="number">0</span>][Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// B-&gt;C</span></span><br><span class="line">        <span class="keyword">if</span> (Node.b &gt;= cc - Node.c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][Node.b - cc + Node.c][cc]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, Node.b - cc + Node.c, cc, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][Node.b - cc + Node.c][cc] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][<span class="number">0</span>][Node.b + Node.c]) &#123;</span><br><span class="line">            node temp(Node.a, <span class="number">0</span>, Node.b + Node.c, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][<span class="number">0</span>][Node.b + Node.c] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;A</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= ca - Node.a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[ca][Node.b][Node.c - ca + Node.a]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(ca, Node.b, Node.c - ca + Node.a, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[ca][Node.b][Node.c - ca + Node.a] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a + Node.c][Node.b][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a + Node.c, Node.b, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a + Node.c][Node.b][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//C-&gt;B</span></span><br><span class="line">        <span class="keyword">if</span> (Node.c &gt;= cb - Node.b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inq[Node.a][cb][Node.c - cb + Node.b]) &#123;</span><br><span class="line">                <span class="function">node <span class="title">temp</span><span class="params">(Node.a, cb, Node.c - cb + Node.b, Node.<span class="built_in">step</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">                inq[Node.a][cb][Node.c - cb + Node.b] = <span class="literal">true</span>;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!inq[Node.a][Node.b + Node.c][<span class="number">0</span>]) &#123;</span><br><span class="line">            node temp(Node.a, Node.b + Node.c, <span class="number">0</span>, Node.<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line">            inq[Node.a][Node.b + Node.c][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;ca, &amp;cb, &amp;cc, &amp;k) != EOF) &#123;</span><br><span class="line">        S.a = ca, S.b = <span class="number">0</span>, S.c = <span class="number">0</span>, S.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=BFS();</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n%d\n"</span>,ans);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>9.2 二叉树的遍历</title>
    <url>/2020/08/03/9.2%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="9-2-二叉树的遍历"><a href="#9-2-二叉树的遍历" class="headerlink" title="9.2 二叉树的遍历"></a>9.2 二叉树的遍历</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000611" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000611</a></p>
<h2 id="D-二叉树遍历"><a href="#D-二叉树遍历" class="headerlink" title="D 二叉树遍历"></a>D 二叉树遍历</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825230447016.png" data-fancybox="group" data-caption="image-20200825230447016" class="fancybox"><img alt="image-20200825230447016" style="zoom:50%;" title="image-20200825230447016" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200825230447016.png" class="lazyload"></a>

<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️这道题之所以能用先序遍历就能构造树，是因为把空结点用#表示出来了</p>
<p>❗️仔细观察create函数，这里char c = pre[i++]; 然后根据c的值看要不要给root赋值。<br>(根据先序遍历的顺序，根结点-》左子树-》右子树)</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">string</span> pre, in;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = pre[i++];</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'#'</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    node *root = <span class="keyword">new</span> node;</span><br><span class="line">    root-&gt;data = c;</span><br><span class="line">    root-&gt;lchild = create();</span><br><span class="line">    root-&gt;rchild = create();</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    inOrder(root-&gt;lchild);</span><br><span class="line">    in += root-&gt;data;</span><br><span class="line">    inOrder(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; pre) &#123;</span><br><span class="line">        in = <span class="string">""</span>;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        inOrder(create());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; in.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, in[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>6.9 algorithm头文件下常用函数介绍</title>
    <url>/2020/08/02/6.9%20algorithm/</url>
    <content><![CDATA[<h1 id="6-9-algorithm头文件下常用函数介绍"><a href="#6-9-algorithm头文件下常用函数介绍" class="headerlink" title="6.9 algorithm头文件下常用函数介绍"></a>6.9 algorithm头文件下常用函数介绍</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000604" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000604</a></p>
<h2 id="B-全排列"><a href="#B-全排列" class="headerlink" title="B  全排列"></a>B  全排列</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:50%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200802103414945.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️next_permutation不能对string使用，可对char使用</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> (gets(a)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(a, a + <span class="built_in">strlen</span>(a)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>6.5 queue的常见用法详解</title>
    <url>/2020/08/01/6.5%20queue/</url>
    <content><![CDATA[<h1 id="6-5-queue的常见用法详解"><a href="#6-5-queue的常见用法详解" class="headerlink" title="6.5 queue的常见用法详解"></a>6.5 queue的常见用法详解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000600" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000600</a></p>
<h2 id="A-C语言-数字交换"><a href="#A-C语言-数字交换" class="headerlink" title="A  C语言-数字交换"></a>A  C语言-数字交换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" data-fancybox="group" data-caption="image-20200801180500941" class="fancybox"><img alt="image-20200801180500941" style="zoom:50%;" title="image-20200801180500941" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801180500941.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题就需要注意一点⚠️</p>
<p>有的数字可能要交换两次：如 9 3 4 5 6 2 2 2 2 7</p>
<p>最小数为2，所以若先把最小的和第一个数交换，即2和9交换，则2 3 4 5 6 9 2 2 2 7</p>
<p>最大数位9，把最大的和最后一个数交换，即9和7交换，则2 3 4 5 6 7 2 2 2 9</p>
<p>则9交换了两次</p>
<p><strong><u>所以每交换一次需要重新计算最大值/最小值；</u></strong></p>
<p>若按照错误的代码来，直接一次记录最大最小值9和2的序号为0、5，然后最小数序号5和第一个数换，为2 3 4 5 6 9 2 2 2 7，最大数序号0和最后一个数换，为7 3 4 5 6 9 2 2 2 2，就不对了 🤦‍♀️</p>
<h3 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = a[i];</span><br><span class="line">            flag2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">0</span>], a[flag2]);<span class="comment">//最小的和第一个数换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">            <span class="built_in">max</span> = a[i];</span><br><span class="line">            flag1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[<span class="number">9</span>], a[flag1]); <span class="comment">//最大的和最后一个数换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    deal();</span><br><span class="line">    output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3.1 简单模拟</title>
    <url>/2020/07/01/3.1%20%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h1 id="3-1-简单模拟"><a href="#3-1-简单模拟" class="headerlink" title="3.1 简单模拟"></a>3.1 简单模拟</h1><p><a href="http://codeup.cn/contest.php?cid=100000575" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000575</a></p>
<h2 id="E-Shortest-Distance"><a href="#E-Shortest-Distance" class="headerlink" title="E Shortest Distance"></a>E Shortest Distance</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" data-fancybox="group" data-caption="image-20200702153841801" class="fancybox"><img alt="image-20200702153841801" style="zoom:50%;" title="image-20200702153841801" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" class="lazyload"></a>

<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给出一个简单周期的高速公路上的N个出口，找出任何一对出口之间的最短距离。</p>
<p>输入第一个N，接下来N个为Di，表示第i个和第i+1个出口之间的距离，DN表示第N个和第1个出口之间的距离。</p>
<p>给出M，接下来M组是要求最点距离的两个出口。</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>以样例输入为例，表示有5个出口，各自距离如👇所示：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" data-fancybox="group" data-caption="image-20200702154331644" class="fancybox"><img alt="image-20200702154331644" style="zoom:40%;" title="image-20200702154331644" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" class="lazyload"></a>

<p>我们可以把1出口到各个出口i间的距离纪录在数组a[i]中，为了方便这里不用a[0]，显然a[1]=0。记录环形总长sum。</p>
<p>要求距离的start出口、end出口，有以下情况（假设end&gt;start）：</p>
<ul>
<li>其中一个为1，即求1出口到其他出口的最短距离，即max { a[i] ,  sum - a[i] }</li>
<li>没有一个为1，则求max { a[end] - a[start] ,  sum - ( a[end] - a[start] ) }</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n, m, temp, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++) &#123;  <span class="comment">//为了点后续计算方便，a[0]没有用，a[i]表示1到i点的距离，a[1]=0</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        sum += temp;</span><br><span class="line">        a[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">    sum+=temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, ans, t2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;start, &amp;<span class="built_in">end</span>);</span><br><span class="line">        <span class="keyword">if</span> (start &gt; <span class="built_in">end</span>) &#123;</span><br><span class="line">            t2 = <span class="built_in">end</span>;</span><br><span class="line">            <span class="built_in">end</span> = start;</span><br><span class="line">            start = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">1</span>) ans = a[<span class="built_in">end</span>] &lt; (sum - a[<span class="built_in">end</span>]) ? a[<span class="built_in">end</span>] : (sum - a[<span class="built_in">end</span>]);</span><br><span class="line">        <span class="keyword">else</span> ans = (a[<span class="built_in">end</span>] - a[start]) &lt; (sum - a[<span class="built_in">end</span>] + a[start]) ? (a[<span class="built_in">end</span>] - a[start]) : (sum - a[<span class="built_in">end</span>] + a[start]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3.4 日期处理</title>
    <url>/2020/07/01/3.4%20%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="3-4-日期处理"><a href="#3-4-日期处理" class="headerlink" title="3.4 日期处理"></a>3.4 日期处理</h1><p><a href="http://codeup.cn/contest.php?cid=100000578" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000578</a></p>
<h2 id="A-日期差值"><a href="#A-日期差值" class="headerlink" title="A 日期差值"></a>A 日期差值</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703001346743.png" data-fancybox="group" data-caption="image-20200703001346743" class="fancybox"><img alt="image-20200703001346743" style="zoom:50%;" title="image-20200703001346743" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703001346743.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol>
<li><p>为方便计算，设置第二个日期大于第一个日期，即time2&gt;time1。</p>
</li>
<li><p>为方便直接取出每个月的天数，定义一个二维数组int month[13][2] 用于存放每个月的天数（第二维为0时表示平年，为1时表示闰年）。</p>
</li>
<li><p><strong><u><em>⚠️若两个日期连续，则规定二者之间天数为2天。则若两个日期相同，则答案为1。</em></u></strong></p>
</li>
</ol>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>令time1不断加1天，直到time1=time2，统计累加的天数。</p>
<p>具体处理时：若加1天后，天数d等于当前月份m拥有天数+1，则m++，d=1；若月份m&gt;12，则y++，m=1。</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>为节约时间，可先把time1的年份y1不断加1，直到与time2的年份y2相差1，期间：</p>
<ul>
<li><p><u><strong>若当前y1是闰年且d1&lt;=2（证明闰年的2月还没过完，要算入累加天数）累加366天。</strong></u> </p>
<p>Eg：time1=20200101; time2=20220101——输出732</p>
</li>
<li><p><strong><u>若当前（y1+1）是闰年且d1&gt;2（证明第二年的闰年2月要算）累加366天。</u></strong></p>
<p>Eg：time1=20190303; time2=20210303——输出732</p>
</li>
<li><p>上述两种之外的情况累加365天。</p>
<p>Eg：time1=20200303; time2=20220303——输出731（y1是闰年，但d1&gt;2）</p>
</li>
</ul>
<p>然后进行上述不断天数+1操作。</p>
<h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time1, time2;</span><br><span class="line">    <span class="comment">//第二维第一个表示平年的月份，第二个表示闰年的月份</span></span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y1, y2, m1, m2, d1, d2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;time1, &amp;time2) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (time1 &gt; time2) &#123;</span><br><span class="line">            temp = time1;</span><br><span class="line">            time1 = time2;</span><br><span class="line">            time2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        y1 = time1 / <span class="number">10000</span>, m1 = (time1 % <span class="number">10000</span>) / <span class="number">100</span>, d1 = time1 % <span class="number">100</span>;</span><br><span class="line">        y2 = time2 / <span class="number">10000</span>, m2 = (time2 % <span class="number">10000</span>) / <span class="number">100</span>, d2 = time2 % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (y1 != y2 || m1 != m2 || d1 != d2) &#123;</span><br><span class="line">            d1++;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt; month[m1][isLeap(y1)]) &#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m1 &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time1, time2;</span><br><span class="line">    <span class="comment">//第二维第一个表示平年的月份，第二个表示闰年的月份</span></span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y1, y2, m1, m2, d1, d2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;time1, &amp;time2) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (time1 &gt; time2) &#123;</span><br><span class="line">            temp = time1;</span><br><span class="line">            time1 = time2;</span><br><span class="line">            time2 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        y1 = time1 / <span class="number">10000</span>, m1 = (time1 % <span class="number">10000</span>) / <span class="number">100</span>, d1 = time1 % <span class="number">100</span>;</span><br><span class="line">        y2 = time2 / <span class="number">10000</span>, m2 = (time2 % <span class="number">10000</span>) / <span class="number">100</span>, d2 = time2 % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (y2 - y1 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeap(y1) &amp;&amp; d1&lt;=<span class="number">2</span>) ans += <span class="number">366</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isLeap(y1+<span class="number">1</span>) &amp;&amp; d1&gt;<span class="number">2</span>) ans+=<span class="number">366</span>;</span><br><span class="line">            <span class="keyword">else</span> ans += <span class="number">365</span>;</span><br><span class="line">            y1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (y1 != y2 || m1 != m2 || d1 != d2) &#123;</span><br><span class="line">            d1++;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt; month[m1][isLeap(y1)]) &#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m1 &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="B-Day-of-Week"><a href="#B-Day-of-Week" class="headerlink" title="B Day of Week"></a>B Day of Week</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703164945413.png" data-fancybox="group" data-caption="image-20200703164945413" class="fancybox"><img alt="image-20200703164945413" style="zoom:50%;" title="image-20200703164945413" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703164945413.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>要求一日期所表示的星期。</p>
<p>采用<code>基姆拉尔森公式</code>：<strong>w = (<u>d + 1</u> + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400) % 7</strong> <strong>【w=0~6,w=0表示周日至周六】</strong></p>
<p>公式要求：</p>
<ul>
<li>将1、2月作为前一年的13、14月</li>
</ul>
<p>（PS：若采用公式w = (d + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400) % 7 ，则w=0～6表示周一至周日）</p>
<p>公式原理参考：<a href="https://blog.csdn.net/qq_33114231/article/details/52352668" target="_blank" rel="noopener">https://blog.csdn.net/qq_33114231/article/details/52352668</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getWeek</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || m == <span class="number">2</span>) &#123;</span><br><span class="line">        m += <span class="number">12</span>;</span><br><span class="line">        y--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (d + <span class="number">1</span> + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> week[<span class="number">7</span>][<span class="number">20</span>] = &#123;<span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> month[<span class="number">13</span>][<span class="number">20</span>] = &#123;<span class="string">""</span>, <span class="string">"January"</span>, <span class="string">"February"</span>, <span class="string">"March"</span>, <span class="string">"April"</span>, <span class="string">"May"</span>, <span class="string">"June"</span>, <span class="string">"July"</span>, <span class="string">"August"</span>, <span class="string">"September"</span>,</span><br><span class="line">                          <span class="string">"October"</span>, <span class="string">"November"</span>, <span class="string">"December"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, w;</span><br><span class="line">    <span class="keyword">char</span> mm[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>, &amp;d, mm, &amp;y) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(month[i], mm) == <span class="number">0</span>) &#123;</span><br><span class="line">                m = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, week[getWeek(y, m, d)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>若求某年第几天的星期：</p>
<p><strong>w = (d + y - 1 + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400) % 7 【w=0~6,w=0表示周日至周六】</strong></p>
<ol>
<li><p>初步推导</p>
<ul>
<li><p>用  y,  d,  w  分别表示  年  该年第几天  星期 (w=0-6  代表星期日-星期六 ）</p>
</li>
<li><p>我们从 <code>公元0年1月1日星期日</code> 开始 </p>
</li>
<li><p>只考虑最开始的  7  天，即  d  =  1—7  变换到  w  =  0—6<br>很直观的得到： w  =  d-1 </p>
<p>则该年第 d 天：w = (d - 1) % 7 ———  公式(1) </p>
</li>
<li><p>按年扩展：</p>
<ul>
<li>我们不考虑闰年，假设每一年都是  365  天。由于365是7的52倍多1天，所以每一年的第一天和最后一天星期是相同的。 <pre><code>也就是说下一年的第一天与上一年的第一天星期滞后一天。这是个重要的结论，每过一年，公式(1)会有一天的误差，由于我们是从0年开始的，所以只须要简单的加上年就可以修正扩展年引起的误差，得到公式如下： 
w  =  (d-1  +  y)  %  7  </code></pre></li>
<li>将闰年考虑进去 <pre><code>每个闰年会多出一天，会使后面的年份产生一天的误差。如我们要计算2005年1月1日星期几，就要考虑前面的已经过的2004年中有多少个闰年，将这个误差加上就可以正确的计算了。 
根据闰年的定义(能被4整但不能被100整除或能被400整)，得到计算闰年的个数的算式：y/4 - y/100 + y/400(计算从公元0年开始过去的闰年数，公元0年不算闰年)。 
由于我们要计算的是当前要计算的年之前的闰年数，所以要将年减1，得到了如下的公式： 
 w  =  [ d - 1+ y + (y - 1) / 4 - (y - 1) / 100+(y - 1) / 400]  %  7  -----公式(2)</code></pre></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="C-打印日期"><a href="#C-打印日期" class="headerlink" title="C 打印日期"></a>C 打印日期</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180045283.png" data-fancybox="group" data-caption="image-20200703180045283" class="fancybox"><img alt="image-20200703180045283" style="zoom:50%;" title="image-20200703180045283" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180045283.png" class="lazyload"></a>



<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;y, &amp;n) != EOF) &#123;</span><br><span class="line">        m = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">31</span>) d = n;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = isLeap(y);</span><br><span class="line">            <span class="keyword">while</span> (n &gt; month[m][temp]) &#123;</span><br><span class="line">                n -= month[m][temp];</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">            d = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-日期类"><a href="#D-日期类" class="headerlink" title="D 日期类"></a>D 日期类</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180343424.png" data-fancybox="group" data-caption="image-20200703180343424" class="fancybox"><img alt="image-20200703180343424" style="zoom:50%;" title="image-20200703180343424" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180343424.png" class="lazyload"></a>



<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, y, m, d;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;y, &amp;m, &amp;d);</span><br><span class="line">            d++;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; month[m][isLeap(y)]) &#123;</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                m = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="E-日期累加"><a href="#E-日期累加" class="headerlink" title="E 日期累加"></a>E 日期累加</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180533674.png" data-fancybox="group" data-caption="image-20200703180533674" class="fancybox"><img alt="image-20200703180533674" style="zoom:50%;" title="image-20200703180533674" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200703180533674.png" class="lazyload"></a>



<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, y, m, d, n;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,  <span class="number">0</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">28</span>, <span class="number">29</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;,&#123;<span class="number">30</span>, <span class="number">30</span>&#125;,&#123;<span class="number">31</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;y, &amp;m, &amp;d, &amp;n);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">366</span> &amp;&amp; isLeap(y) &amp;&amp; d &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">366</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">365</span> &amp;&amp; isLeap(y) &amp;&amp; d &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">365</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">366</span> &amp;&amp; isLeap(y + <span class="number">1</span>) &amp;&amp; d &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">366</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">365</span>) &#123;</span><br><span class="line">                y++;</span><br><span class="line">                n -= <span class="number">365</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">                d++;</span><br><span class="line">                <span class="keyword">if</span> (d &gt; month[m][isLeap(y)]) &#123;</span><br><span class="line">                    m++;</span><br><span class="line">                    d = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">                    y++;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d-%02d-%02d\n"</span>, y, m, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3.5 进制转换</title>
    <url>/2020/07/01/3.5%20%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="3-5-进制转换"><a href="#3-5-进制转换" class="headerlink" title="3.5 进制转换"></a>3.5 进制转换</h1><p><a href="http://codeup.cn/contest.php?cid=100000579" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000579</a></p>
<h2 id="B-数制转换"><a href="#B-数制转换" class="headerlink" title="B 数制转换"></a>B 数制转换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005150829.png" data-fancybox="group" data-caption="image-20200704005150829" class="fancybox"><img alt="image-20200704005150829" style="zoom:50%;" title="image-20200704005150829" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005150829.png" class="lazyload"></a>



<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a_to_ten</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> *x)</span> </span>&#123;  <span class="comment">//a进制x转换为十进制y</span></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>, temp, product = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(x) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt;= <span class="string">'a'</span>) x[i] -= <span class="number">32</span>;</span><br><span class="line">        temp = x[i] &gt;= <span class="string">'A'</span> ? x[i] - <span class="string">'A'</span> + <span class="number">10</span> : x[i] - <span class="string">'0'</span>; <span class="comment">//取得x末位的字符表示的数字</span></span><br><span class="line">        y += temp * product;</span><br><span class="line">        product *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ten_to_b</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> y, <span class="keyword">char</span> *z)</span> </span>&#123;  <span class="comment">//十进制y转换为b进制数z 返回z的位数，方便倒序输出</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>, temp;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        temp = y % b;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt;= <span class="number">9</span>) z[num++] = temp + <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> z[num++] = temp - <span class="number">10</span> + <span class="string">'A'</span>;</span><br><span class="line">        y /= b;</span><br><span class="line">    &#125; <span class="keyword">while</span> (y != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">40</span>], z[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">int</span> y, a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>, &amp;a, x, &amp;b) != EOF) &#123;</span><br><span class="line">        y = a_to_ten(a, x);</span><br><span class="line">        <span class="keyword">int</span> num = ten_to_b(b, y, z);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, z[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="C-进制转换"><a href="#C-进制转换" class="headerlink" title="C 进制转换"></a>C 进制转换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005527950.png" data-fancybox="group" data-caption="image-20200704005527950" class="fancybox"><img alt="image-20200704005527950" style="zoom:50%;" title="image-20200704005527950" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704005527950.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>将大数放入char数组，每次末位字符除2取余后，将char数组除2。</p>
<p>具体除2过程：</p>
<p>从高到低每位除2，若此位为奇数则要给后一位+10，若此位位偶数则后一位不加（自己思考一下数字除2的过程）</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ten[<span class="number">35</span>], two[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ten) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, jinwei, len = <span class="built_in">strlen</span>(ten);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ten[i] -= <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            two[num++] = ten[len - <span class="number">1</span>] % <span class="number">2</span> + <span class="string">'0'</span>;   <span class="comment">//每次取最后一位的余数</span></span><br><span class="line"></span><br><span class="line">            jinwei = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = ten[j];</span><br><span class="line">                ten[j] = (ten[j] + jinwei) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (temp &amp; <span class="number">1</span>) jinwei = <span class="number">10</span>;  <span class="comment">//若是奇数，则下一位+10</span></span><br><span class="line">                <span class="keyword">else</span> jinwei = <span class="number">0</span>;  <span class="comment">//若是偶数，则加一位+0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ten[i] == <span class="number">0</span>) i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,two[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3.6 字符串处理</title>
    <url>/2020/07/01/3.6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="3-6-字符串处理"><a href="#3-6-字符串处理" class="headerlink" title="3.6 字符串处理"></a>3.6 字符串处理</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000580" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000580</a></p>
<h2 id="A-字符串连接"><a href="#A-字符串连接" class="headerlink" title="A 字符串连接"></a>A 字符串连接</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704202812704.png" data-fancybox="group" data-caption="image-20200704202812704" class="fancybox"><img alt="image-20200704202812704" style="zoom:50%;" title="image-20200704202812704" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704202812704.png" class="lazyload"></a>



<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2)&#123;</span><br><span class="line">        s1+=s2;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>好像“无冗余”应该用指针动态开辟空间。【参考<a href="https://blog.csdn.net/LJohayao/article/details/88363029】" target="_blank" rel="noopener">https://blog.csdn.net/LJohayao/article/details/88363029】</a></p>
<p>之前写的错误代码（本地运行没有问题，可能就是因为冗余然后wrong）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 250</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[MAX];</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;temp)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp==<span class="string">'\n'</span>)&#123;</span><br><span class="line">            s[num]=<span class="string">'\0'</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp!=<span class="string">' '</span>) s[num++]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="C-字符串的查找删除"><a href="#C-字符串的查找删除" class="headerlink" title="C 字符串的查找删除"></a>C 字符串的查找删除</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704203255180.png" data-fancybox="group" data-caption="image-20200704203255180" class="fancybox"><img alt="image-20200704203255180" style="zoom:50%;" title="image-20200704203255180" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704203255180.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>要注意的是：</p>
<ol>
<li>要不分大小写的删除，但是最后输出要原样输出。意味着你不能把字符串直接都转换成小写，然后进行比对，要保留原来的串。</li>
<li>短串不含空格，随便输入。之后输入的若干字符串中可能含有空格，所以要用gets。</li>
<li>使用scanf(“%s”)后用gets，一定要先用getchar()吸收换行。【都用gets就不需要】</li>
</ol>
<p>解题思路1：</p>
<p>遍历大串b，每个字符b[i] 对照小串a的第一个字符a[0]，</p>
<ul>
<li>若不匹配且不是空格，则直接输出b[i] ；</li>
<li>若匹配则再进一层循环，大串和小串同时按位比较。若匹配成功则跳过这个部分i+=lena-1（⚠️减1是因为最外层遍历b要i++）；若不成功且不是空格，直接输出b[i]</li>
</ul>
<p>解题思路2:</p>
<p>采用string，直接用find函数进行匹配小串a和空格‘ ’。若匹配上用replace替换为“”或用erase去除。最后输出修改后的大串。</p>
<p>⚠️要不分大小写的删除，但是最后输出要原样输出，所以要保留大串的副本。</p>
<h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>], b[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> lena, lenb;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">    lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (gets(b) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[i] - a[<span class="number">0</span>]) == <span class="number">32</span> || b[i] - a[<span class="number">0</span>] == <span class="number">0</span>) &#123;   <span class="comment">//忽略大小写匹配</span></span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lena; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[i + j] - a[j]) != <span class="number">32</span> &amp;&amp; b[i + j] - a[j] != <span class="number">0</span>) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//b[i]开始匹配a</span></span><br><span class="line">                <span class="keyword">if</span> (flag) i += lena<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b[i] != <span class="string">' '</span>) <span class="built_in">printf</span>(<span class="string">"%c"</span>, b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b[i] != <span class="string">' '</span>) <span class="built_in">printf</span>(<span class="string">"%c"</span>, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tempb[<span class="number">200</span>];</span><br><span class="line">    <span class="built_in">string</span> a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    getchar();   <span class="comment">//少了getchar！！！！则报格式错误</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">        a[i] = <span class="built_in">tolower</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (gets(tempb)!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        b = tempb;</span><br><span class="line">        c = b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length(); i++) &#123;</span><br><span class="line">            c[i] = <span class="built_in">tolower</span>(c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = c.<span class="built_in">find</span>(a);</span><br><span class="line">        <span class="keyword">while</span> (t != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">            b.erase(t,a.length());</span><br><span class="line">            c.erase(t,a.length());</span><br><span class="line">            <span class="comment">//b.replace(t, a.length(), "");  //或用b.erase(t,a.length());</span></span><br><span class="line">            <span class="comment">//c.replace(t, a.length(), "");</span></span><br><span class="line">            t = c.<span class="built_in">find</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t2 = c.<span class="built_in">find</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">while</span> (t2 != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">            b.erase(t2,<span class="number">1</span>);</span><br><span class="line">            c.erase(t2,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//b.replace(t2, 1, "");</span></span><br><span class="line">            <span class="comment">//c.replace(t2, 1, "");</span></span><br><span class="line">            t2 = c.<span class="built_in">find</span>(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-单词替换"><a href="#D-单词替换" class="headerlink" title="D 单词替换"></a>D 单词替换</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704204636573.png" data-fancybox="group" data-caption="image-20200704204636573" class="fancybox"><img alt="image-20200704204636573" style="zoom:50%;" title="image-20200704204636573" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704204636573.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>与C题思路大同小异：【因为没有说明s、a、b中是否含有空格，一律用gets读入。】</p>
<p>为了看代码方便，s、a、b更新为a、b、c，即此题中要将a中所有b都替换为c输出。</p>
<p>解题思路：</p>
<p>遍历大串a，每个字符a[i] 对照b的第一个字符b[0]，</p>
<ul>
<li>若不匹配且不是空格，则直接输出a[i] ；</li>
<li>若匹配则再进一层循环，a和b同时按位比较。若匹配成功，则输出c字符串，i+=lenb-1（⚠️减1是因为最外层遍历a要i++）；若不成功直接输出a[i]</li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>],c[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(gets(a)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        gets(b);</span><br><span class="line">        gets(c);</span><br><span class="line">        <span class="keyword">int</span> lena=<span class="built_in">strlen</span>(a),lenb=<span class="built_in">strlen</span>(b),lenc=<span class="built_in">strlen</span>(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lena;i++)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i]==b[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;lenb;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i+j]!=b[j])&#123;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;lenc;k++)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,c[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    i+=lenb<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="E-字符串去特定字符"><a href="#E-字符串去特定字符" class="headerlink" title="E 字符串去特定字符"></a>E 字符串去特定字符</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704205725243.png" data-fancybox="group" data-caption="image-20200704205725243" class="fancybox"><img alt="image-20200704205725243" style="zoom:50%;" title="image-20200704205725243" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200704205725243.png" class="lazyload"></a>



<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️题目要循环输入，第二个字符为getchar得到的，为不影响循环后gets读入不必要数据，需要吸收掉换行之类的乱七八糟字符。</p>
<p>故要在while循环中最后加 <code>while((temp=getchar())!=&#39;\n&#39; &amp;&amp; temp!=EOF);</code></p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(gets(s))&#123;</span><br><span class="line">        c=getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i]!=c) <span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>((temp=getchar())!=<span class="string">'\n'</span> &amp;&amp; temp!=EOF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>3.3 图形输出</title>
    <url>/2020/07/01/3.3%20%E5%9B%BE%E5%BD%A2%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h1 id="3-3-图形输出"><a href="#3-3-图形输出" class="headerlink" title="3.3 图形输出"></a>3.3 图形输出</h1><p><a href="http://codeup.cn/contest.php?cid=100000577" target="_blank" rel="noopener">http://codeup.cn/contest.php?cid=100000577</a></p>
<h2 id="B-Hello-World-for-U"><a href="#B-Hello-World-for-U" class="headerlink" title="B Hello World for U"></a>B Hello World for U</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702191004238.png" data-fancybox="group" data-caption="image-20200702191004238" class="fancybox"><img alt="image-20200702191004238" style="zoom:50%;" title="image-20200702191004238" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702191004238.png" class="lazyload"></a>

<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给出一个长度为N字符串，将它按照U型输出。</p>
<p>设左边竖的一列为n1，右边竖的一列为n3，底部一排为n2，要求n1 = n3 = max { k| k &lt;= n2 for all 3 &lt;= n2 &lt;= N } 且n1 + n2 + n3 - 2 = N。</p>
<p>以样例为例，输入Helloworld!，N=11，n1=hell，n2=lowor，n3=rld!</p>
<h3 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h3><p>做题时以为n2是不确定的，n1 = n3 = max { k| k &lt;= n2 for all 3 &lt;= n2 &lt;= N } 表示k小于3 &lt;= n2 &lt;= N中所有n2的取值，所以认为n1=n3=3。</p>
<p>但题目的意思是n2可能的取值为[3, N]，n2在某个字符串情况下是确定的，k为max{ k | k&lt;=n2 }</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>n1 + n2 + n3 - 2 = N。</p>
<p>n1 = n3 = max { k| k &lt;= n2 }。即要让n1与n3尽可能大，则n1=n3=n2=(N+2)/3;</p>
<p>则得到字符串str时即可求出n1,n2,n3。</p>
<p>需按照每行输出，则每次需输出 str[i] 与 str[N-1-i] 以及二者之间的空格，最后输出底部的字母n3。</p>
<p>设side=n1=n2=n3=(N+2)/3，则之间的空格strip=n3-2=N-n1-n2=N-2*side。</p>
<p>前side-1次输出 str[i] 与 str[N-1-i] 以及二者之间的空格strip，最后输出n3。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAX];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> side, strip;</span><br><span class="line">        side = (len + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">        strip = len - <span class="number">2</span> * side;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; side - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strip; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, str[len - <span class="number">1</span> - i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = side - <span class="number">1</span>; i &lt; side + strip + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-沙漏图形"><a href="#D-沙漏图形" class="headerlink" title="D 沙漏图形"></a>D 沙漏图形</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702230127867.png" data-fancybox="group" data-caption="image-20200702230127867" class="fancybox"><img alt="image-20200702230127867" style="zoom:50%;" title="image-20200702230127867" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702230127867.png" class="lazyload"></a>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++) <span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>;j++) <span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>4.1 散列</title>
    <url>/2020/07/01/4.2%20%E6%95%A3%E5%88%97/</url>
    <content><![CDATA[<h1 id="4-2-散列"><a href="#4-2-散列" class="headerlink" title="4.2 散列"></a>4.2 散列</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000582" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000582</a></p>
<h2 id="B-分组统计"><a href="#B-分组统计" class="headerlink" title="B 分组统计"></a>B 分组统计</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705230755395.png" data-fancybox="group" data-caption="image-20200705230755395" class="fancybox"><img alt="image-20200705230755395" style="zoom:50%;" title="image-20200705230755395" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705230755395.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol>
<li><p>要定义两个数组 num、g 分别存储输入的两行数据（数字及其对应的分组序号）。</p>
</li>
<li><p>定义两个数组 ansn、ansg 来记录不重复的数字和分组序号。（通过exist数组来记录是否已存在）</p>
</li>
<li><p>定义数组 group[i][j] 记录数字i在j组中出现次数。</p>
</li>
<li><p>最后二重循环遍历ansn、ansg，按要求输出对应group[ ansn[i] ][ ansg[j] ]</p>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];  <span class="comment">//记录输入的所有数</span></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">105</span>];  <span class="comment">//记录所有组的序号</span></span><br><span class="line"><span class="keyword">int</span> ansn[<span class="number">105</span>], ansg[<span class="number">105</span>];  <span class="comment">//ansn记录不重复的数，ansg记录不重复的组</span></span><br><span class="line"><span class="keyword">bool</span> exist[<span class="number">10005</span>]; <span class="comment">//existn[i]记录数i是否已经存在与num数组中,记录组i是否已经存在与g数组中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(exist,<span class="number">0</span>,<span class="keyword">sizeof</span>(exist));</span><br><span class="line">            <span class="keyword">int</span> group[<span class="number">105</span>][<span class="number">10005</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">//group[i][j]表示第i组中j数出现次数</span></span><br><span class="line">            <span class="keyword">int</span> numlen = <span class="number">0</span>, glen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">                <span class="keyword">if</span> (!exist[num[i]]) &#123;</span><br><span class="line">                    ansn[numlen++] = num[i];</span><br><span class="line">                    exist[num[i]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memset</span>(exist,<span class="number">0</span>,<span class="keyword">sizeof</span>(exist));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;g[i]);</span><br><span class="line">                <span class="keyword">if</span> (!exist[g[i]]) &#123;</span><br><span class="line">                    ansg[glen++] = g[i];</span><br><span class="line">                    exist[g[i]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                group[g[i]][num[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            sort(ansn, ansn + numlen);</span><br><span class="line">            sort(ansg, ansg + glen);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; glen; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d=&#123;"</span>, ansg[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numlen; j++) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d=%d"</span>, ansn[j], group[ansg[i]][ansn[j]]);</span><br><span class="line">                    <span class="keyword">if</span> (j != numlen - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-String-Subtraction-20"><a href="#D-String-Subtraction-20" class="headerlink" title="D String Subtraction (20)"></a>D String Subtraction (20)</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705231731379.png" data-fancybox="group" data-caption="image-20200705231731379" class="fancybox"><img alt="image-20200705231731379" style="zoom:50%;" title="image-20200705231731379" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200705231731379.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给定字符串s1,s2（各字符数不超过10e4），除去s1中所有s2字符后输出。</p>
<p>⚠️s1、s2中可能包含空格。</p>
<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>s1、s2中可能包含空格，所以要用gets读入。</p>
<p>解题思路1：</p>
<ol>
<li><p>使用gets读入s1、s2后，赋值给string</p>
</li>
<li><p>遍历s1使用find函数查找s2中字符，并使用erase函数删除。</p>
</li>
</ol>
<p>解题思路2【使用hash】:</p>
<ol>
<li>使用gets读入s1、s2</li>
<li>定义hidden数组并初始化为false，hidden[i]=true表示要隐藏s1中的i字符（hidden只需200空间，因为所有字符ASCII在[0,127]之间）</li>
<li>遍历s2中字符i，hidden[i]=true</li>
<li>遍历s1中字符i，若hidden[i]=false，则输出此字符</li>
</ol>
<h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">while</span>(gets(temp)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s1=temp;</span><br><span class="line">        gets(temp);</span><br><span class="line">        s2=temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">            pos=s1.<span class="built_in">find</span>(s2[i]);</span><br><span class="line">            <span class="keyword">while</span>(pos!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                s1.erase(pos,<span class="number">1</span>);</span><br><span class="line">                pos=s1.<span class="built_in">find</span>(s2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10005</span>], s2[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (gets(s1) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">bool</span> hidden[<span class="number">200</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        gets(s2);</span><br><span class="line">        <span class="keyword">int</span> lens1 = <span class="built_in">strlen</span>(s1), lens2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens2; i++) &#123;</span><br><span class="line">            hidden[s2[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens1; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hidden[s1[i]]) <span class="built_in">printf</span>(<span class="string">"%c"</span>, s1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>4.3 递归</title>
    <url>/2020/07/01/4.3%20%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h1 id="4-3-递归"><a href="#4-3-递归" class="headerlink" title="4.3 递归"></a>4.3 递归</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000583" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000583</a></p>
<h2 id="C-神奇的口袋"><a href="#C-神奇的口袋" class="headerlink" title="C 神奇的口袋"></a>C 神奇的口袋</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706193903088.png" data-fancybox="group" data-caption="image-20200706193903088" class="fancybox"><img alt="image-20200706193903088" style="zoom:50%;" title="image-20200706193903088" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706193903088.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题据说也是个DP题目，参考<a href="https://blog.csdn.net/NeverWA/article/details/79873581" target="_blank" rel="noopener">https://blog.csdn.net/NeverWA/article/details/79873581</a></p>
<p>（等我学了DP再来看这道题🙃️）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">25</span>], count;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generatea</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> sum)</span> </span>&#123;  <span class="comment">//前index个物品总体积为sum</span></span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">40</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == n + <span class="number">1</span> || sum &gt; <span class="number">40</span>) <span class="keyword">return</span>;</span><br><span class="line">    generatea(index + <span class="number">1</span>, sum + a[index + <span class="number">1</span>]);  <span class="comment">//选第index+1个物品</span></span><br><span class="line">    generatea(index + <span class="number">1</span>, sum);  <span class="comment">//不选第index+1个物品</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        generatea(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-八皇后"><a href="#D-八皇后" class="headerlink" title="D 八皇后"></a>D 八皇后</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706194309945.png" data-fancybox="group" data-caption="image-20200706194309945" class="fancybox"><img alt="image-20200706194309945" style="zoom:50%;" title="image-20200706194309945" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200706194309945.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>将八皇后问题所有的解事先存储在数组a中，到时候查询即可。（hash）</p>
<p>⚠️这里比较特殊的是行号和列号取值范围都为1～8，所以在写for语句和取hastTable的范围时要特别注意。</p>
<p>求解把八皇后：</p>
<ol>
<li><p>int类型temp数组存储某种排序，temp[i] 中i表示行号、temp[i]表示列号【使用从temp[1]开始】；</p>
<p>hashTable存储第i列是否已经被选取；</p>
<p>c表示解决方案的个数。</p>
</li>
<li><p>index表示当前排列第index行的皇后，当index=n+1时，表示一个序列取完了。将之存储到a数组中。</p>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">92</span>];</span><br><span class="line"><span class="keyword">int</span> temp[n+<span class="number">1</span>], c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> hashTable[n + <span class="number">1</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[c++] = sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第index行的列号需遍历1～8的取值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hashTable[i]) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 遍历之前已经取的皇后的行号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; index; j++) &#123;</span><br><span class="line">                <span class="comment">// 第index行的列号为i，第j行的列号为temp[j]</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(index - j) == <span class="built_in">abs</span>(i - temp[j])) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                temp[index] = i;</span><br><span class="line">                hashTable[i] = <span class="literal">true</span>;</span><br><span class="line">                generateP(index + <span class="number">1</span>);</span><br><span class="line">                hashTable[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    generateP(<span class="number">1</span>);</span><br><span class="line">    sort(a,a+<span class="number">92</span>);</span><br><span class="line">    <span class="keyword">int</span> m,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[k<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>4.4 贪心</title>
    <url>/2020/07/01/4.4%20%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h1 id="4-4-贪心"><a href="#4-4-贪心" class="headerlink" title="4.4 贪心"></a>4.4 贪心</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000584" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000584</a></p>
<h2 id="C-To-Fill-or-Not-to-Fill"><a href="#C-To-Fill-or-Not-to-Fill" class="headerlink" title="C To Fill or Not to Fill"></a>C To Fill or Not to Fill</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171611896.png" data-fancybox="group" data-caption="image-20200707171611896" class="fancybox"><img alt="image-20200707171611896" style="zoom:50%;" title="image-20200707171611896" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171611896.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>从杭州开始开车，车内没有油。给定若干加油站信息，问能否驾驶汽车行驶到目的地。若能行驶到目的地，则计算最小花费。若不能，则最远能够行驶多长距离。</p>
<p>给出的第一行数据为，油箱大小Cmax、杭州到目的地距离D、每单位油能行驶的距离Davg、加油站数目N</p>
<p>接下来的N行为各加油站信息，每单位油的价格、加油站离杭州的距离</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><strong><u>这道题的注意点在于：</u></strong></p>
<ol>
<li><p>加油时要注意车内可能还有剩余的油。</p>
</li>
<li><p>若接下来能到达的加油站价格都比现在加油站价格高，不能直接到下一站！！（这里WA了半天），而是要到能到达的相对价格最低的加油站。</p>
<p>所以在for语句中要记录接下来能到达站点中最低价格的加油站。</p>
</li>
</ol>
<p>首先是审题,从杭州开往目的地,中间有n个加油站,一开始的车没有油,也就是起点必须是加油站,然后寻找加油量最少的站到达,并加油,最后到达目的地,如果两站之间隔得太远不能到,那就在能到的站加满油,走最大距离.</p>
<p><u><strong>整体分析：</strong></u></p>
<ol>
<li><p>因为车从杭州出发，给出的加油站信息时加油站离杭州的距离。则假设杭州在起点，d=0。</p>
</li>
<li><p>将所有加油站按距离排序,从距离为0的起点出发,并把终点标记为离初始点距离为d,油价为0的点(油价为零可以优先被选成终点)</p>
</li>
<li><p>因为车一开始没有油，则若没有距离为0的加油站，则不能开车，能行驶的距离为0【游戏结束🙃️】</p>
</li>
<li><p>若能顺利发车，则有以下情况：</p>
<ul>
<li><p>在当前加油站能到达的站中，能找到比当前站点油价更低的站点</p>
<p>则，在当前加油站加刚好能到此站点的油，因为到下一站能加的油更便宜【⚠️若车当前的有够这些，就不用加油了】</p>
</li>
<li><p>若不能找到比当前站点油价更低的站点，就找能到达的  <strong>*<u>价格相对最低</u>*</strong>  的站点</p>
<p>此时要加满油【因为当前站点的油比下一站点的油更便宜】</p>
</li>
<li><p>若根本找不到能到达的站点，则不能到达目的地了，则只能在当前加油站加满油能开多远开多远，故能行驶的最大距离为当前距离+油箱油量*每单位油能到达的距离【游戏结束🙈】</p>
</li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//假设杭州在起点0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">station</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> p;<span class="comment">//每升油价格</span></span><br><span class="line">    <span class="keyword">double</span> d;<span class="comment">//加油站起点位置</span></span><br><span class="line">&#125; s[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(station a, station b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.d != b.d) <span class="keyword">return</span> a.d &lt; b.d;  <span class="comment">//按照加油站距离从小到大排</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.p &lt; b.p;  <span class="comment">//若距离相同，按照油价从小到大排</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//贪心 每次都选择最好的</span></span><br><span class="line"><span class="comment">//如果没有第0站则直接到不了，X=0</span></span><br><span class="line"><span class="comment">//若排序后，遍历能到达的加油站，若有比当前站油价便宜的，就在当前站加刚刚好到此站点的油（注意可能原本车里有油）</span></span><br><span class="line"><span class="comment">//若没有比当前站便宜的，也要找一个相对价格最低的！！！（WA：不能直接到下一站），需在当前站加满油</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> capacity, distance, d_avg;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %d"</span>, &amp;capacity, &amp;distance, &amp;d_avg, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;s[i].p, &amp;s[i].d);</span><br><span class="line">        &#125;</span><br><span class="line">        s[n].p = <span class="number">0</span>, s[n].d = distance;</span><br><span class="line">        sort(s, s + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>].d != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = 0.00\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> curr_sNo = <span class="number">0</span>, next_sNo;</span><br><span class="line">        <span class="keyword">double</span> max_d = capacity * d_avg, curr_capacity = <span class="number">0</span>, sum_p = <span class="number">0</span>, temp_minp;</span><br><span class="line">        <span class="keyword">while</span> (curr_sNo &lt; n) &#123;</span><br><span class="line">            next_sNo = <span class="number">-1</span>; <span class="comment">//当前下一站点</span></span><br><span class="line">            temp_minp = <span class="number">0x3fffffff</span>;  <span class="comment">//当前能找到的最低油价</span></span><br><span class="line">            <span class="comment">// 找出能到达站中最低的油价</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = curr_sNo + <span class="number">1</span>; i &lt;= n &amp;&amp; s[i].d &lt;= s[curr_sNo].d + max_d; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i].p &lt; temp_minp) &#123;</span><br><span class="line">                    temp_minp = s[i].p;</span><br><span class="line">                    next_sNo = i;</span><br><span class="line">                    <span class="comment">//若能找到低于当前油价的加油站，直接选择这个</span></span><br><span class="line">                    <span class="keyword">if</span> (temp_minp &lt; s[curr_sNo].p) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没有能到达的站点，则在当前站点加满油</span></span><br><span class="line">            <span class="keyword">if</span> (next_sNo == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">double</span> need = (s[next_sNo].d - s[curr_sNo].d) / d_avg;</span><br><span class="line">                <span class="comment">//找到低于当前油价的加油站，则加刚好到达此加油站的油</span></span><br><span class="line">                <span class="keyword">if</span> (s[next_sNo].p &lt; s[curr_sNo].p) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (need &gt; curr_capacity) &#123;</span><br><span class="line">                        sum_p += (need - curr_capacity) * s[curr_sNo].p;</span><br><span class="line">                        curr_capacity = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        curr_capacity -= need;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//没找到低于当前油价的加油站，则在当前加站满油到目前能到达的最低价格油站next_sNo</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum_p += (capacity - curr_capacity) * s[curr_sNo].p;</span><br><span class="line">                    curr_capacity = capacity - need;</span><br><span class="line">                &#125;</span><br><span class="line">                curr_sNo = next_sNo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curr_sNo &lt; n) <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2f\n"</span>, s[curr_sNo].d + max_d);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, sum_p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="F-迷瘴"><a href="#F-迷瘴" class="headerlink" title="F 迷瘴"></a>F 迷瘴</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171855269.png" data-fancybox="group" data-caption="image-20200707171855269" class="fancybox"><img alt="image-20200707171855269" style="zoom:50%;" title="image-20200707171855269" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200707171855269.png" class="lazyload"></a>



<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>本题WA点在于计算当前液体和另一瓶液体混合时，当前液体的体积不一定为V。</p>
<p>WA时认为既然每瓶液体的体积都相同为V，则混合后浓度为二者浓度之和/2： tempp = (tempp + p[i]) / 2; 忽略了当前液体可能是混合很多次之后的，即当前液体体积不一定为V。故正确计算为： tempp = (tempp * ansv + p[i] * v) / (ansv + v);</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> n, v, w, p[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">    <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p, p + n);</span><br><span class="line">        <span class="keyword">if</span> (p[<span class="number">0</span>] &gt; w) <span class="built_in">printf</span>(<span class="string">"0 0.00\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i, ansv = v;</span><br><span class="line">            <span class="keyword">double</span> tempp = p[<span class="number">0</span>], ansp = p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                tempp = (tempp * ansv + p[i] * v) / (ansv + v);  <span class="comment">//计算浓度要当心！！我以为浓度都是相加/2但是容积不总是相等</span></span><br><span class="line">                <span class="keyword">if</span> (tempp &gt; w) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ansp = tempp;</span><br><span class="line">                    ansv += v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %.2f\n"</span>, ansv, ansp / <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>5.1 简单数学</title>
    <url>/2020/07/01/5.1%20%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="5-1-简单数学"><a href="#5-1-简单数学" class="headerlink" title="5.1 简单数学"></a>5.1 简单数学</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000588" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000588</a></p>
<h2 id="M-鸡兔同笼"><a href="#M-鸡兔同笼" class="headerlink" title="M 鸡兔同笼"></a>M 鸡兔同笼</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200712022144670.png" data-fancybox="group" data-caption="image-20200712022144670" class="fancybox"><img alt="image-20200712022144670" style="zoom:50%;" title="image-20200712022144670" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200712022144670.png" class="lazyload"></a>



<h3 id="代码1（暴力）"><a href="#代码1（暴力）" class="headerlink" title="代码1（暴力）"></a>代码1（暴力）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">20000</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n / <span class="number">2</span>; x++) &#123;  <span class="comment">//x为鸡的数目</span></span><br><span class="line">                <span class="keyword">int</span> y = (n - <span class="number">2</span> * x) / <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">2</span> * x + <span class="number">4</span> * y == n) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = x + y;</span><br><span class="line">                    <span class="keyword">if</span> (temp &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = temp;</span><br><span class="line">                    <span class="keyword">if</span> (temp &lt; <span class="built_in">min</span>) <span class="built_in">min</span> = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">min</span> == <span class="number">20000</span>) <span class="built_in">min</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="built_in">min</span>, <span class="built_in">max</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2（根据“提示”）"><a href="#代码2（根据“提示”）" class="headerlink" title="代码2（根据“提示”）"></a>代码2（根据“提示”）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n / <span class="number">4</span>, n / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n / <span class="number">4</span> + <span class="number">1</span>, n / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>5.2 最大公约数与最小公倍数</title>
    <url>/2020/07/01/5.2%20%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</url>
    <content><![CDATA[<h1 id="5-2-最大公约数与最小公倍数"><a href="#5-2-最大公约数与最小公倍数" class="headerlink" title="5.2 最大公约数与最小公倍数"></a>5.2 最大公约数与最小公倍数</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000589" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000589</a></p>
<h2 id="A-Least-Common-Multiple"><a href="#A-Least-Common-Multiple" class="headerlink" title="A Least Common Multiple"></a>A Least Common Multiple</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200713194040922.png" data-fancybox="group" data-caption="image-20200713194040922" class="fancybox"><img alt="image-20200713194040922" style="zoom:50%;" title="image-20200713194040922" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200713194040922.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>求n个数的最小公倍数。</p>
<p>第一行输入m表示样例数目，接下来m行为各个具体样例；</p>
<p>第二行输入n表示此样例中数字个数，接下来n个为具体数字。需求这n个数的最小公倍数。</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>求n个数的最小公倍数——前两个数a、b求最小公倍数c，再将c与第三个数d求最小公倍数，······</p>
<p>Small Tips：为了代码书写方便，且避免只有一个数的情况，可预存一个数1，任何数与1的最小公倍数都是这个数本身。</p>
<p>⚠️n可能为1。此时最小公倍数即输入的那个唯一的数。</p>
<h3 id="代码1（自己写的）"><a href="#代码1（自己写的）" class="headerlink" title="代码1（自己写的）"></a>代码1（自己写的）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">            a = a / gcd(a, b) * b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                a = a / gcd(a, b) * b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2（根据tips）"><a href="#代码2（根据tips）" class="headerlink" title="代码2（根据tips）"></a>代码2（根据tips）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">            a = a / gcd(a, b) * b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>5.4 素数</title>
    <url>/2020/07/01/5.4%20%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<h1 id="5-4-素数"><a href="#5-4-素数" class="headerlink" title="5.4 素数"></a>5.4 素数</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000591" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000591</a></p>
<h2 id="C-Goldbach’s-Conjecture"><a href="#C-Goldbach’s-Conjecture" class="headerlink" title="C  Goldbach’s Conjecture"></a>C  Goldbach’s Conjecture</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200717171033608.png" data-fancybox="group" data-caption="image-20200717171033608" class="fancybox"><img alt="image-20200717171033608" style="zoom:50%;" title="image-20200717171033608" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200717171033608.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>哥德巴赫猜想：对于任何大于或等于4的偶数n，至少存在一对素数p1和p2，使得n = p1 + p2。</p>
<p>现需编写程序，对输入的偶数n，输出满足猜想条件的所有素数对的数量。</p>
<p>每个输入行中都有一个整数。您可以假定每个整数都是偶数，并且大于或等于4且小于2 ^ 15。输入的结尾由数字0表示。</p>
<p>第一行输入m表示样例数目，接下来m行为各个具体样例；</p>
<p>第二行输入n表示此样例中数字个数，接下来n个为具体数字。需求这n个数的最小公倍数。</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>1⃣️ 第一步肯定打表（素数表），因为输入数n范围[4, 32768)，所以为保险，用埃氏筛法进行打表。【O(nloglogn)】</p>
<ul>
<li>因为输入数最大为1&lt;&lt;15，故素数表最大容量定为1&lt;&lt;15</li>
</ul>
<p>2⃣️ 首先想到的是通过暴力方法，采用双重循环遍历所有素数，将两个素数相加，看是不是等于n，是则ans++。【O(n2)】</p>
<p>方法二：💡 n = p1 + p2，则应一个数&gt;=n/2，一个数&lt;=n/2，故只需一重循环遍历所有&lt;=n/2的素数p1，若n-p1也为素数，则ans++。【O(n)】</p>
<p>（而因为埃氏筛法bool数组p，刚好可通过O(1)复杂度判断 n-p1 是否为素数😁）</p>
<h3 id="代码1（暴力）"><a href="#代码1（暴力）" class="headerlink" title="代码1（暴力）"></a>代码1（暴力）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i) &#123;</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; pNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prime[i] + prime[j] == n) ans++;</span><br><span class="line">                <span class="keyword">if</span> (prime[j] &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prime[i] &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="代码2（思考后简化复杂度💡）"><a href="#代码2（思考后简化复杂度💡）" class="headerlink" title="代码2（思考后简化复杂度💡）"></a>代码2（思考后简化复杂度💡）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i) &#123;</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p[n - prime[i]]) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>5.5 质因数分解</title>
    <url>/2020/07/01/5.5%20%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="5-5-质因数分解"><a href="#5-5-质因数分解" class="headerlink" title="5.5 质因数分解"></a>5.5 质因数分解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000592" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000592</a></p>
<h2 id="E-完数与盈数"><a href="#E-完数与盈数" class="headerlink" title="E 完数与盈数"></a>E 完数与盈数</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163149588.png" data-fancybox="group" data-caption="image-20200718163149588" class="fancybox"><img alt="image-20200718163149588" style="zoom:50%;" title="image-20200718163149588" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163149588.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️完美数的定义是其不等于本身的因子之和等于其本身，也就是说 <strong><u>完美数所有因子和等于本身的2倍</u></strong>。</p>
<p>大体解题思路：</p>
<ol>
<li>要得到一个数n的各因子之和，要先得到n的所有质因数。则将问题转换为求解n的所有质因数</li>
</ol>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163549613.png" data-fancybox="group" data-caption="image-20200718163549613" class="fancybox"><img alt="image-20200718163549613" style="zoom:50%;" title="image-20200718163549613" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200718163549613.png" class="lazyload"></a>

<ol start="2">
<li>要求解n的质因数，首先要对素数打表，此处为尽可能节约时间，采用埃式筛法【O(nloglogn)】</li>
</ol>
<p>PS：若只需求一个数的所有因子个数，则不用写出结构体factor，只需统计所有cnt的个数即可（可以简化代码）</p>
<h4 id="对代码的解释"><a href="#对代码的解释" class="headerlink" title="对代码的解释"></a>对代码的解释</h4><ol>
<li><p>定义prime记录所有的素数，pNum为素数个数；bool型数组p中 p[i]表示i是否为素数，false为是，true为否。</p>
<p>【此为埃式筛法的内容】</p>
</li>
<li><p>factor表示一个质因子，x为质因子具体数值，cnt为此质因子的个数，求解质因子步骤大致为：</p>
<ul>
<li>枚举1～sqrt(n)范围内的所有素数p，判断p是否为n的因子<ul>
<li>若是，则给fac数组中添加质因子p，并初始化个数为0；然后若p还是n的因子，则让n不断除以p并cnt++，直到p不再是n的因子</li>
</ul>
</li>
<li>若👆步骤结束后n仍大于1，表明n有且仅有一个大于sqrt(n)的质因子（可能为n本身），将之加入fac数组并令个数为1</li>
</ul>
</li>
<li><p>求解完质因子后，可通过公式算出n的所有因子之和sum。</p>
</li>
<li><p>若sum = n + n，则为完数；若sum &gt; n + n，则为盈数。</p>
<p>【用perfect数组记录所有完数，len1为完数个数；用notpf数组记录所有盈数，len2位盈数个数。】</p>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">int</span> prime[MAX], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[MAX] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> perfect[MAX], len1 = <span class="number">0</span>, notpf[MAX], len2 = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factor</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, cnt;</span><br><span class="line">&#125; fac[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> fNum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i)</span><br><span class="line">                p[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_factor_sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    fNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pNum &amp;&amp; prime[i] &lt;= sqr; i++) &#123;  <span class="comment">//⚠️一定是&lt;=sqr,且sqr的数求解要写外面，因为循环中n一直在变</span></span><br><span class="line">        <span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            fac[fNum].x = prime[i];</span><br><span class="line">            fac[fNum].cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                fac[fNum].cnt++;</span><br><span class="line">                n /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            fNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        fac[fNum].x = n;</span><br><span class="line">        fac[fNum].cnt = <span class="number">1</span>;</span><br><span class="line">        fNum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fNum; i++) &#123;</span><br><span class="line">        sum *= (<span class="keyword">int</span>) (<span class="number">1</span> - <span class="built_in">pow</span>(fac[i].x, fac[i].cnt + <span class="number">1</span>)) / (<span class="number">1</span> - fac[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_perfect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_prime();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = get_factor_sum(i);</span><br><span class="line">        <span class="keyword">if</span> (temp == i + i) perfect[len1++] = i;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; i + i) notpf[len2++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    find_perfect();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"E: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, perfect[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"G: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, notpf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>5.6 大整数运算</title>
    <url>/2020/07/01/5.6%20%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="5-6-大整数运算"><a href="#5-6-大整数运算" class="headerlink" title="5.6 大整数运算"></a>5.6 大整数运算</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000593" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000593</a></p>
<h2 id="A-a-b-🌟"><a href="#A-a-b-🌟" class="headerlink" title="A a+b 🌟"></a>A a+b 🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719181350693.png" data-fancybox="group" data-caption="image-20200719181350693" class="fancybox"><img alt="image-20200719181350693" style="zoom:50%;" title="image-20200719181350693" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719181350693.png" class="lazyload"></a>



<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>⚠️ 这里a与b不一定都是正数，而且位数在1000以下，所以需要大数运算，需要写高精度加法与高精度减法。【PS 加法减法中的参数都为正数】</p>
<ul>
<li>a正、b正 —— add(a, b)</li>
<li>a正、b负<ul>
<li>a &gt;= |b| sub(a, b)</li>
<li>a   &lt; |b| 输出负号，sub(b, a)</li>
</ul>
</li>
<li>a负、b正<ul>
<li>b &gt;= |a| sub(b, a)</li>
<li>b   &lt; |a| 输出负号，sub(a, b)</li>
</ul>
</li>
<li>a负、b负</li>
</ul>
<h5 id="大致解题思路："><a href="#大致解题思路：" class="headerlink" title="大致解题思路："></a>大致解题思路：</h5><ol>
<li><p>使用char数组sa、sb接受输入的数据</p>
</li>
<li><p>判断sa、sb是否有负号sa[0]==’ - ‘，若有负号则对应flaga=false / flagb=false，<strong><u>且指向sa、sb的指针pa++ / pb++</u></strong></p>
<p>【💡让指针++后能很方便的通过change(pa)/change(pb)将原本含负号的char数组转换为绝对值的bign，而不用重新将char数组赋值给另一个数组】🐂🍺</p>
</li>
<li><p>使用change函数将之倒序转换为bign（大整数的结构体）</p>
</li>
<li><p>编写cmp函数，用于判断大数a、b之间的大小</p>
</li>
<li><p>根据flaga、flagb及cmp结果，判断是否输出负号，以及该使用add还是sub函数，最后调用display函数输出结果</p>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    bign() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">        a.d[i] = s[a.len - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若a&gt;=b return true;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.len &gt; b.len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.len &lt; b.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.d[i] &gt; b.d[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.d[i] &lt; b.d[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">add</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len || i &lt; b.len; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a.d[i] + b.d[i] + carry;</span><br><span class="line">        c.d[c.len++] = temp % <span class="number">10</span>;</span><br><span class="line">        carry = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">        c.d[c.len++] = carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前提a&gt;b</span></span><br><span class="line"><span class="function">bign <span class="title">sub</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len || i &lt; b.len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.d[i] &lt; b.d[i]) &#123;</span><br><span class="line">            a.d[i] += <span class="number">10</span>;</span><br><span class="line">            a.d[i+<span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.d[c.len++] = a.d[i] - b.d[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c.d[c.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; c.len - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        c.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> sa[<span class="number">1005</span>], sb[<span class="number">1005</span>];</span><br><span class="line">    bign a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, sa, sb) != EOF) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flaga = <span class="literal">true</span>, flagb = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">char</span> *pa = sa, *pb = sb;</span><br><span class="line">        <span class="keyword">if</span> (sa[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">            flaga = <span class="literal">false</span>;</span><br><span class="line">            pa++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">            flagb = <span class="literal">false</span>;</span><br><span class="line">            pb++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处a、b是绝对值</span></span><br><span class="line">        a = change(pa);</span><br><span class="line">        b = change(pb);</span><br><span class="line">        <span class="keyword">if</span> (flaga &amp;&amp; flagb) <span class="built_in">display</span>(add(a, b));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flaga) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cmp(a, b)) &#123;</span><br><span class="line">                <span class="built_in">display</span>(sub(a, b)); <span class="comment">//a正，b负，a &gt;= |b|</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">                <span class="built_in">display</span>(sub(b, a));  <span class="comment">//a正，b负，a &lt; |b|</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flagb) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cmp(b, a)) &#123;</span><br><span class="line">                <span class="built_in">display</span>(sub(b, a)); <span class="comment">//a负，b正，b &gt;= |a|</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">                <span class="built_in">display</span>(sub(a, b));  <span class="comment">//a负，b正，b &lt; |a|</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">            <span class="built_in">display</span>(add(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="C-浮点数加法-🌟🌟"><a href="#C-浮点数加法-🌟🌟" class="headerlink" title="C 浮点数加法 🌟🌟"></a>C 浮点数加法 🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719183009053.png" data-fancybox="group" data-caption="image-20200719183009053" class="fancybox"><img alt="image-20200719183009053" style="zoom:50%;" title="image-20200719183009053" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719183009053.png" class="lazyload"></a>

<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><ol>
<li><p>构造结构体bign，用于存储带浮点数的非负数。（题目规定小数部分一定存在）</p>
</li>
<li><p>用char数组接收输入的数据sa、sb，使用change函数转换为bign；注意要逆序，整数数组的高位对应数据的高位。</p>
<ul>
<li>例如4543.5435+43.25，我们转换为bign相当于a=3454.5345，b=34.52</li>
</ul>
</li>
<li><p>编写add函数实现含浮点数的大数加法</p>
<ol>
<li><p><strong><u>💡浮点数相加</u></strong>：因为例如4543.5435+43.25，浮点数相加则5435中的35不变，54与43相加。所以我们要保留浮点数部分过长的数据，然后对相同长度的部分进行加法。如 a的小数部分q数组为5345，b的小数部分q数组为52，则53照抄，接下来使用加法处理45与52。</p>
<ul>
<li><p>所以为了方便👆操作，我们让a的小数部分lenq一定长于b的小数部分lenq，否则就交换二者</p>
</li>
<li><p>由👆的思想可得，前a.lenq - b.lenq部分，c.q[c.lenq++] = a.q[i]; </p>
<p>后面的部分temp = a.q[i] + b.q[i - a.lenq + b.lenq] + carry; c.p[c.lenp++] = temp % 10; carry = temp / 10;</p>
</li>
<li><p>因为加法，最多增加一位，则若carry最大会为1，则表示浮点数部分要加1到整数部分。</p>
</li>
</ul>
</li>
<li><p>整数相加</p>
<ul>
<li>标准大整数加法，不再复述。</li>
</ul>
</li>
</ol>
</li>
<li><p>编写display函数输出bign</p>
<ul>
<li>注意先逆序输出整数部分，再逆序输出小数部分</li>
</ul>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">105</span>]; <span class="comment">//整数部分</span></span><br><span class="line">    <span class="keyword">int</span> q[<span class="number">105</span>]; <span class="comment">//小数部分</span></span><br><span class="line">    <span class="keyword">int</span> lenp;  <span class="comment">//整数部分长度</span></span><br><span class="line">    <span class="keyword">int</span> lenq;  <span class="comment">//小数部分长度</span></span><br><span class="line">    bign() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">        <span class="built_in">memset</span>(q, <span class="number">0</span>, <span class="keyword">sizeof</span>(q));</span><br><span class="line">        lenp = <span class="number">0</span>;</span><br><span class="line">        lenq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[len - <span class="number">1</span> - i] != <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) a.q[a.lenq++] = s[len - <span class="number">1</span> - i] - <span class="string">'0'</span>; <span class="comment">//小数部分</span></span><br><span class="line">            <span class="keyword">else</span> a.p[a.lenp++] = s[len - <span class="number">1</span> - i] - <span class="string">'0'</span>;  <span class="comment">//整数部分</span></span><br><span class="line">        &#125; <span class="keyword">else</span> flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一定为a的小数部分&gt;=b的小数部分</span></span><br><span class="line"><span class="function">bign <span class="title">add</span><span class="params">(bign a, bign b)</span> </span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.lenq &lt; b.lenq) &#123;</span><br><span class="line">        bign temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//a的小数部分比b多，则一开始的数位都为a，后来为a+b</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.lenq; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; a.lenq - b.lenq) c.q[c.lenq++] = a.q[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a.q[i] + b.q[i - a.lenq + b.lenq] + carry;</span><br><span class="line">            c.q[c.lenq++] = temp % <span class="number">10</span>;</span><br><span class="line">            carry = temp / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若小数部分相加后多一位，则carry=1，只需要在整数部分加上就ok</span></span><br><span class="line">    <span class="comment">//整数部分的加法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.lenp || i &lt; b.lenp; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a.p[i] + b.p[i] + carry;</span><br><span class="line">        c.p[c.lenp++] = temp % <span class="number">10</span>;</span><br><span class="line">        carry = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">        c.p[c.lenp++] = carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.lenp - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.lenq; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.q[i] == <span class="number">0</span>) pos++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.lenq - <span class="number">1</span>; i &gt;=pos; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> sa[<span class="number">105</span>], sb[<span class="number">105</span>];</span><br><span class="line">    bign a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, sa, sb);</span><br><span class="line">            a = change(sa);</span><br><span class="line">            b = change(sb);</span><br><span class="line">            <span class="built_in">display</span>(add(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="D-进制转换-🌟🌟🌟"><a href="#D-进制转换-🌟🌟🌟" class="headerlink" title="D 进制转换 🌟🌟🌟"></a>D 进制转换 🌟🌟🌟</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719184632664.png" data-fancybox="group" data-caption="image-20200719184632664" class="fancybox"><img alt="image-20200719184632664" style="zoom:50%;" title="image-20200719184632664" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719184632664.png" class="lazyload"></a>



<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>最初的想法是将m进制转换为10进制，在由10进制转换为n进制，但是这样太麻烦，baidu后发现可以直接做😭。</p>
<ol>
<li><p>m进制转换为n进制，采用除商倒取余的方法。</p>
<ul>
<li><p><strong><u>区别在于除商的时候，因为原来bign a都默认10进制，所以某步的余数r=r*10+a.d[i]；但是这里bign a为m进制，所以需要r=r*m+a.d[i]</u></strong></p>
</li>
<li><p>搞定如何除商之后，就是不断循环a除商的过程，记录下每一步的余数，直到a=0</p>
<p>【此时a.len=1且a.d[0]=0，故循环条件是while (a.len != 1 || a.d[0] != 0) 】</p>
</li>
</ul>
</li>
</ol>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">10005</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    bign() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[a.len - <span class="number">1</span> - i] &gt;= <span class="string">'A'</span>) a.d[i] = s[a.len - <span class="number">1</span> - i] - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> a.d[i] = s[a.len - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m进制转化为n进制 的除商步骤 (则只需要每次的余数*m，最后除n)</span></span><br><span class="line"><span class="function">bign <span class="title">div</span><span class="params">(bign a, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    c.len = a.len;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        r = r * m + a.d[i];</span><br><span class="line">        <span class="keyword">if</span> (r &lt; n) c.d[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c.d[i] = r / n;  <span class="comment">//⚠️别跟加减法一样写成r % n了！！！！</span></span><br><span class="line">            r %= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c.d[c.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; c.len - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        c.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">m_to_n</span><span class="params">(bign a, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    bign r;</span><br><span class="line">    <span class="keyword">while</span> (a.len != <span class="number">1</span> || a.d[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        a = div(a, m, n, temp);</span><br><span class="line">        r.d[r.len++] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒取余刚好和逆序输出相同，所以display函数其实没有变，只是10-要变为a-</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(bign r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r.d[i] &gt;= <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="string">'a'</span> + r.d[i] - <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, r.d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10005</span>];</span><br><span class="line">    bign a, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        a = change(s);</span><br><span class="line">        <span class="built_in">display</span>(m_to_n(a, m, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="F-10进制-VS-2进制"><a href="#F-10进制-VS-2进制" class="headerlink" title="F 10进制 VS 2进制"></a>F 10进制 VS 2进制</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719190226038.png" data-fancybox="group" data-caption="image-20200719190226038" class="fancybox"><img alt="image-20200719190226038" style="zoom:50%;" title="image-20200719190226038" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200719190226038.png" class="lazyload"></a>



<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>这道题其实就是D进制转换的扩展，那道题做了，这道题看看就会了。再写一个reverse函数掉个顺序就行。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    bign() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        a.d[i] = s[a.len - <span class="number">1</span> - i]-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m进制转换为n进制</span></span><br><span class="line"><span class="function">bign <span class="title">div</span><span class="params">(bign a, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    c.len = a.len;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        r = r * m + a.d[i];</span><br><span class="line">        <span class="keyword">if</span> (r &lt; n) c.d[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c.d[i] = r / n;</span><br><span class="line">            r %= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c.d[c.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; c.len - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        c.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">m_to_n</span><span class="params">(bign a, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    bign r;</span><br><span class="line">    <span class="keyword">while</span> (a.len != <span class="number">1</span> || a.d[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        a = div(a, m, n, temp);</span><br><span class="line">        r.d[r.len++] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">reverse</span><span class="params">(bign a)</span> </span>&#123;</span><br><span class="line">    bign b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b.d[b.len++] = a.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line">    bign a;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) != EOF) &#123;</span><br><span class="line">        a = change(s);</span><br><span class="line">        a = m_to_n(a, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">        a = reverse(a);</span><br><span class="line">        a = m_to_n(a, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">display</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>6.1 vector的常见用法详解</title>
    <url>/2020/07/01/6.1%20vector/</url>
    <content><![CDATA[<h1 id="6-1-vector的常见用法详解"><a href="#6-1-vector的常见用法详解" class="headerlink" title="6.1 vector的常见用法详解"></a>6.1 vector的常见用法详解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000596" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000596</a></p>
<h2 id="A-Course-List-for-Student-25"><a href="#A-Course-List-for-Student-25" class="headerlink" title="A  Course List for Student (25)"></a>A  Course List for Student (25)</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200728230529306.png" data-fancybox="group" data-caption="image-20200728230529306" class="fancybox"><img alt="image-20200728230529306" style="zoom:50%;" title="image-20200728230529306" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200728230529306.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>现给出各个课程的学生列表，要求输出指定学生的课表。</p>
<p>输入第一行n、k分别表示要输出课表的指定学生个数，k表示课程总数目。</p>
<p>接下来为k个课程的相应信息，第一行为课程编号和此课程的所有学生，下一行为各学生名称。</p>
<p>最后一行为输出课表的n个学生姓名。</p>
<p>输出格式：学生姓名、其课程数目、各课程编号【按照递增顺序输出】</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>因为每个学生的课程数目不定，所以可采用不定长数组vector，创建一个学生vector数组，每个元素存储对应学生的所有课程编号，则到时候输出就非常方便。如果学生姓名能作为vector数组的序号就好了。</p>
<p>所以我们意图将学生姓名转换为int型，此处可参考【字符串hash】的做法，因为学生姓名的格式是确定的（前三位大写字母，第四位数字），所以我们将前三位做26进制转10进制运算，最后直接加上第四位数字，这样就将学生姓名转换为int型，而且我们可以很方便的通过O(1)操作就找到学生姓名对应的vector元素。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span> * <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stu[MAX];</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面26进制转换为10进制 题目规定输入的字母一定大写，再加上最后一位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_10</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        ans = ans * <span class="number">26</span> + (s[i] - <span class="string">'A'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * <span class="number">10</span> + (s[<span class="number">3</span>] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">int</span> index, num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;index, &amp;num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br><span class="line">                <span class="keyword">int</span> t = to_10(name);</span><br><span class="line">                stu[t].push_back(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br><span class="line">            <span class="keyword">int</span> t = to_10(name);</span><br><span class="line">            sort(stu[t].<span class="built_in">begin</span>(), stu[t].<span class="built_in">end</span>());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d"</span>, name, (<span class="keyword">int</span>) stu[t].<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = stu[t].<span class="built_in">begin</span>(); it != stu[t].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, *it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="B-Student-List-for-Course-25"><a href="#B-Student-List-for-Course-25" class="headerlink" title="B Student List for Course (25)"></a>B Student List for Course (25)</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200728232012033.png" data-fancybox="group" data-caption="image-20200728232012033" class="fancybox"><img alt="image-20200728232012033" style="zoom:50%;" title="image-20200728232012033" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200728232012033.png" class="lazyload"></a>

<h3 id="题目释义-1"><a href="#题目释义-1" class="headerlink" title="题目释义"></a>题目释义</h3><p>现给出各个学生的课表，要求输出各个课程的学生姓名。</p>
<p>输入第一行n、k分别表示学生个数，k表示课程总数目。</p>
<p>接下来的n行为各学生的信息——学生姓名、其选择课程数目、各课程编号。</p>
<p>各个课程的输出格式：</p>
<p>第一行为课程编号、课程学生总数m</p>
<p>接下来m行为各学生姓名【按照递增顺序给出】</p>
<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>与A题思路类似，我们使用vector&lt;string&gt;数组存储各课程的所有学生姓名，我们意图以课程编号作为数组索引。</p>
<p>所以此处更简单，直接是整数hash，不用涉及到字符串hash。</p>
<p>⚠️</p>
<ol>
<li><p>定义 <strong>vector&lt;string&gt; s[SIZE]</strong>，而不是vector&lt;char *&gt; s[SIZE]【每个存储的是char指针，最后输出的所有值相同】</p>
<ul>
<li><a href="https://www.cnblogs.com/Daringoo/p/5380010.html" target="_blank" rel="noopener">https://www.cnblogs.com/Daringoo/p/5380010.html</a></li>
</ul>
</li>
<li><p>vector&lt;char [5]&gt; s[SIZE]不符合语法</p>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; course[<span class="number">2505</span>];</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> num, temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">                course[temp].push_back(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %lu\n"</span>, i, course[i].<span class="built_in">size</span>());</span><br><span class="line">            sort(course[i].<span class="built_in">begin</span>(), course[i].<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator it = course[i].<span class="built_in">begin</span>(); it != course[i].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>6.4 map的常见用法详解</title>
    <url>/2020/07/01/6.4%20map/</url>
    <content><![CDATA[<h1 id="6-4-map的常见用法详解"><a href="#6-4-map的常见用法详解" class="headerlink" title="6.4 map的常见用法详解"></a>6.4 map的常见用法详解</h1><p><a href="http://codeup.hustoj.com/contest.php?cid=100000599" target="_blank" rel="noopener">http://codeup.hustoj.com/contest.php?cid=100000599</a></p>
<h2 id="A-Speech-Patterns-25"><a href="#A-Speech-Patterns-25" class="headerlink" title="A  Speech Patterns (25)"></a>A  Speech Patterns (25)</h2><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801172139893.png" data-fancybox="group" data-caption="image-20200801172139893" class="fancybox"><img alt="image-20200801172139893" style="zoom:50%;" title="image-20200801172139893" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200801172139893.png" class="lazyload"></a>



<h3 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h3><p>给定字符串，输出其中出现频率最高的单词及出现次数。【忽略字符大小写，输出一律大写】</p>
<p>若有频率一样高的单词，则根据字典序输出最小的那个单词。</p>
<p>⚠️单词包括字母和数字，遇到非字母和数字或行尾时即代表单词的结束。</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>要读入一行，可使用gets然后赋值给string，或直接getline(cin, s);</p>
<p>用map建立string到int的映射，因为map键不重复且自动从小到大排序，故无需在意频率相同时输出的问题。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">alphanumerical</span><span class="params">(<span class="keyword">char</span> &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="string">'A'</span> &amp;&amp; a &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">        a += <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="string">'a'</span> &amp;&amp; a &lt;= <span class="string">'z'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="string">'0'</span> &amp;&amp; a &lt;= <span class="string">'9'</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">1048600</span>];</span><br><span class="line">    <span class="built_in">string</span> s, subs;</span><br><span class="line">    <span class="keyword">while</span> (gets(str)) &#123;  <span class="comment">//或getline(cin,s);</span></span><br><span class="line">        s = str;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> temp = alphanumerical(s[i]);</span><br><span class="line">            <span class="keyword">if</span> (temp) subs += s[i];</span><br><span class="line">            <span class="keyword">if</span> (!temp || i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (subs.length() != <span class="number">0</span>) mp[subs]++;</span><br><span class="line">                subs.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;second &gt; temp) &#123;</span><br><span class="line">                ans = it-&gt;first;</span><br><span class="line">                temp = it-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, ans.c_str(), temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编程——知识点笔记</title>
    <url>/2020/04/22/python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章 变量和简单数据类型"></a>第二章 变量和简单数据类型</h1><h2 id="2-1-变量的命名"><a href="#2-1-变量的命名" class="headerlink" title="2.1 变量的命名"></a>2.1 变量的命名</h2><ol>
<li><p>由字母、数字、下划线组成，不能由数字开头，区分大小写</p>
<ul>
<li>（目前，应用小写的变量名，虽然使用大写字母不会导致错误）</li>
</ul>
</li>
<li><p>变量名最好简短、具有描述性</p>
</li>
</ol>
<h2 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2 字符串"></a>2.2 字符串</h2><p>​            —由单引号/双引号括起</p>
<ol>
<li><p>因此，可在字符串中灵活使用””和’’</p>
</li>
<li><p>空白：任何非打印字符，如空格、制表符、换行符。 </p>
<ul>
<li><p>在字符串中添加制表符：\t </p>
</li>
<li><p>添加换行符：\n </p>
</li>
<li><p>字符串“\n\t”表示换到下一行并在下一行开头添加制表符</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-2-1-修改字符串大小写"><a href="#2-2-1-修改字符串大小写" class="headerlink" title="2.2.1 修改字符串大小写"></a>2.2.1 修改字符串大小写</h3><ol>
<li>每个单词首字母大写：title()</li>
<li>字符串全大写：upper()</li>
<li>字符串全小写：lower()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())   <span class="comment"># Ada Lovelace</span></span><br><span class="line">print(name.upper())   <span class="comment"># ADA LOVELACE</span></span><br><span class="line">print(name.lower())   <span class="comment"># ada lovelace</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-2-合并（拼接）字符串"><a href="#2-2-2-合并（拼接）字符串" class="headerlink" title="2.2.2 合并（拼接）字符串"></a>2.2.2 合并（拼接）字符串</h3><p>​            —使用加号（+）合并字符串[拼接]</p>
<h3 id="2-2-3-删除空白"><a href="#2-2-3-删除空白" class="headerlink" title="2.2.3 删除空白"></a>2.2.3 删除空白</h3><p>（空白符：空格、换行符、制表符等）</p>
<ol>
<li>删除字符串首端空白：lstrip()</li>
<li>删除字符串尾端空白：rstrip()</li>
<li>删除字符串首尾两端空白：strip()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_language=<span class="string">'  python  '</span></span><br><span class="line">print(favorite_language.lstrip())   <span class="comment"># 'python  '</span></span><br><span class="line">print(favorite_language.rstrip())   <span class="comment">#'  python'</span></span><br><span class="line">print(favorite_language.strip())    <span class="comment">#'python'</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-4-字符替换-——-replace"><a href="#2-2-4-字符替换-——-replace" class="headerlink" title="2.2.4 字符替换 —— replace()"></a>2.2.4 字符替换 —— replace()</h3><p>将字符串中的特定单词string1替换为另一个单词string2 —— replace(string1, string2, [count])</p>
<ul>
<li>可添加形参count，不写默认<u><strong>都替换</strong></u>；否则表示最多替换前count个</li>
<li>函数返回一个新的copy</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">"I really like dogs. My dog names Jack."</span></span><br><span class="line">message = message.replace(<span class="string">'dog'</span>, <span class="string">'cat'</span>)</span><br><span class="line">print(message)  <span class="comment"># I really like cats. My cat names Jack.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-5-字符串分割-——-split"><a href="#2-2-5-字符串分割-——-split" class="headerlink" title="2.2.5 字符串分割 —— split()"></a>2.2.5 字符串分割 —— split()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br><span class="line"><span class="comment"># str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</span></span><br><span class="line"><span class="comment"># num -- 分割次数。默认为 -1, 即分隔所有。</span></span><br><span class="line"><span class="comment"># 函数返回字符串列表</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-6-字符串计数-——-count"><a href="#2-2-6-字符串计数-——-count" class="headerlink" title="2.2.6 字符串计数 —— count()"></a>2.2.6 字符串计数 —— count()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.count(sub, start=<span class="number">0</span>,end=len(string))</span><br><span class="line"><span class="comment"># sub -- 搜索的子字符串</span></span><br><span class="line"><span class="comment"># start -- 字符串开始搜索的索引。默认为0.</span></span><br><span class="line"><span class="comment"># end -- 字符串中结束搜索的索引。默认为字符串的最后一个位置。</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'adddaddd'</span></span><br><span class="line">print(a.count(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">4</span>))   <span class="comment"># 1</span></span><br><span class="line">print(a.count(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">5</span>))   <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></div>



<h2 id="2-3-数字"><a href="#2-3-数字" class="headerlink" title="2.3 数字"></a>2.3 数字</h2><ol>
<li><p>可使用括号修改运算次序</p>
</li>
<li><p>浮点数结果包含的小数位数可能是不确定的</p>
</li>
<li><p>python2中整数除法结果为整数.   Eg: 2/3=1,若要避免，则要保证至少有一个操作数为浮点数，Eg: 2.0/3=1.5;<br>python3中整数除法结果为浮点数</p>
</li>
<li><p>将非字符串值表示为字符串：str(变量)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">23</span></span><br><span class="line">message=<span class="string">"Happy "</span>+str(age)+<span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)   <span class="comment">#Happy 23rd Birthday!</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h2><p>​            —使用#标识，#后边的内容被python解释器忽略</p>
<h1 id="第三章-列表简介"><a href="#第三章-列表简介" class="headerlink" title="第三章 列表简介"></a>第三章 列表简介</h1><p>​            —用方括号([])来表示列表，并用逗号分隔其中的元素</p>
<h2 id="3-1-访问列表元素"><a href="#3-1-访问列表元素" class="headerlink" title="3.1 访问列表元素"></a>3.1 访问列表元素</h2><p>​            —通过下标访问列表元素，索引从0开始</p>
<p>将索引指定为-1，返回最后一个列表元素<u><strong>（负数索引返回离列表末尾相应距离的元素）</strong></u></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycle=[<span class="string">'trek'</span>,<span class="string">'cannondale'</span>,<span class="string">'redline'</span>]</span><br><span class="line">print(bicycle[<span class="number">0</span>].title())   <span class="comment"># Trek</span></span><br><span class="line">print(bicycle[<span class="number">-1</span>])          <span class="comment"># redline</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3-2-在列表中添加元素"><a href="#3-2-在列表中添加元素" class="headerlink" title="3.2 在列表中添加元素"></a>3.2 在列表中添加元素</h2><ol>
<li>在列表末尾添加元素：append()</li>
<li>在列表中插入元素：insert()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[]</span><br><span class="line">motorcycles.append(<span class="string">'honda'</span>)</span><br><span class="line">motorcycles.append(<span class="string">"yamaha"</span>)</span><br><span class="line">print(motorcycles)    <span class="comment"># ['honda', 'yamaha']</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">'uducate'</span>)</span><br><span class="line">print(motorcycles)    <span class="comment"># ['uducate', 'honda', 'yamaha']</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3-3-从列表中删除元素"><a href="#3-3-从列表中删除元素" class="headerlink" title="3.3 从列表中删除元素"></a>3.3 从列表中删除元素</h2><ol>
<li><p>使用del语句</p>
<ul>
<li>要知道删除的元素的索引</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'yamaha', 'suzuki']</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'suzuki']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="2">
<li><p>使用pop()方法</p>
<ul>
<li>pop()可得到删除元素的值并在列表中删除它</li>
<li>可指定索引，默认删除末尾元素</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">popped_m1 = motorcycles.pop()</span><br><span class="line">print(popped_m1)               <span class="comment"># suzuki  </span></span><br><span class="line">print(motorcycles)             <span class="comment">#['honda', 'yamaha']</span></span><br><span class="line">popped_m2 = motorcycles.pop(<span class="number">0</span>)</span><br><span class="line">print(popped_m2)               <span class="comment"># honda</span></span><br><span class="line">print(motorcycles)             <span class="comment">#['yamaha']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="3">
<li><p>根据值删除元素—remove(value) </p>
<ul>
<li>若value在列表中出现多次，只删除第一个</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'yamaha'</span>]</span><br><span class="line">motorcycles.remove(<span class="string">'yamaha'</span>)</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'suzuki', 'yamaha']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="3-4-组织列表"><a href="#3-4-组织列表" class="headerlink" title="3.4 组织列表"></a>3.4 组织列表</h2><ol>
<li>对列表进行永久性排序：sort()—默认按字母顺序排列，sort(reverse=True)按字母反向排列</li>
<li>对列表进行临时排序：sorted(list)—默认按字母顺序排列，也可传递参数reverse=True</li>
<li>永久性反转列表：reverse()—若要恢复原来顺序，再次reverse即可</li>
<li>确定列表长度：len(list)</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)           <span class="comment"># ['audi', 'bmw', 'subaru', 'toyota']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)  </span><br><span class="line">print(cars)           <span class="comment"># ['toyota', 'subaru', 'bmw', 'audi']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))   <span class="comment"># ['audi', 'bmw', 'subaru', 'toyota']  </span></span><br><span class="line">print(cars)           <span class="comment"># ['bmw', 'audi', 'toyota', 'subaru']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars)           <span class="comment"># ['subaru', 'toyota', 'audi', 'bmw']</span></span><br><span class="line"></span><br><span class="line">print(len(cars))      <span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div>







<h1 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h1><h2 id="4-1-遍历列表——for循环"><a href="#4-1-遍历列表——for循环" class="headerlink" title="4.1 遍历列表——for循环"></a>4.1 遍历列表——for循环</h2><ul>
<li><p>⚠️ for首句后有冒号</p>
</li>
<li><p>Python根据缩进来判断代码行与前一个代码行的关系。</p>
<p>for循环后每个缩进的代码行都是循环的一部分。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>, <span class="string">'jack'</span>]</span><br><span class="line"><span class="keyword">for</span> cat <span class="keyword">in</span> cats:</span><br><span class="line">    print(cat.title()+<span class="string">" is a good cat!"</span>)</span><br><span class="line">    print(<span class="string">"I love "</span>+cat.title()+<span class="string">".\n"</span>)</span><br><span class="line">print(<span class="string">"That's all"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># Alice is a good cat!</span></span><br><span class="line"><span class="comment"># I love Alice.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># David is a good cat!</span></span><br><span class="line"><span class="comment"># I love David.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Carolina is a good cat!</span></span><br><span class="line"><span class="comment"># I love Carolina.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Jack is a good cat!</span></span><br><span class="line"><span class="comment"># I love Jack.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># That's all</span></span><br></pre></td></tr></table></figure></div>



<h2 id="4-2-创建数值列表"><a href="#4-2-创建数值列表" class="headerlink" title="4.2 创建数值列表"></a>4.2 创建数值列表</h2><ol>
<li><p>使用函数range()——range(begin,  end, step)</p>
<ul>
<li>从begin开始，每次增加一个步长step，到end结束（包括begin，不包括end，默认step=1）。</li>
<li>使用range()时，若输出不符合预期，可尝试将指定的值加1或减1。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    print(value)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用range()创建数字列表</p>
<ul>
<li><p>使用函数list()可将range()的结果直接转换为列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even_number = list(range(<span class="number">2</span>, <span class="number">10</span>+<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(even_number)  <span class="comment">#[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用range()创建任何需要的数字列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">      squares.append(value**<span class="number">2</span>)</span><br><span class="line">  print(squares)    <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></div>

<p>python中，**2表示平方，**3表示立方，**0.5表示平方根</p>
</li>
</ul>
</li>
<li><p>对数字列表执行简单的统计计算</p>
<ul>
<li>最大值—max(list)</li>
<li>最小值—min(list)</li>
<li>总和—sun(list)</li>
</ul>
</li>
<li><p>列表解析</p>
<p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)      <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h2 id="4-3-使用列表的部分元素（切片）"><a href="#4-3-使用列表的部分元素（切片）" class="headerlink" title="4.3 使用列表的部分元素（切片）"></a>4.3 使用列表的部分元素（切片）</h2><h3 id="4-3-1-切片"><a href="#4-3-1-切片" class="headerlink" title="4.3.1 切片"></a>4.3.1 切片</h3><ol>
<li>创建切片，可指定起始元素和终止元素的索引。（同样包含起始元素，不包含终止元素）</li>
</ol>
<ul>
<li><p>⚠️ 是索引，和range中的值不同。</p>
</li>
<li><p>若未指定起始索引，默认从列表开头开始；若未指定终止元素索引，默认终止于列表末尾。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">print(players[<span class="number">1</span>:<span class="number">4</span>])      <span class="comment"># ['martina', 'michael', 'florence']</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>遍历切片：在for循环中使用切片</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">print(<span class="string">"我们队中的前三个队员:"</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我们队中的前三个队员:</span></span><br><span class="line"><span class="comment"># Charles</span></span><br><span class="line"><span class="comment"># Martina</span></span><br><span class="line"><span class="comment"># Michael</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-2-复制列表"><a href="#4-3-2-复制列表" class="headerlink" title="4.3.2 复制列表"></a>4.3.2 复制列表</h3><p>​            —创建一个包含整个列表的切片，即同时省略起始索引和终止索引（[ : ]）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">print(<span class="string">"我喜欢的食物是:"</span>+str(my_foods))         <span class="comment"># 我喜欢的食物是:['pizza', 'falafel', 'carrot cake']</span></span><br><span class="line">print(<span class="string">"我朋友喜欢的食物是:"</span>+str(friend_foods))  <span class="comment"># 我朋友喜欢的食物是:['pizza', 'falafel', 'carrot cake']</span></span><br></pre></td></tr></table></figure></div>

<p>⚠️ 若写成：friend_foods = my_foods 则不能得到两个列表。（这种语法实际上是将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表）</p>
<h2 id="4-4-元组"><a href="#4-4-元组" class="headerlink" title="4.4 元组"></a>4.4 元组</h2><ol>
<li><p>列表适合用于存储在程序运行期间可变的数据集（列表是可以修改的），使用方括号标识。</p>
</li>
<li><p>不可变的列表称为<code>元组</code>，使用圆括号标识。</p>
</li>
<li><p>元组的遍历于访问与列表操作相同。</p>
</li>
<li><p>试图修改元组的操作是非法的，但允许给元组重新赋值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Rectangle = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">Rectangle[<span class="number">0</span>] = <span class="number">250</span>     <span class="comment"># 报错</span></span><br><span class="line">Rectangle = (<span class="number">400</span>, <span class="number">100</span>) <span class="comment"># 合法</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> Rectangle:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></div>







</li>
</ol>
<h1 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h1><h2 id="5-1-示例"><a href="#5-1-示例" class="headerlink" title="5.1 示例"></a>5.1 示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>] </span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:    <span class="comment">#注意要有冒号</span></span><br><span class="line">        print(car.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(car.title())</span><br></pre></td></tr></table></figure></div>

<h2 id="5-2-条件测试"><a href="#5-2-条件测试" class="headerlink" title="5.2 条件测试"></a>5.2 条件测试</h2><ol>
<li><p>检查是否相等：==</p>
<ul>
<li>考虑大小写，若想忽略大小写时，可将变量转换为小写再比较 Eg：car.lower == ‘audi’</li>
</ul>
</li>
<li><p>检查是否不等：!=</p>
</li>
<li><p>逻辑与：and</p>
</li>
<li><p>逻辑或：or</p>
</li>
<li><p>判断列表中是否存在特定值：in</p>
</li>
<li><p>判断列表中是否不存在特定值：not in</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>] </span><br><span class="line">user = <span class="string">'marie'</span> </span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> banned_users:</span><br><span class="line">    print(user.title() + <span class="string">", you can post a response if you wish."</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>布尔表达式：True、False（注意要大写！）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">game_active = <span class="literal">True</span> </span><br><span class="line">can_edit = <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="5-3-if语句多种结构"><a href="#5-3-if语句多种结构" class="headerlink" title="5.3 if语句多种结构"></a>5.3 if语句多种结构</h2><ol>
<li><p>if语句</p>
</li>
<li><p>if-else语句</p>
</li>
<li><p>if-elif-else结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"你的票价是 $"</span> + str(price) + <span class="string">"。"</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用多个elif代码块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"你的票价是 $"</span> + str(price) + <span class="string">"。"</span>)</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="5-4-使用if语句处理列表"><a href="#5-4-使用if语句处理列表" class="headerlink" title="5.4 使用if语句处理列表"></a>5.4 使用if语句处理列表</h2><ol>
<li><p>判定列表是否为空——if list:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requested_toppings = [] </span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">        print(<span class="string">"Finished making your pizza!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Are you sure you want a plain pizza?"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：Are you sure you want a plain pizza?</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>判断字符串是否为空——if string:</p>
<p>(若一字符串string=“”，则 if string返回False)</p>
</li>
<li><p>使用多个列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">available_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'olives'</span>, <span class="string">'green peppers'</span>, <span class="string">'pepperoni'</span>, <span class="string">'pineapple'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'french fries'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, we don't have "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"Finished making your pizza!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Adding mushrooms.</span></span><br><span class="line"><span class="comment"># Sorry, we don't have french fries.</span></span><br><span class="line"><span class="comment"># Adding extra cheese.</span></span><br><span class="line"><span class="comment"># Finished making your pizza!</span></span><br></pre></td></tr></table></figure></div>







</li>
</ol>
<h1 id="第六章-字典"><a href="#第六章-字典" class="headerlink" title="第六章 字典"></a>第六章 字典</h1><ol>
<li>字典是一系列<code>键-值对</code>，可通过键访问与之相关联的值。</li>
<li>Python中，字典是一种动态结构，用放在花括号{}中的一系列<code>键-值对</code>表示，键与值之间用冒号分隔，键-值对之间用逗号分隔。</li>
</ol>
<h2 id="6-1-使用字典"><a href="#6-1-使用字典" class="headerlink" title="6.1 使用字典"></a>6.1 使用字典</h2><ol>
<li><p>通过键获取对应的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">print(alien[<span class="string">'color'</span>])    <span class="comment"># green</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改键对应的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien[<span class="string">'color'</span>]=<span class="string">'yellow'</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加键-值对</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line">print(alien)       <span class="comment">#&#123;'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除键-值对——使用del语句</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien[<span class="string">'points'</span>]</span><br><span class="line">print(alien)       <span class="comment"># &#123;'color': 'green'&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建空字典</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien=&#123;&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="6-2-遍历字典"><a href="#6-2-遍历字典" class="headerlink" title="6.2 遍历字典"></a>6.2 遍历字典</h2><ol>
<li><p>得到字典的所有键-值对：items()——返回一个键-值对列表</p>
<ul>
<li><p>遍历字典：for k, v in dictionary.items(): </p>
<p>（items方法返回一个一个键-值对列表，Python遍历列表中的每一个键-值对，并将键、值存储在声明的两个变量k、v中。）</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历字典  for k, v in dictionary.items():</span></span><br><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'efermi'</span>,</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'enrico'</span>,</span><br><span class="line">    <span class="string">'last'</span>: <span class="string">'fermi'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    print(<span class="string">"Key: "</span> + key)</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Key: username</span></span><br><span class="line"><span class="comment"># Value: efermi</span></span><br><span class="line"><span class="comment"># Key: first</span></span><br><span class="line"><span class="comment"># Value: enrico</span></span><br><span class="line"><span class="comment"># Key: last</span></span><br><span class="line"><span class="comment"># Value: fermi</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>得到字典的所有键：keys()——返回一个键列表</p>
<ul>
<li><p>遍历字典所有键：for k in dictionary.keys():  或  for k in dictionary: </p>
<p>（因为遍历字典时，默认遍历所有的键，故keys()可省略）</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    print(name.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Jen</span></span><br><span class="line"><span class="comment"># Sarah</span></span><br><span class="line"><span class="comment"># Edward</span></span><br><span class="line"><span class="comment"># Phil</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>得到字典的所有值：values()——返回一个值列表</p>
<ul>
<li>遍历字典的所有值：for v in dictionary.values():</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br><span class="line"><span class="comment"># Python</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>遍历字典时，键-值对的返回顺序与存储顺序不同（Python不关心键-值对的存储顺序，只跟踪键和值之间的关联关系）</p>
<p>若以特定顺序返回元素，可在for循环中对返回的值进行排序——sorted()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> sorted(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用集合（set）可剔除列表中的重复项——set()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="6-3-嵌套"><a href="#6-3-嵌套" class="headerlink" title="6.3 嵌套"></a>6.3 嵌套</h2><ol>
<li><p>嵌套：将一系列字典存储在列表中，或将列表作为值存储在字典中。</p>
<p>（可以在列表中嵌套字典，在字典中嵌套列表，在字典中嵌套字典）</p>
</li>
</ol>
<h3 id="6-3-1-字典列表（在列表中嵌套字典）"><a href="#6-3-1-字典列表（在列表中嵌套字典）" class="headerlink" title="6.3.1 字典列表（在列表中嵌套字典）"></a>6.3.1 字典列表（在列表中嵌套字典）</h3><p>​    Eg：字典alien_0包含一个外星人的各种信息，则要存储多个外星人的信息时就可以创建外星人列表。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'red', 'points': 15&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​    PS：更符合现实的情形是，外星人不止三个，且每个外星人都是使用代码自动生成的：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    new_alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">'color'</span>] == <span class="string">'green'</span>:</span><br><span class="line">        alien[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line">        alien[<span class="string">'speed'</span>] = <span class="string">'medium'</span></span><br><span class="line">        alien[<span class="string">'points'</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">5</span>]:</span><br><span class="line">    print(alien)</span><br><span class="line">print(<span class="string">"..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-3-2-在字典中存储列表"><a href="#6-3-2-在字典中存储列表" class="headerlink" title="6.3.2 在字典中存储列表"></a>6.3.2 在字典中存储列表</h3><p>当需要在字典中将一个键关联到多个值时，可在字典中嵌套一个列表。</p>
<p>Eg：每个人喜欢的语言存储在字典中，若一个人喜欢多种语言，则可用一个列表来存储语言信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: [<span class="string">'python'</span>, <span class="string">'ruby'</span>],</span><br><span class="line">    <span class="string">'sarah'</span>: [<span class="string">'c'</span>],</span><br><span class="line">    <span class="string">'edward'</span>: [<span class="string">'ruby'</span>, <span class="string">'go'</span>],</span><br><span class="line">    <span class="string">'phil'</span>: [<span class="string">'python'</span>, <span class="string">'haskell'</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="keyword">if</span> len(languages) == <span class="number">1</span>:</span><br><span class="line">        print(name.title()+<span class="string">"'s favorite language is:\n\t"</span>+languages[<span class="number">0</span>].title())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(name.title()+<span class="string">"'s favorite languages are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">            print(<span class="string">'\t'</span>+language.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># Jen's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Python</span></span><br><span class="line"><span class="comment"># 	Ruby</span></span><br><span class="line"><span class="comment"># Sarah's favorite language is:</span></span><br><span class="line"><span class="comment"># 	C</span></span><br><span class="line"><span class="comment"># Edward's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Ruby</span></span><br><span class="line"><span class="comment"># 	Go</span></span><br><span class="line"><span class="comment"># Phil's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Python</span></span><br><span class="line"><span class="comment"># 	Haskell</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-3-3-在字典中存储字典"><a href="#6-3-3-在字典中存储字典" class="headerlink" title="6.3.3 在字典中存储字典"></a>6.3.3 在字典中存储字典</h3><p>Eg：某网站有多个用户，每个用户有不同的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。（这种情况，也可通过在用户列表中嵌套字典实现）</p>
<p>⚠️ 字典中的字典结构最好相同（虽然Python没有此要求，但这使得嵌套的字典处理起来更容易，否则for循环内部代码将更复杂）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = &#123; </span><br><span class="line">    <span class="string">'aeinstein'</span>: &#123;</span><br><span class="line">        <span class="string">'first'</span>: <span class="string">'albert'</span>,</span><br><span class="line">        <span class="string">'last'</span>: <span class="string">'einstein'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'princeton'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'mcurie'</span>: &#123;</span><br><span class="line">        <span class="string">'first'</span>: <span class="string">'marie'</span>,</span><br><span class="line">        <span class="string">'last'</span>: <span class="string">'curie'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'paris'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    print(<span class="string">"Username: "</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">'first'</span>] + <span class="string">" "</span> + user_info[<span class="string">'last'</span>]</span><br><span class="line">    location = user_info[<span class="string">'location'</span>]</span><br><span class="line">    print(<span class="string">"\tFull name: "</span> + full_name.title())</span><br><span class="line">    print(<span class="string">"\tLocation: "</span> + location.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Username: aeinstein</span></span><br><span class="line"><span class="comment"># 	Full name: Albert Einstein</span></span><br><span class="line"><span class="comment"># 	Location: Princeton</span></span><br><span class="line"><span class="comment"># Username: mcurie</span></span><br><span class="line"><span class="comment"># 	Full name: Marie Curie</span></span><br><span class="line"><span class="comment"># 	Location: Paris</span></span><br></pre></td></tr></table></figure></div>





<h1 id="第七章-用户输入和while循环"><a href="#第七章-用户输入和while循环" class="headerlink" title="第七章 用户输入和while循环"></a>第七章 用户输入和while循环</h1><h2 id="7-1-用户输入"><a href="#7-1-用户输入" class="headerlink" title="7.1 用户输入"></a>7.1 用户输入</h2><ol>
<li><p>获取用户输入：input()</p>
<ul>
<li>函数input()可无参数，也可有一个参数，用于展示需要向用户显示的提示或说明。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = input(<span class="string">"Tell me something, and I will repeat it back to you: "</span>) </span><br><span class="line">print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell me something, and I will repeat it back to you: Hello everyone! </span></span><br><span class="line"><span class="comment"># Hello everyone!</span></span><br></pre></td></tr></table></figure></div>

<p>PS：提示可能超过一行，这时为了代码清晰，可将提示存储在一个变量中，再将该变量传递给input()</p>
</li>
<li><p>获取数值输入：int(变量)、float(变量)</p>
<ul>
<li>使用input()获取的输入都是字符串类型，可使用int()将之转换为整数，使用float()转换为浮点数</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = input(<span class="string">"How old are you? "</span>)</span><br><span class="line">age = int(age)</span><br></pre></td></tr></table></figure></div>

<p>PS：字符串转数值：str(变量)</p>
<p>​         数值转字符串：int(变量)、float(变量)</p>
</li>
<li><p>求模运算：% 返回余数</p>
</li>
<li><p>在Python 2.7中使用raw_input()提示用户输入</p>
<p>（Python 2.7也有函数input()，但它将用户输入解读为Python代码，并尝试运行它们）</p>
</li>
</ol>
<h2 id="7-2-while循环"><a href="#7-2-while循环" class="headerlink" title="7.2 while循环"></a>7.2 while循环</h2><ol>
<li><p>善用标志变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用break语句退出循环</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用continue语句跳过当前循环</p>
</li>
</ol>
<h2 id="7-3-使用while循环处理列表和字典"><a href="#7-3-使用while循环处理列表和字典" class="headerlink" title="7.3 使用while循环处理列表和字典"></a>7.3 使用while循环处理列表和字典</h2><ol>
<li><p>while list: ——列表为空时结束循环</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先，创建一个待验证用户列表</span></span><br><span class="line"><span class="comment"># 和一个用于存储已验证用户的空列表</span></span><br><span class="line">unconfirmed_users = [<span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'candace'</span>]</span><br><span class="line">confirmed_users = [] </span><br><span class="line"><span class="comment"># 验证每个用户，直到没有未验证用户为止</span></span><br><span class="line"><span class="comment"># 将每个经过验证的列表都移到已验证用户列表中</span></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(<span class="string">"正在验证用户： "</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"><span class="comment"># 显示所有已验证的用户</span></span><br><span class="line">print(<span class="string">"\n下列用户已验证："</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 正在验证用户： Candace</span></span><br><span class="line"><span class="comment"># 正在验证用户： Brian</span></span><br><span class="line"><span class="comment"># 正在验证用户： Alice</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 下列用户已验证：</span></span><br><span class="line"><span class="comment"># Candace</span></span><br><span class="line"><span class="comment"># Brian</span></span><br><span class="line"><span class="comment"># Alice</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除列表中中的所有特定值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pets = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'goldfish'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'cat'</span>]</span><br><span class="line">print(pets)</span><br><span class="line"><span class="keyword">while</span> <span class="string">'cat'</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">'cat'</span>)</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']</span></span><br><span class="line"><span class="comment"># ['dog', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用用户输入填充字典</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">responses = &#123;&#125; </span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">while</span> polling_active: </span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">    name = input(<span class="string">"\nWhat is your name? "</span>) </span><br><span class="line">    response = input(<span class="string">"Which mountain would you like to climb someday? "</span>) </span><br><span class="line">    <span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">    responses[name] = response </span><br><span class="line">    <span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line">    repeat = input(<span class="string">"Would you like to let another person respond? (yes/ no) "</span>) </span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">'no'</span>: </span><br><span class="line">        polling_active = <span class="literal">False</span> </span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line">print(<span class="string">"\n--- Poll Results ---"</span>) </span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items(): </span><br><span class="line">    print(name + <span class="string">" would like to climb "</span> + response + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure></div>





</li>
</ol>
<h1 id="第八章-函数"><a href="#第八章-函数" class="headerlink" title="第八章 函数"></a>第八章 函数</h1><p>函数是带名称的代码块，用于完成具体工作，可将代码与主程序分离，让主程序更易理解。</p>
<h2 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h2><ol>
<li><p>函数定义格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">([形参列表])</span>:</span></span><br><span class="line">  [<span class="string">"""文档字符串"""</span>]</span><br><span class="line">  函数方法体</span><br></pre></td></tr></table></figure></div>

<p>函数调用格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名([实参列表])</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>文档字符串：用<code>三引号</code>括起，描述函数是做什么的，Python使用它们来生成有关程序中函数的文档。</p>
</li>
<li><p>形参：函数完成其工作所需的一项信息。</p>
</li>
<li><p>实参：调用函数时传递给函数的信息。</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">"""显示简单的问候语"""</span></span><br><span class="line">    print(<span class="string">'Hello,'</span> + username.title() + <span class="string">'!'</span>)</span><br><span class="line"></span><br><span class="line">greet_user(<span class="string">'jesse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：Hello,Jesse!</span></span><br></pre></td></tr></table></figure></div>



<h2 id="8-2-传递实参"><a href="#8-2-传递实参" class="headerlink" title="8.2 传递实参"></a>8.2 传递实参</h2><p>向函数传递参数的方式：位置实参、关键字实参、列表、字典。</p>
<h3 id="8-2-1-位置实参"><a href="#8-2-1-位置实参" class="headerlink" title="8.2.1 位置实参"></a>8.2.1 位置实参</h3><p>要求实参和形参的顺序相同。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">'金毛'</span>, <span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只金毛。</span></span><br><span class="line"><span class="comment"># 我的金毛的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-2-关键字实参"><a href="#8-2-2-关键字实参" class="headerlink" title="8.2.2 关键字实参"></a>8.2.2 关键字实参</h3><p>关键字参数传递给函数的是<code>名称-值对</code>，所以无需考虑函数调用中的实参顺序，这种方式更清楚地指出了函数调用中各个值的用途。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(animal_type=<span class="string">'金毛'</span>, pet_name=<span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只金毛。</span></span><br><span class="line"><span class="comment"># 我的金毛的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-3-设置形参默认值"><a href="#8-2-3-设置形参默认值" class="headerlink" title="8.2.3 设置形参默认值"></a>8.2.3 设置形参默认值</h3><p>调用函数时若给形参提供了实参，则使用指定的实参值；否则，使用形参的默认值。（使用默认值让实参变成可选的。）</p>
<p>⚠️ 形参的默认值必须从右往左写。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type=<span class="string">'狗'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只狗。</span></span><br><span class="line"><span class="comment"># 我的狗的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-4-传递列表"><a href="#8-2-4-传递列表" class="headerlink" title="8.2.4 传递列表"></a>8.2.4 传递列表</h3><ol>
<li>将列表传递给函数后，在函数中对此列表做出的任何修改都是永久性的。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span><span class="params">(unprinted_designs, completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        print(<span class="string">"Printing model: "</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""显示打印好的所有模型"""</span></span><br><span class="line">    print(<span class="string">"The following models have been printed:"</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        print(completed_model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">'iphone case'</span>, <span class="string">'robot pendant'</span>, <span class="string">'dodecahedron'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Printing model: dodecahedron</span></span><br><span class="line"><span class="comment"># Printing model: robot pendant</span></span><br><span class="line"><span class="comment"># Printing model: iphone case</span></span><br><span class="line"><span class="comment"># The following models have been printed:</span></span><br><span class="line"><span class="comment"># dodecahedron</span></span><br><span class="line"><span class="comment"># robot pendant</span></span><br><span class="line"><span class="comment"># iphone case</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><p>若希望向函数传递列表的副本而不是原件，可使用表示法创建列表的副本。</p>
<p>调用函数格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(列表名[:])</span><br></pre></td></tr></table></figure></div>

<p>Eg：1中若不想清空未打印的设计列表，可如下调用print_models()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print_models(unprinted_designs[:], completed_models)</span><br></pre></td></tr></table></figure></div>

<p>PS：虽然向函数传递列表的副本可保留原始列表中的内容，但尽量不要这么做，因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</p>
</li>
</ol>
<h2 id="8-3-返回值"><a href="#8-3-返回值" class="headerlink" title="8.3 返回值"></a>8.3 返回值</h2><ol>
<li>函数可以返回任何类型的值，包括是列表或字典。</li>
<li>return None  表示返回空，做if判断时，为False。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name, age=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span> </span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125; </span><br><span class="line">    <span class="keyword">if</span> age: </span><br><span class="line">        person[<span class="string">'age'</span>] = age </span><br><span class="line">    <span class="keyword">return</span> person </span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>, age=<span class="number">27</span>)   </span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'first': 'jimi', 'last': 'hendrix', 'age': 27&#125;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="8-4-传递任意数量的实参"><a href="#8-4-传递任意数量的实参" class="headerlink" title="8.4 传递任意数量的实参"></a>8.4 传递任意数量的实参</h2><ol>
<li><p>传递任意数量的实参——使用<code>*形参名</code></p>
<p>（星号让Python创建一个名为形参名的<code>空元组</code>，并将收到的所有值都封装进这个元组中）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"使用以下材料做一个披萨:"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个披萨:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个披萨:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>结合使用位置实参和任意参数实参——注意必须将接纳任意数量实参的形参放在最后</p>
<p>（Python先匹配位置参数和关键字实参，再将余下的实参都收集到最后一个形参中）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"用以下材料做一个"</span> + str(size) + <span class="string">"寸的披萨"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个16寸披萨:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个12寸披萨:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用任意数量的关键字实参——使用<code>**形参名</code></p>
<p>（两个星号让Python创建一个名为形参名的<code>空字典</code>，并将收到的所有<code>名称-值对</code>都封装进此字典中）</p>
<p>有时，需接受任意数量的实参，但是预先不知道传递给函数的会是什么信息，此情况下，可将函数编写成能接受任意数量的<code>键-值对</code>——调用语句提供了多少就接受多少。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span>, <span class="string">'einstein'</span>,location=<span class="string">'princeton'</span>,field=<span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'first_name': 'albert', 'last_name': 'einstein', 'location': 'princeton', 'field': 'physics'&#125;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="8-5-将函数存储在模块中"><a href="#8-5-将函数存储在模块中" class="headerlink" title="8.5 将函数存储在模块中"></a>8.5 将函数存储在模块中</h2><ul>
<li><p>函数的优点是将代码块与主程序分离，通过给函数指定描述性名称，让主程序更易理解。</p>
<p>进一步地，可将函数存储在被称为<code>模块</code>的独立文件中，再将模块导入到主程序中。（模块名全小写，单词之间加下划线）</p>
</li>
<li><p><strong>import语句——允许在当前运行的程序文件中使用模块中的代码。</strong></p>
</li>
</ul>
<h3 id="8-5-1-导入整个模块"><a href="#8-5-1-导入整个模块" class="headerlink" title="8.5.1 导入整个模块"></a>8.5.1 导入整个模块</h3><ol>
<li><p>导入模块格式—— <code>import</code>module_name</p>
<p>（python运行代码行import module_name时，会将其中的所有函数都复制到此程序中）</p>
</li>
<li><p>使用此模块中的任意一函数格式—— module_name.function_name()</p>
<p>（句点表示法——需指定模块名和函数名，中间用点号连接）</p>
</li>
</ol>
<h3 id="8-5-2-导入模块中的特定函数"><a href="#8-5-2-导入模块中的特定函数" class="headerlink" title="8.5.2 导入模块中的特定函数"></a>8.5.2 导入模块中的特定函数</h3><ol>
<li><p>导入模块中特定函数格式—— <code>from</code>module_name <code>import</code>function_name</p>
<ul>
<li>通过逗号分隔函数名，可导入模块中任意数量的函数—— <code>from</code>module_name <code>import</code>function_0, function_1, function_2</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>使用此模块中的任意一函数格式—— function_name()</p>
<p>(无需指定模块名，因为在import语句中已显式导入此函数，故调用时只需指定函数名)</p>
</li>
</ol>
<h3 id="8-5-3-导入模块中的所有函数"><a href="#8-5-3-导入模块中的所有函数" class="headerlink" title="8.5.3 导入模块中的所有函数"></a>8.5.3 导入模块中的所有函数</h3><ol>
<li><p>导入模块格式—— <code>from</code>module_name <code>import</code>*</p>
<ul>
<li><p>星号运算符让Python导入模块中的所有函数</p>
</li>
<li><p>使用非自己编写的大型模块时，最好不要用此导入方式，因为模块和本项目可能存在多个名称相同的函数或变量，进而覆盖函数</p>
<p>（故最佳的做法是，导入所需函数，或导入整个模块并使用句点表示法）</p>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li>使用此模块中的任意一函数格式—— function_name()</li>
</ol>
<h3 id="8-5-4-使用as指定别名"><a href="#8-5-4-使用as指定别名" class="headerlink" title="8.5.4 使用as指定别名"></a>8.5.4 使用as指定别名</h3><ol>
<li>给模块指定别名—— <code>import</code> module_name <code>as</code> mn</li>
<li>给函数指定别名—— <code>from</code> module_name <code>import</code> function_name <code>as</code> fn<ul>
<li>若导入的函数名称与程序中现有的名称冲突，或函数名称太长，可指定函数别名。</li>
</ul>
</li>
</ol>
<h2 id="8-6-函数编写指南"><a href="#8-6-函数编写指南" class="headerlink" title="8.6 函数编写指南"></a>8.6 函数编写指南</h2><ol>
<li><p>函数应指定描述性名称，且只使用小写字母和下划线。（大写字母不会有错误，但是最好别用）</p>
</li>
<li><p>函数都应有简要阐述其功能的注释，此注释应采用文档字符串格式（三引号括起）并紧跟在函数定义后。</p>
</li>
<li><p>指定形参默认值时，等号两边不要有空格。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameter_0, parameter_1=<span class="string">'default name'</span>)</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>同理，调用函数时若使用关键字实参，等号两边也不要有空格。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name(value_0, parameter_1=<span class="string">'value_1'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若形参很多，导致函数定义时长度超过79字符，可在函数定义中输入左括号后按回车键，并在下一行按两个Tab键，将形参列表与函数体区分开，便于代码阅读。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        parameter_0, parameter_1, parameter_2,</span></span></span><br><span class="line"><span class="function"><span class="params">        parameter_3, parameter_4, parameter_5)</span>:</span></span><br><span class="line">    function body...</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若程序或模块包含多个函数，可使用两个空行将相邻函数分开。</p>
</li>
<li><p>所有import语句应放在文件开头，除非文件开头使用注释来描述整个程序。</p>
</li>
</ol>
<h1 id="第九章-类"><a href="#第九章-类" class="headerlink" title="第九章 类"></a>第九章 类</h1><h2 id="9-1-创建和使用类"><a href="#9-1-创建和使用类" class="headerlink" title="9.1 创建和使用类"></a>9.1 创建和使用类</h2><ol>
<li><p>类名中<strong>每个单词首字母都需大写，不使用下划线</strong>，类包含<code>方法</code>和<code>属性</code>（类中的函数称为方法）。</p>
</li>
<li><p><code>__init__()</code>是个特殊的方法（相当于java中的构造函数），此方法必须有形参<code>self</code>，且self必须位于其他形参前面。</p>
<ul>
<li><p><code>self</code>是一个指向实例本身的引用，让实例能访问类中的属性和方法。</p>
<p>（类中编写的方法若要操作属性，一定要加形参self，使用self.property的方式得到属性值。）</p>
</li>
<li><p><code>__init__()</code>方法中可为属性指定默认值，但若指定了默认值，__init__()方法就不能给通过形参重新给它赋值，需要重新写一个set方法更换它的值。（所以还不如指定形参的默认值）</p>
</li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""一次模拟小狗的简单尝试"""</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span>  <span class="comment"># 开头末尾各有两个下划线，旨在避免Python默认方法与普通方法发生名称冲突</span></span><br><span class="line">        <span class="string">"""初始化属性name和age"""</span> </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age </span><br><span class="line">        self.gender = <span class="string">'男'</span>  <span class="comment"># 设置性别默认值</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""模拟小狗被命令时蹲下"""</span> </span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>) </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""模拟小狗被命令时打滚"""</span> </span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure></div>

<p>PS：在Python2.7中创建类时，需要在括号内包含单词object：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(object)</span>:</span></span><br><span class="line">  --略--</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><strong>实例名都小写，单词之间添加下划线</strong>。<ul>
<li>访问实例的属性、调用方法，都使用句点表示法。</li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>)</span><br><span class="line">print(<span class="string">"我的狗狗名字是"</span> + my_dog.name.title() + <span class="string">"。"</span>)</span><br><span class="line">print(<span class="string">"它"</span> + str(my_dog.age) + <span class="string">"岁了，是个"</span> + my_dog.gender + <span class="string">"孩。"</span>)</span><br><span class="line">my_dog.sit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我的狗狗名字是Willie。</span></span><br><span class="line"><span class="comment"># 它6岁了，是个男孩。</span></span><br><span class="line"><span class="comment"># Willie is now sitting.</span></span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>修改属性的值：直接通过实例访问属性进行修改；通过方法进行设置。</li>
</ol>
<h2 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h2><p><code>子类</code>继承其<code>父类</code>的所有属性和方法，同时还可以定义自己的属性和方法。（父类也称<code>超类</code>）</p>
<ol>
<li><p>创建子类时，父类必须包含在当前文件中，且位于子类的前面。</p>
</li>
<li><p>定义子类时，必须在括号内指定父类的名称。</p>
</li>
<li><p>子类的方法<code>__init__()</code></p>
<ul>
<li>创建子类实例时，需先给父类的所有属性赋值。因此要写 <code>super().__init__(父类属性参数列表)</code></li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名<span class="params">(父类名)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,子类及父类属性列表)</span>:</span></span><br><span class="line">    <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">    super().__init__(父类属性列表)</span><br><span class="line">    ---初始化子类的属性(略)---</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""电动汽车的独特之处"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())   <span class="comment"># 2016 Tesla Model S</span></span><br></pre></td></tr></table></figure></div>

<p>PS：Python2.7中的继承——函数super()需要两个实参：<code>子类名</code>、<code>对象self</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        --略-- </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 子类        </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        super(ElectricCar, self).__init__(make, model, year) </span><br><span class="line">        --略--</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>子类继承父类后，可添加新的属性和方法，也可重写父类方法。<ul>
<li><strong>重写父类方法，要求与父类方法同名</strong></li>
</ul>
</li>
</ol>
<h2 id="9-3-导入类"><a href="#9-3-导入类" class="headerlink" title="9.3 导入类"></a>9.3 导入类</h2><ol>
<li><p>可以将类存储在模块中，然后在主程序中导入所需的模块。（一个模块可存储任意多个类）</p>
<ul>
<li>操作与导入模块中的函数相同，使用import语句</li>
<li>可导入一个模块，使用句点表示法访问所需类 —— <code>import</code> module_name</li>
<li>可导入一个模块的特定类，若导入多个类则用逗号隔开—— <code>from</code> module_name <code>import</code> class_name</li>
<li>可导入一个模块的所有类（使用星号），但不推荐，可能导致名称冲突—— <code>from</code> module_name <code>import *</code></li>
</ul>
<p>（要从一个模块中导入很多类时，推荐导入模块，再使用句点表示法module_name.calss_name访问类）</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># car.py</span></span><br><span class="line"><span class="string">"""一个可用于表示汽车的类"""</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        <span class="string">"""初始化描述汽车的属性"""</span> </span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model </span><br><span class="line">        self.year = year </span><br><span class="line">        self.odometer_reading = <span class="number">0</span> </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""返回整洁的描述性名称"""</span> </span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model </span><br><span class="line">        <span class="keyword">return</span> long_name.title() </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""打印一条消息，指出汽车的里程"""</span> </span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>) </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span> </span><br><span class="line">        <span class="string">"""将里程表读数设置为指定的值，拒绝将里程表往回拨"""</span> </span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading: </span><br><span class="line">            self.odometer_reading = mileage </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>) </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span> </span><br><span class="line">        <span class="string">"""将里程表读数增加指定的量"""</span> </span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_car.py</span></span><br><span class="line"><span class="string">"""一组可用于表示电动汽车的类"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟电动汽车电瓶的简单尝试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, battery_size=<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电瓶的属性"""</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶容量的消息"""</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶续航里程的消息"""</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            range = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">            range = <span class="number">270</span></span><br><span class="line">        message = <span class="string">"This car can go approximately "</span> + str(range)</span><br><span class="line">        message += <span class="string">" miles on a full charge."</span></span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span> </span><br><span class="line">    <span class="string">"""模拟电动汽车的独特之处"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性，再初始化电动汽车特有的属性"""</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_cars.py</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car </span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> ElectricCar </span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">'volkswagen'</span>, <span class="string">'beetle'</span>, <span class="number">2016</span>) </span><br><span class="line">print(my_beetle.get_descriptive_name())    <span class="comment"># 2016 Volkswagen Beetle</span></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'roadster'</span>, <span class="number">2016</span>) </span><br><span class="line">print(my_tesla.get_descriptive_name())     <span class="comment"># 2016 Tesla Roadster</span></span><br></pre></td></tr></table></figure></div>



<h2 id="9-4-Python标准库"><a href="#9-4-Python标准库" class="headerlink" title="9.4 Python标准库"></a>9.4 Python标准库</h2><ol>
<li><p>Python标准库是一组模块，可直接通过import使用。</p>
</li>
<li><p>Eg：模块collections中的OrderedDict类</p>
<ul>
<li>OrderedDict实例的行为几乎与字典相同，区别只在于记录了<code>键-值对</code>的添加顺序。</li>
<li>兼具列表和字典的主要优点（将信息关联起来的同时保留原来的顺序）</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"></span><br><span class="line">favorite_languages[<span class="string">'jen'</span>] = <span class="string">'python'</span></span><br><span class="line">favorite_languages[<span class="string">'sarah'</span>] = <span class="string">'c'</span></span><br><span class="line">favorite_languages[<span class="string">'edward'</span>] = <span class="string">'ruby'</span></span><br><span class="line">favorite_languages[<span class="string">'phil'</span>] = <span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items(): </span><br><span class="line">    print(name.title() + <span class="string">"'s favorite language is "</span> + language.title() + <span class="string">"."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Jen's favorite language is Python. </span></span><br><span class="line"><span class="comment"># Sarah's favorite language is C. </span></span><br><span class="line"><span class="comment"># Edward's favorite language is Ruby. </span></span><br><span class="line"><span class="comment"># Phil's favorite language is Python.</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="9-5-类编码风格"><a href="#9-5-类编码风格" class="headerlink" title="9.5 类编码风格"></a>9.5 类编码风格</h2><ol>
<li>类名中每个单词首字母大写，不使用下划线；实例名和模块名都小写，单词之间加下划线。</li>
<li>类中，使用一个空行来分隔方法；模块中，使用两个空行来分隔类。</li>
<li>先编写导入标准库模块中的import语句，再添加一个空行，导入自己编写的模块的import语句。</li>
</ol>
<h1 id="第十章-文件和异常"><a href="#第十章-文件和异常" class="headerlink" title="第十章 文件和异常"></a>第十章 文件和异常</h1><h2 id="10-1-读取文件"><a href="#10-1-读取文件" class="headerlink" title="10.1 读取文件"></a>10.1 读取文件</h2><p>Eg：pi.txt文件</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420230316802.png" data-fancybox="group" data-caption="image-20200420230316802" class="fancybox"><img alt="image-20200420230316802" style="zoom:40%;" title="image-20200420230316802" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420230316802.png" class="lazyload"></a>

<ol>
<li><p>文件路径</p>
<ul>
<li>相对路径（相对于当前运行的程序所在目录）<ul>
<li>在Linux和OS X中：with open(‘text_files/filename.txt’) as file_object:</li>
<li>在Windows中（使用反斜杠\）：with open(‘text_files\filename.txt’) as file_object:</li>
</ul>
</li>
<li>绝对路径</li>
</ul>
</li>
<li><p>读取文本文件时，Python将其中的所有文本都解读为字符串。</p>
<ul>
<li>若需转换为数值 —— <code>int(变量)</code>将字符串转换为整数，<code>float(变量)</code>将字符串转换为浮点数</li>
</ul>
</li>
</ol>
<h3 id="10-1-1-读取整个文件——read"><a href="#10-1-1-读取整个文件——read" class="headerlink" title="10.1.1 读取整个文件——read()"></a>10.1.1 读取整个文件——read()</h3><ul>
<li>函数<code>open(file_name)</code> 返回一个表示文件的对象。</li>
<li>使用关键词<code>with</code>则无需访问文件后将其关闭（调用close()函数），Python会自动在合适时将其关闭。</li>
<li>函数<code>read()</code>将读取文件的全部内容，并返回一个字符串。PS：read()到达文件末尾时会返回一个空字符串。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br><span class="line"></span><br><span class="line">print(len(contents))</span><br></pre></td></tr></table></figure></div>

<p>​    输出：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420231942761.png" data-fancybox="group" data-caption="image-20200420231942761" class="fancybox"><img alt="image-20200420231942761" style="zoom:40%;" title="image-20200420231942761" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420231942761.png" class="lazyload"></a>

<div class="note warning">
            <p>​    ⚠️ 为什么有38个字符？</p><p>​           答：content为’3.1415926535\n  8979323846\n  2643383279’（中间空的是两个字符）</p><p>​          PS：之所以最后有一个空行，是因为print语句会加上一个换行符\n</p>
          </div>



<h3 id="10-1-2-逐行读取——readline"><a href="#10-1-2-逐行读取——readline" class="headerlink" title="10.1.2 逐行读取——readline()"></a>10.1.2 逐行读取——readline()</h3><ul>
<li>要以逐行的方式检查文件，可对文件对象使用for循环：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></div>

<p>​    输出：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420232814904.png" data-fancybox="group" data-caption="image-20200420232814904" class="fancybox"><img alt="image-20200420232814904" style="zoom:40%;" title="image-20200420232814904" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420232814904.png" class="lazyload"></a>

<div class="note warning">
            <p>​    ⚠️ 为什么中间会出现空白行？</p><p>​           答：因为pi.txt文件中每行后有一个换行符\n，而print语句又会加上一个换行符\n，故出现了空白行。</p><p>​               （可通过在print语句中使用rstrip()函数，消除文件每行末尾的换行符，来消除空白行）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.1415926535</span></span><br><span class="line"><span class="comment">#   8979323846</span></span><br><span class="line"><span class="comment">#   2643383279</span></span><br></pre></td></tr></table></figure></div>
          </div>



<h3 id="10-1-3-将各行存储在列表中——readlines"><a href="#10-1-3-将各行存储在列表中——readlines" class="headerlink" title="10.1.3 将各行存储在列表中——readlines()"></a>10.1.3 将各行存储在列表中——readlines()</h3><ul>
<li>使用关键词<code>with</code>时，open()返回的文件对象只能在with代码块内使用。</li>
<li>使用函数<code>readlines()</code>从文件中读取每一行，最终返回一个列表。则将之存储在一个变量中，就可在with代码块外使用此列表。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()  <span class="comment"># strip能剔除pi.txt中每行的换行和头部空格</span></span><br><span class="line"></span><br><span class="line">print(pi_string)      <span class="comment"># 3.141592653589793238462643383279</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 32</span></span><br></pre></td></tr></table></figure></div>

<h3 id="10-1-4-取文件前x个字符-——-使用切片"><a href="#10-1-4-取文件前x个字符-——-使用切片" class="headerlink" title="10.1.4 取文件前x个字符 —— 使用切片"></a>10.1.4 取文件前x个字符 —— 使用切片</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pi_million_digits.txt中圆周率精确到小数点后1 000 000位</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_million_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string[:<span class="number">52</span>] + <span class="string">"..."</span>) <span class="comment"># 3.14159265358979323846264338327950288419716939937510...</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 1000002</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-2-写入文件"><a href="#10-2-写入文件" class="headerlink" title="10.2 写入文件"></a>10.2 写入文件</h2><ol>
<li>读取写入文件都使用open函数打开文件 —— <code>open(file_name, [mode])</code><ul>
<li>第一个形参file_name：要打开的文件名称，不可省略。</li>
<li>第二个形参mode：指定文件读打开的模式——读取模式(‘r’)，写入模式(‘w’)，附加模式(‘a’)，读取写入模式(‘r+’)。省略时默认为读取模式。</li>
<li>若要写入的文件不存在，open()函数将自动创建它；若要读入的文件不存在，则会报错FileNotFoundError异常。</li>
<li>写入模式(‘w’)时，若文件已存在，会清空文件内容；若不希望清空内容，使用附加模式(‘a’)。</li>
</ul>
</li>
<li>写入文件 —— <code>write()</code><ul>
<li>函数write()不会自动在文本末尾添加换行符，需要你自己加\n</li>
</ul>
</li>
<li>Python只能将字符串写入文本文件，若要讲数值数据存储在文本中，需先使用<code>str(变量)</code>将其转换为字符串格式。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span> </span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming.\n"</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love creating new games."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># programming.txt：</span></span><br><span class="line"><span class="comment"># I love programming. </span></span><br><span class="line"><span class="comment"># I love creating new games.</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-3-异常"><a href="#10-3-异常" class="headerlink" title="10.3 异常"></a>10.3 异常</h2><ol>
<li><p><code>异常</code>是一种特殊的对象，Python使用它来管理程序执行期间发生的错误。</p>
<p>（每当发生让Python不知所措的错误时，它都会创建一个异常对象。）</p>
</li>
<li><p>若不对产生的异常进行处理，程序将停止，并显示一个trackback，其中包含有关异常的报告。</p>
</li>
<li><p>异常需使用<code>try-except</code>代码块 或 <code>try-except-else</code>代码块进行处理。</p>
<ul>
<li><p>try代码块：存放 <u><strong>可能引发异常</strong></u> 的代码</p>
</li>
<li><p>若Python尝试运行try代码块中的代码时发生了except指定的异常，执行except代码块内容</p>
</li>
<li><p>else代码块：存放当 <strong><u>try代码块成功执行时</u></strong> 才需要执行的代码</p>
</li>
<li><p>可使用<code>pass语句</code>，让Python在发生指定异常时什么都不做，不出现traceback也不产生任何输出。</p>
<p>（pass语句也算是一种对异常的处理，还充当了占位符，提醒你程序的某个地方啥都没做，且以后也许需要在这里做些什么）</p>
</li>
</ul>
</li>
<li><p>若程序运行不产生异常，执行完try块后会跳过except块，执行后续代码；</p>
<p>否则，会直接查找except块并执行其中代码，然后执行后续代码（但try块中未执行的部分不再执行）。</p>
<p>（所以try-except-else可用try-except代替，只需将else块中内容放在try快中，但是有else代码块会使代码逻辑更清晰）</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理 ZeroDivisionError 异常</span></span><br><span class="line">print(<span class="string">"输入被除数和输出，将给出二者的商。"</span>)</span><br><span class="line">print(<span class="string">"输入 'q' 可终止程序。"</span>) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    first_number = input(<span class="string">"\n被除数: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"除数: "</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"不能被0除!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 等价程序</span></span><br><span class="line">print(<span class="string">"输入被除数和除数，将给出二者的商。"</span>)</span><br><span class="line">print(<span class="string">"输入 'q' 可终止程序。"</span>) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    first_number = input(<span class="string">"\n被除数: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"除数: "</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">        print(answer)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"不能被0除!"</span>)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理 FileNotFoundError 异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span> </span><br><span class="line">    <span class="string">"""计算一个文件大致包含多少个单词"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"文件 "</span> + filename + <span class="string">" 有大约 "</span> + str(num_words) + <span class="string">" 个英文单词。"</span>)</span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">'alice.txt'</span>, <span class="string">'siddhartha.txt'</span>, <span class="string">'moby_dick.txt'</span>, <span class="string">'little_women.txt'</span>] <span class="comment"># 其中siddhartha.txt不存在</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames: </span><br><span class="line">    count_words(filename)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 文件 alice.txt 有大约 29461 个英文单词。 </span></span><br><span class="line"><span class="comment"># 文件 moby_dick.txt 有大约 215136 个英文单词。  </span></span><br><span class="line"><span class="comment"># 文件 little_women.txt 有大约 189079 个英文单词。</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-4-存储数据"><a href="#10-4-存储数据" class="headerlink" title="10.4 存储数据"></a>10.4 存储数据</h2><ol>
<li><p>使用模块json存储数据</p>
<ul>
<li><p>模块json可将给简单的Python数据结构（列表、字典）转储到文件中，并在程序加载文件时将数据加载到数据结构。</p>
<p>还能与其他编程语言的人分享数据。</p>
</li>
<li><p>使用文件扩展名<code>.json</code>来指出文件存储的数据为JSON格式。</p>
</li>
</ul>
</li>
<li><p>存储数据 —— <code>json.dump()</code></p>
<ul>
<li>接受两个实参：要存储的数据、用于存储数据的文件对象</li>
</ul>
</li>
<li><p>读取数据 —— <code>json.load()</code></p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">    </span><br><span class="line">print(numbers)    <span class="comment"># [2, 3, 5, 7, 11, 13]</span></span><br></pre></td></tr></table></figure></div>

<p>​    实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""如果存储了用户名，就获取它"""</span></span><br><span class="line">    filename = <span class="string">'username.json'</span> </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj: </span><br><span class="line">            username = json.load(f_obj) </span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""提示用户输入用户名"""</span></span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""问候用户，并指出其名字"""</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">        </span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><p>比较<code>json.dumps</code>, <code>json.loads</code>和<code>json.dump</code>, <code>json.load</code></p>
<ul>
<li><p><code>json.dumps</code>, <code>json.loads</code> 进行Python的数据结构和JSON格式之间的转换</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python数据结构 -&gt; JSON</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'ACME'</span>,</span><br><span class="line">    <span class="string">'shares'</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">'price'</span> : <span class="number">542.23</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON -&gt; Python数据结构</span></span><br><span class="line">data = json.loads(json_str)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>json.dump</code>, <code>json.load</code> 将Python的数据结构存储到JSON<strong><u>文件</u></strong>，或从JSON文件中读取数据</p>
</li>
</ul>
</li>
</ol>
<h1 id="第十一章-测试代码"><a href="#第十一章-测试代码" class="headerlink" title="第十一章 测试代码"></a>第十一章 测试代码</h1><ol>
<li><p><code>单元测试</code>：用于核实函数的某个方面没有问题。</p>
</li>
<li><p><code>测试用例</code>：是一组单元测试，这些单元测试一起核实函数在各种情况下的行为都符合要求。</p>
<ul>
<li>良好的测试用例应考虑函数可能收到的各种输入，包含针对所有这些情况的测试。</li>
</ul>
</li>
<li><p><code>全覆盖式测试</code>：用例包含一整套单元测试，涵盖了各种可能的函数使用方式。</p>
</li>
<li><p>How为函数编写测试用例：</p>
<ul>
<li><p>导入<code>unittest</code>模块以及要测试的函数；</p>
</li>
<li><p>创建一个继承<code>unittest.TestCase</code>的类，此类的命名需包含<code>Test</code>字样；</p>
</li>
<li><p>在此类中编写一系列方法对函数行为的不同方面进行测试，测试方法必须以<code>test_</code>打头。</p>
<p>（这样这些方法才会在运行测试代码时自动运行）</p>
</li>
<li><p>Python在unittest.TestCase类中提供了很多<code>断言方法</code>，可用于在测试方法中核实得到的结果是否与期望的结果一致。</p>
<p>（测试方法中若要使用断言，要有self形参，通过<code>self.assertEqual()</code>方式使用断言）</p>
</li>
<li><p>测试文件代码行最后执行<code>unittest.main()</code>让Python运行这个文件中的测试。</p>
</li>
</ul>
</li>
<li><p><code>断言方法</code>能检查你认为应该满足的条件是否确实满足。若满足，则对程序行为的假设得到了确认，没有错误。否则，Python将引发异常。常见的6种断言方法如下：（使用需继承unittest.TestCase类）</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>assertEqual(a, b)</strong></td>
<td align="center"><strong>核实a == b</strong></td>
</tr>
<tr>
<td align="center"><strong>assertNotEqual(a, b)</strong></td>
<td align="center"><strong>核实a != b</strong></td>
</tr>
<tr>
<td align="center"><strong>assertTrue(x)</strong></td>
<td align="center"><strong>核实x为True</strong></td>
</tr>
<tr>
<td align="center"><strong>assertFalse(x)</strong></td>
<td align="center"><strong>核实x为False</strong></td>
</tr>
<tr>
<td align="center"><strong>assertIn(item,  list)</strong></td>
<td align="center"><strong>核实item在list中</strong></td>
</tr>
<tr>
<td align="center"><strong>assertNotIn(item, list)</strong></td>
<td align="center"><strong>核实item不在list中</strong></td>
</tr>
</tbody></table>
</li>
<li><p>方法<code>setUp()</code></p>
<ul>
<li>若在测试类中写了setUp()方法，则Python将先运行它，再运行各个以test_打头的方法。</li>
<li>setUp()让测试方法编写更容易：可在setUp()方法中创建一系列实例并设置它们的属性，再在测试方法中直接使用这些实例。（这些实例变量都<strong><u>需加上前缀self</u></strong>，即存储在测试类的属性中，因此可以在此类的任何地方使用）</li>
</ul>
</li>
<li><p>运行测试用例时，每完成一个单元测试，Python都打印一个字符：</p>
<ul>
<li>测试通过，打印一个句点</li>
<li>测试引发错误，打印一个E</li>
<li>测试导致断言失败，打印一个F</li>
</ul>
</li>
</ol>
<h2 id="11-1-测试函数"><a href="#11-1-测试函数" class="headerlink" title="11.1 测试函数"></a>11.1 测试函数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name_function.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last, middle=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""生成整洁的姓名"""</span> </span><br><span class="line">    <span class="keyword">if</span> middle: </span><br><span class="line">        full_name = first + <span class="string">' '</span> + middle + <span class="string">' '</span> + last </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        full_name = first + <span class="string">' '</span> + last </span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest </span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span> </span><br><span class="line">    <span class="string">"""测试name_function.py """</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span> </span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>, <span class="string">'joplin'</span>) </span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Janis Joplin'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_middle_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""能够正确地处理像Wolfgang Amadeus Mozart这样的姓名吗？"""</span> </span><br><span class="line">        formatted_name = get_formatted_name( <span class="string">'wolfgang'</span>, <span class="string">'mozart'</span>, <span class="string">'amadeus'</span>) </span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Wolfgang Amadeus Mozart'</span>) </span><br><span class="line">        </span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></div>



<h2 id="11-2-测试类"><a href="#11-2-测试类" class="headerlink" title="11.2 测试类"></a>11.2 测试类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># survey.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""收集匿名调查问卷的答案"""</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span> </span><br><span class="line">        <span class="string">"""存储一个问题，并为存储答案做准备"""</span> </span><br><span class="line">        self.question = question </span><br><span class="line">        self.responses = [] </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""显示调查问卷"""</span> </span><br><span class="line">        print(question) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self, new_response)</span>:</span> </span><br><span class="line">        <span class="string">"""存储单份调查答卷"""</span> </span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""显示收集到的所有答卷"""</span> </span><br><span class="line">        print(<span class="string">"Survey results:"</span>) </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses: </span><br><span class="line">            print(<span class="string">'- '</span> + response)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest </span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span> </span><br><span class="line">    <span class="string">"""针对AnonymousSurvey类的测试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个调查对象和一组答案，供使用的测试方法使用"""</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试单个答案会被妥善地存储"""</span></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试三个答案会被妥善地存储"""</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)          </span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>此处：setUp()方法创建一个调查对象my_survey和一个答案列表responses。</p><p>存储二者的变量名都含前缀self（即存储在属性中），故可在这个类的任何地方使用。</p>
          </div>




















]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit+EasyMock测试实例</title>
    <url>/2020/04/03/JUnit+EasyMock%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-EasyMock测试实例"><a href="#JUnit-EasyMock测试实例" class="headerlink" title="JUnit+EasyMock测试实例"></a>JUnit+EasyMock测试实例</h1><h2 id="一、实例一（纯Java）"><a href="#一、实例一（纯Java）" class="headerlink" title="一、实例一（纯Java）"></a>一、实例一（纯Java）</h2><p>要求：</p>
<p>编写一个简单的货币基金选择器，考虑以下几种货币类型：CNY(人民币)、USD(美元)、GBP(英镑)、EUR(欧元)、CAD(加元)，假设基金选择方法每次选择兑换值最高的货币作为投资目标，实验包括对JUnit和EasyMock的使用，最后给出关键的代码截图和测试用例运行结果。</p>
<h3 id="1-1-接口-ExchangeRate"><a href="#1-1-接口-ExchangeRate" class="headerlink" title="1.1 接口 ExchangeRate"></a>1.1 接口 ExchangeRate</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExchangeRate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">(String inputCurrency, String outputCurrency)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-需测试类-Currency-java"><a href="#1-2-需测试类-Currency-java" class="headerlink" title="1.2 需测试类 Currency.java"></a>1.2 需测试类 Currency.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Currency</span><span class="params">(<span class="keyword">double</span> amount,String unit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.unit=unit;</span><br><span class="line">        setAmount(amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = <span class="keyword">new</span> Double(amount2).longValue();</span><br><span class="line">        <span class="keyword">this</span>.cents=(<span class="keyword">int</span>) amount2*<span class="number">100</span>%<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Currency <span class="title">toChange</span><span class="params">(ExchangeRate converter)</span></span>&#123;</span><br><span class="line">        String[]u=&#123;<span class="string">"CNY"</span>,<span class="string">"USD"</span>,<span class="string">"GBP"</span>,<span class="string">"EUR"</span>,<span class="string">"CAD"</span>&#125;;</span><br><span class="line">        String changeUnit=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">double</span> maxRate=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> temp;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String tempUnit:u)&#123;</span><br><span class="line">                temp=converter.getRate(<span class="keyword">this</span>.unit,tempUnit);</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;maxRate) &#123;</span><br><span class="line">                    changeUnit=tempUnit;</span><br><span class="line">                    maxRate=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(changeUnit.equals(<span class="keyword">this</span>.unit)) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">double</span> input = amount+cents/<span class="number">100.0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Currency(input*maxRate,changeUnit);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Currency)&#123;</span><br><span class="line">            Currency other =(Currency) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.unit.equals(other.unit) &amp;&amp; <span class="keyword">this</span>.amount==other.amount &amp;&amp; <span class="keyword">this</span>.cents==other.cents;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.amount+<span class="string">"."</span>+cents+<span class="string">" "</span>+unit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-3-测试类"><a href="#1-3-测试类" class="headerlink" title="1.3 测试类"></a>1.3 测试类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Currency testObject=<span class="keyword">new</span> Currency(<span class="number">2.5</span>,<span class="string">"USD"</span>);</span><br><span class="line">        Currency expected=<span class="keyword">new</span> Currency(<span class="number">3.75</span>,<span class="string">"EUR"</span>);</span><br><span class="line"></span><br><span class="line">        ExchangeRate mockRate= EasyMock.createMock(ExchangeRate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"USD"</span>)).andReturn(<span class="number">1.0</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CNY"</span>)).andReturn(<span class="number">0.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"GBP"</span>)).andReturn(<span class="number">1.1</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"EUR"</span>)).andReturn(<span class="number">1.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CAD"</span>)).andReturn(<span class="number">0.3</span>);</span><br><span class="line">        EasyMock.replay(mockRate);</span><br><span class="line"></span><br><span class="line">        Currency actual=testObject.toChange(mockRate);</span><br><span class="line">        assertEquals(actual,expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <ol><li>Currency类中要覆盖Object的toString方法，是因为assertEquals方法中传入的是两个Currency对象，它会像根据Object的toString方法，将二者转化为String类型，再通过equals方法比较。默认转化为Currency对象的地址。</li><li>Currency类中要覆盖Object的equals方法，是因为Object的equals方法默认按地址比较，而不是内容。</li></ol>
          </div>

<hr>
<h2 id="二、实例二-（模拟JavaEE环境）"><a href="#二、实例二-（模拟JavaEE环境）" class="headerlink" title="二、实例二 （模拟JavaEE环境）"></a>二、实例二 （模拟JavaEE环境）</h2><h3 id="2-1-需测试类-LoginServlet-java"><a href="#2-1-需测试类-LoginServlet-java" class="headerlink" title="2.1 需测试类 LoginServlet.java"></a>2.1 需测试类 LoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">		String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">		String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(password)) &#123;</span><br><span class="line">			ServletContext context = getServletContext();</span><br><span class="line">			RequestDispatcher dispatcher = context.getNamedDispatcher(<span class="string">"dispatcher"</span>);</span><br><span class="line">			dispatcher.forward(req, res);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Login failed."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-测试类-TestLoginServlet-java"><a href="#2-2-测试类-TestLoginServlet-java" class="headerlink" title="2.2 测试类 TestLoginServlet.java"></a>2.2 测试类 TestLoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLoginServlet</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> ServletContext context;</span><br><span class="line">    <span class="keyword">private</span> RequestDispatcher dispatcher;</span><br><span class="line">    <span class="keyword">private</span> LoginServlet loginServlet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        request= EasyMock.createMock(HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        context=EasyMock.createMock(ServletContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        dispatcher=EasyMock.createMock(RequestDispatcher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        loginServlet=<span class="keyword">new</span> LoginServlet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.expect(context.getNamedDispatcher(<span class="string">"dispatcher"</span>)).andReturn(dispatcher);</span><br><span class="line">        dispatcher.forward(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        EasyMock.replay(context);</span><br><span class="line">        EasyMock.replay(dispatcher);</span><br><span class="line">        <span class="comment">//匿名类 </span></span><br><span class="line">        loginServlet =<span class="keyword">new</span> LoginServlet()&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> context;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">        EasyMock.verify(context);</span><br><span class="line">        EasyMock.verify(dispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"ad"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>测试类中之所以用到匿名类，是因为要测试的代码中使用了getServletContext()方法，此方法是Servlet上下文的方法，此处模拟了环境，也应模拟此方法。</p><p>How使用匿名类？<a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
          </div>

<hr>
<h2 id="三、实例三"><a href="#三、实例三" class="headerlink" title="三、实例三"></a>三、实例三</h2><h3 id="3-1-接口-DBUtility-java"><a href="#3-1-接口-DBUtility-java" class="headerlink" title="3.1 接口 DBUtility.java"></a>3.1 接口 DBUtility.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBUtility</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Statement stmt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(ResultSet rs)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-SalesOrders-java"><a href="#3-2-SalesOrders-java" class="headerlink" title="3.2 SalesOrders.java"></a>3.2 SalesOrders.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SalesOrder</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-SalesOrderImpl-java"><a href="#3-3-SalesOrderImpl-java" class="headerlink" title="3.3 SalesOrderImpl.java"></a>3.3 SalesOrderImpl.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderImpl</span> <span class="keyword">implements</span> <span class="title">SalesOrder</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> String orderNumber;</span><br><span class="line">	<span class="keyword">private</span> String region;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> totalPrice;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> totalPrice;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>&#123;<span class="keyword">this</span>.orderNumber = orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>&#123;<span class="keyword">this</span>.region = region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>&#123;<span class="keyword">this</span>.totalPrice = totalPrice;&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		orderNumber = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">		region = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">		totalPrice = resultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> totalPrice = <span class="keyword">this</span>.getTotalPrice();</span><br><span class="line">		<span class="keyword">double</span> totalPoints = <span class="number">0.0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"Africa"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Asia Pacific"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.9</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Europe"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.85</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"America"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.8</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.75</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (totalPoints &lt; <span class="number">500</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_A"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">1000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_B"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">2000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_C"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">4000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_D"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_E"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"orderNumber = "</span>+orderNumber+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"region = "</span>+region+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"totalPrice = "</span>+totalPrice+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"priceLevel = "</span>+<span class="keyword">this</span>.getPriceLevel()+<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-测试-SalesOrderTestCase-java"><a href="#3-4-测试-SalesOrderTestCase-java" class="headerlink" title="3.4 测试 SalesOrderTestCase.java"></a>3.4 测试 SalesOrderTestCase.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.testcase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.expectLastCall;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.demo.matcher.SQLEquals.sqlEquals;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IMocksControl;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.DBUtility;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrder;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrderImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderTestCase</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSalesOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		IMocksControl control = EasyMock.createControl();</span><br><span class="line">		</span><br><span class="line">		DBUtility mockDBUtility = control.createMock(DBUtility<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mockDBUtility.getConnection();</span><br><span class="line">			EasyMock.expectLastCall().andStubReturn(mockConnection);</span><br><span class="line"></span><br><span class="line">			mockConnection.createStatement();</span><br><span class="line">			expectLastCall().andStubReturn(mockStatement);</span><br><span class="line"></span><br><span class="line">			mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>));</span><br><span class="line">			expectLastCall().andStubReturn(mockResultSet);</span><br><span class="line"></span><br><span class="line">			mockResultSet.next();</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">true</span>).times(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">false</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_001"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_002"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_003"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">2</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Asia Pacific"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Europe"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"America"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">1350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">5350.0</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			control.replay();</span><br><span class="line">			</span><br><span class="line">			Connection conn = mockDBUtility.getConnection();</span><br><span class="line">			Statement stat = conn.createStatement();</span><br><span class="line">			ResultSet rs = stat.executeQuery(<span class="string">"select * from sales_order_table"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			String[] priceLevels = &#123; <span class="string">"Level_A"</span>, <span class="string">"Level_C"</span>, <span class="string">"Level_E"</span> &#125;;</span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">				SalesOrder order = <span class="keyword">new</span> SalesOrderImpl();</span><br><span class="line">				order.loadDataFromDB(rs);</span><br><span class="line">				assertEquals(order.getPriceLevel(), priceLevels[i]);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;		</span><br><span class="line">			control.verify();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-自定义参数匹配器-SQLEquals-java"><a href="#3-5-自定义参数匹配器-SQLEquals-java" class="headerlink" title="3.5 自定义参数匹配器 SQLEquals.java"></a>3.5 自定义参数匹配器 SQLEquals.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">		buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String) <span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line">        reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyMock入门使用</title>
    <url>/2020/04/03/EasyMock%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>

<!-- toc -->


<h1 id="EasyMock入门使用"><a href="#EasyMock入门使用" class="headerlink" title="EasyMock入门使用"></a>EasyMock入门使用</h1><h2 id="一、EasyMock安装"><a href="#一、EasyMock安装" class="headerlink" title="一、EasyMock安装"></a>一、EasyMock安装</h2><ol>
<li><p>EasyMock是一套通过简单的方法对于指定的接口或类生成Mock对象的类库，它能利用对接口或类的模拟来辅助单元测试。</p>
</li>
<li><p>要使用EasyMock辅助单元测试，添加easymock的jar包即可。</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" data-fancybox="group" data-caption="image-20200402190315174" class="fancybox"><img alt="image-20200402190315174" style="zoom:40%;" title="image-20200402190315174" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" class="lazyload"></a>

</li>
</ol>
<hr>
<h2 id="二、EasyMock使用"><a href="#二、EasyMock使用" class="headerlink" title="二、EasyMock使用"></a>二、EasyMock使用</h2><p>通过EasyMock，我们可以为指定的接口动态地创建Mock对象，并利用Mock对象来模拟协同模块或领域对象，从而使单元测试顺利进行。此过程可划分为以下步骤：</p>
<ul>
<li>使用EasyMock生成Mock对象</li>
<li>设定Mock对象的预期行为和输出</li>
<li>将Mock对象切换到Replay状态</li>
<li>调用Mock对象方法进行单元测试</li>
<li>对Mock对象的行为进行验证</li>
</ul>
<h3 id="2-1-使用EasyMock生成Mock对象"><a href="#2-1-使用EasyMock生成Mock对象" class="headerlink" title="2.1 使用EasyMock生成Mock对象"></a>2.1 使用EasyMock生成Mock对象</h3><p>根据指定的接口或类，EasyMock能动态地创建Mock对象。</p>
<h4 id="2-1-1-为接口生成Mock对象"><a href="#2-1-1-为接口生成Mock对象" class="headerlink" title="2.1.1 为接口生成Mock对象"></a>2.1.1 为接口生成Mock对象</h4><p><font class="fb">Eg：以<code>ResultSet</code>接口为例</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">ResultSet</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.<span class="function">String <span class="title">getString</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>通常，构建一个真实的 <code>RecordSet</code> 对象需要经过一个复杂的过程：在开发过程中，开发人员通常会编写一个 <code>DBUtility</code> 类来获取数据库连接 <code>Connection</code>，并利用 <code>Connection</code> 创建一个 <code>Statement</code>。执行一个 <code>Statement</code> 可以获取到一个或多个 <code>ResultSet</code> 对象。这样的构造过程复杂并且依赖于数据库的正确运行。数据库或是数据库交互模块出现问题，都会影响单元测试的结果。</p>
</li>
<li><p>我们可以使用 EasyMock 动态构建 <code>ResultSet</code> 接口的 Mock 对象来解决这个问题。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">import</span> org.easymock.Easymock; <span class="comment">//静态方法引入</span></span><br><span class="line">ResultSet mockResultSet = createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>或</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.easymock.Easymock; </span><br><span class="line">ResultSet mockResultSet = Easymock.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-2-为类生成Mock对象"><a href="#2-1-2-为类生成Mock对象" class="headerlink" title="2.1.2 为类生成Mock对象"></a>2.1.2 为类生成Mock对象</h4><p>EasyMock默认只支持为接口生成Mock对象，若要为类生成Mock对象，需下载扩展包<code>EasyMock Class Extension</code>，在对具体类进行模拟时，只需把 <code>org.easymock.EasyMock</code>替换为 <code>org.easymock.classextension.Easymock</code>。</p>
<h4 id="2-1-3-使用IMocksControl对象管理Mock对象"><a href="#2-1-3-使用IMocksControl对象管理Mock对象" class="headerlink" title="2.1.3 使用IMocksControl对象管理Mock对象"></a>2.1.3 使用IMocksControl对象管理Mock对象</h4><p>若在相对复杂的测试用例中使用多个Mock对象，可使用EasyMock提供的生成和管理Mock对象的机制。</p>
<p>EasyMock类的<code>createControl</code>方法能创建一个接口<code>IMocksControl</code>的对象，此对象能创建并管理多个Mock对象。</p>
<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createControl();</span><br><span class="line">java.sql.Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-设定Mock对象的预期行为和输出"><a href="#2-2-设定Mock对象的预期行为和输出" class="headerlink" title="2.2 设定Mock对象的预期行为和输出"></a>2.2 设定Mock对象的预期行为和输出</h3><ol>
<li><p>在一个完整测试中，一个Mock对象会经历两个状态：Record状态和Replay状态。</p>
<p>Mock对象一经创建，状态为Record，Record状态下用户可以设定Mock对象的预期行为和输出，这些对象行为会被录制下来，保存在Mock对象中。</p>
</li>
<li><p>添加Mock对象行为的过程分为三步：</p>
<ul>
<li>对Mock对象的特定方法作出调用</li>
<li>通过org.easymock.EasyMock提供的静态方法expectLastCall获取上一次方法调用所对应的IExpectionSetters实例</li>
<li>用过IExpectionSetters实例设定Mock对象的预期输出（有两种类型）<ul>
<li>产生返回值</li>
<li>抛出异常</li>
</ul>
</li>
</ul>
<p>（Mock对象的行为可简单理解为Mock对象的调用和方法调用所产生的输出。）</p>
</li>
</ol>
<h4 id="2-2-1-设定预期返回值"><a href="#2-2-1-设定预期返回值" class="headerlink" title="2.2.1 设定预期返回值"></a>2.2.1 设定预期返回值</h4><p>设定返回值对应接口<code>IExpectionSetters</code>的<code>andReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andReturn</span><span class="params">(T value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<h5 id="2-2-1-1-返回值不是void"><a href="#2-2-1-1-返回值不是void" class="headerlink" title="2.2.1.1 返回值不是void"></a>2.2.1.1 返回值不是void</h5><ol>
<li><p><font class="fb">Eg：仍用 <code>ResultSet</code> 接口的 Mock 对象为例，若希望方法 <code>mockResultSet.getString(1)</code> 的返回值为 “My return value”，则：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">EasyMock.expectLastCall().andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>

<p> <font class="fb">或：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若希望 <strong>某方法的调用总是返回一个相同的值</strong> ，为避免每次调用都为Mock对象的行为进行一次设定，可用默认返回值的方法——<code>andSubReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubReturn</span><span class="params">(Object value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：假设我们创建了 <code>Statement</code> 和 <code>ResultSet</code> 接口的 Mock 对象 mockStatement 和 mockResultSet，在测试过程中，我们希望 mockStatement 对象的 <code>executeQuery</code> 方法总是返回 mockResultSet，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>)).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h5 id="2-2-1-2-返回值为void"><a href="#2-2-1-2-返回值为void" class="headerlink" title="2.2.1.2 返回值为void"></a>2.2.1.2 返回值为void</h5><p>若方法的返回值类型为void，则对于此类方法，我们无需设定返回值，只需设置调用次数就可以。（也可以不设置）</p>
<p>How设定调用次数，详看2.2.3。</p>
<p><font class="fb">Eg：以 <code>ResultSet</code> 接口的 <code>close</code> 方法为例，假设在测试过程中，该方法被调用3至5次，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.close();</span><br><span class="line">EasyMock.expectLastCall().times(<span class="number">3</span>,<span class="number">5</span>);<span class="comment">// 最新版本的EasyMock可以忽略此句</span></span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResult.close()).times(<span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-2-设定预期异常抛出"><a href="#2-2-2-设定预期异常抛出" class="headerlink" title="2.2.2 设定预期异常抛出"></a>2.2.2 设定预期异常抛出</h4><p>设定预期抛出异常对应接口<code>IExpectionSetters</code>的<code>andThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>类似的，设定抛出默认异常对应接口<code>IExpectionSetters</code>的<code>andStubThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expectLastCall().andThrow(</span><br><span class="line">                <span class="keyword">new</span> MyException(<span class="keyword">new</span> RuntimeException())).anyTimes();</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-3-设定预期方法调用次数"><a href="#2-2-3-设定预期方法调用次数" class="headerlink" title="2.2.3 设定预期方法调用次数"></a>2.2.3 设定预期方法调用次数</h4><ol>
<li>设定确定的调用次数：通过接口<code>IExpectionSetters</code>的<code>times</code>方法。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IExpectationSetters&lt;T&gt;times(<span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：我们希望 mockResultSet 的 <code>getString</code> 方法在测试过程中被调用3次，期间的返回值都是 “My return value”，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">expectLastCall().andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设定非准确调用次数：<ul>
<li><code>times(int minTimes, int maxTimes)</code>：该方法最少被调用 minTimes 次，最多被调用 maxTimes 次。</li>
<li><code>atLeastOnce()</code>：该方法至少被调用一次。</li>
<li><code>anyTimes()</code>：该方法可以被调用任意次。</li>
</ul>
</li>
</ol>
<h4 id="2-2-4-若返回结果在运行时才能确定"><a href="#2-2-4-若返回结果在运行时才能确定" class="headerlink" title="2.2.4 若返回结果在运行时才能确定"></a>2.2.4 若返回结果在运行时才能确定</h4><p>很可能某个方法期望的返回结果不是固定的，例如根据传入参数不同而不同；这时需要使用<strong>andAnswer</strong>()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockService.execute(EasyMock.anyInt())).andAnswer(<span class="keyword">new</span> IAnswer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">answer</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Integer count = (Integer) EasyMock.getCurrentArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>​    注意：通过<code>EasyMock.getCurrentArguments()</code>可以获取传入参数！</p>
          </div>



<h3 id="2-3-将Mock对象切换到Replay状态——replay"><a href="#2-3-将Mock对象切换到Replay状态——replay" class="headerlink" title="2.3 将Mock对象切换到Replay状态——replay"></a>2.3 将Mock对象切换到Replay状态——replay</h3><ol>
<li><p>在生成Mock对象和设定Mock对象行为的两个阶段，Mock对象的状态均为Record，此阶段Mock对象会记录用户对预期行为和输出的设定。</p>
</li>
<li><p>在使用Mock对象隐形实际的测试前，需将Mock对象的状态切换为Replay，此阶段Mock对象能根据设定对特定的方法调用作出预期的响应。</p>
</li>
<li><p>将对象切换到Replay状态有两种方法：</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.replay(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.replay();</span><br></pre></td></tr></table></figure></div>

<p>此语句可将通过coltrol的createMock方法生成的所有Mock对象均切换为Replay状态。</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-4-调用Mock对象方法进行单元测试"><a href="#2-4-调用Mock对象方法进行单元测试" class="headerlink" title="2.4 调用Mock对象方法进行单元测试"></a>2.4 调用Mock对象方法进行单元测试</h3><p>此部分放到JUnit+EasyMock实例中。</p>
<h3 id="2-5-对Mock对象的行为进行验证——verify"><a href="#2-5-对Mock对象的行为进行验证——verify" class="headerlink" title="2.5 对Mock对象的行为进行验证——verify"></a>2.5 对Mock对象的行为进行验证——verify</h3><p>在利用Mock对象进行实际的测试过程后，还需对Mock对象的方法调用的次数进行验证。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.verify(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.verify();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象方法的调用次数。</p>
</li>
</ul>
<h3 id="2-6-Mock对象的重用——reset"><a href="#2-6-Mock对象的重用——reset" class="headerlink" title="2.6 Mock对象的重用——reset"></a>2.6 Mock对象的重用——reset</h3><p>为避免生成过多的Mock对象，EasyMock允许对原有的Mock对象进行重用。</p>
<p>可使用reset方法对Mock对象重新初始化。重新初始化后，Mock对象被置为Record状态。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.reset(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.reset();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象重新初始化。</p>
</li>
</ul>
<hr>
<h2 id="三、在EasyMock中使用参数匹配器"><a href="#三、在EasyMock中使用参数匹配器" class="headerlink" title="三、在EasyMock中使用参数匹配器"></a>三、在EasyMock中使用参数匹配器</h2><p>使用Mock对象进行实际的测试过程中，EasyMock会根据方法名和参数来匹配一个预期方法的调用。</p>
<p>此时，EasyMock对参数的匹配默认使用equals()方法进行比较，这可能会引起一些问题，因此EasyMock提供了一些参数匹配方式。</p>
<div class="note info">
            <p><font class="fb">如2.2.1.1中创建的mockStatement对象：</font></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div><p>实际调用中，可能会遇到SQL语句中某些关键词大小写问题（因为SQL语句不区分大小写）如将SELECT写成select，此时EasyMock采用的默认匹配器equals方法将认为参数不匹配，则Mock对象的预期方法不会被调用。</p>
          </div>

<h3 id="3-1-EasyMock预定义的参数匹配器"><a href="#3-1-EasyMock预定义的参数匹配器" class="headerlink" title="3.1 EasyMock预定义的参数匹配器"></a>3.1 EasyMock预定义的参数匹配器</h3><ol>
<li><p><code>anyObject()</code>：任意输入值都与预期值匹配；</p>
</li>
<li><p><code>aryEq(X value)</code>：通过<code>Arrays.equals()</code>进行匹配，适用于数组对象；</p>
</li>
<li><p><code>isNull()</code>：当输入值为Null时匹配；</p>
</li>
<li><p><code>notNull()</code>：当输入值不为Null时匹配；</p>
</li>
<li><p><code>same(X value)</code>：当输入值和预期值是同一个对象时匹配；</p>
</li>
<li><p><code>lt(X value), leq(X value), geq(X value), gt(X value)</code>：当输入值小于、小等于、大等于、大于预期值时匹配，适用于数值类型；</p>
</li>
<li><p><code>startsWith(String prefix), contains(String substring), endsWith(String suffix)</code>：当输入值以预期值开头、包含预期值、以预期值结尾时匹配，适用于String类型；</p>
</li>
<li><p><code>matches(String regex)</code>：当输入值与正则表达式匹配时匹配，适用于String类型。</p>
<p><font class="fb">例如：若我对mockStatement具体执行的语句并不关注，希望所有输入的字符串都能够匹配这一方法的调用</font></p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(anyObject())).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p>详细参阅 <a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<h3 id="3-2-EasyMock自定义参数匹配器"><a href="#3-2-EasyMock自定义参数匹配器" class="headerlink" title="3.2 EasyMock自定义参数匹配器"></a>3.2 EasyMock自定义参数匹配器</h3><ol>
<li><p>预定义的参数匹配器无法满足一些复杂情况，此时需自己定义参数匹配器。</p>
<p><font class="fb">如：在3.1中我们希望有一个匹配器对SQL中关键词的大小写不敏感，使用anyObject其实并不好，此时我们可以自定义参数匹配器SQLEquals。</font></p>
</li>
<li><p>How自定义参数匹配器：</p>
<ul>
<li><p>实现 <code>org.easymock.IArgumentMatcher</code> 接口</p>
<ul>
<li><p><code>matches(Object actual)</code> 方法应当实现输入值和预期值的匹配逻辑</p>
</li>
<li><p><code>appendTo(StringBuffer buffer)</code> 方法可以添加当匹配失败时需要显示的信息</p>
</li>
</ul>
</li>
<li><p>使用静态方法包装实现接口的类</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"><span class="comment">//实现IArgumentMatcher接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123; </span><br><span class="line">   <span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//当匹配失败时需要显示的信息</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">       buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//输入值和预期值的匹配逻辑</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String) <span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//自定义参数匹配器SQLEquals静态方法	</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123; </span><br><span class="line">       reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">       <span class="keyword">return</span> in;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">使用自定义的sqlEquals匹配器：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>))).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="四、特殊的Mock对象类型"><a href="#四、特殊的Mock对象类型" class="headerlink" title="四、特殊的Mock对象类型"></a>四、特殊的Mock对象类型</h2><p>上述创建的Mock对象都属于EasyMock默认的Mock对象类型，它对预期方法的调用顺序不敏感，对非预期的方法调用抛出AssertionError。</p>
<p>除此默认类型，EasyMock还提供一些特殊的Mock类型用于支持不同的需求。</p>
<h3 id="4-1-Strick-Mock对象"><a href="#4-1-Strick-Mock对象" class="headerlink" title="4.1 Strick Mock对象"></a>4.1 Strick Mock对象</h3><p>Stick Mock对象——对方法调用的先后顺序敏感，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createStrickMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createStrickMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Stick Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createStrictControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-2-Nice-Mock对象"><a href="#4-2-Nice-Mock对象" class="headerlink" title="4.2 Nice Mock对象"></a>4.2 Nice Mock对象</h3><p>Nice Mock对象——默认返回0，null或false等“无效值”，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createNiceMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createNiceMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Nice Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createNiceControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="五、EasyMock-的工作原理"><a href="#五、EasyMock-的工作原理" class="headerlink" title="五、EasyMock 的工作原理"></a>五、EasyMock 的工作原理</h2><p>参阅  <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<hr>
<h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<p><a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<p><a href="https://blog.csdn.net/vking_wang/article/details/9170979" target="_blank" rel="noopener">【JUnit】EasyMock用法总结</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit测试实例</title>
    <url>/2020/03/31/JUnit%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-测试实例"><a href="#JUnit-测试实例" class="headerlink" title="JUnit 测试实例"></a>JUnit 测试实例</h1><h2 id="一、-实验要求"><a href="#一、-实验要求" class="headerlink" title="一、 实验要求"></a>一、 实验要求</h2><p>对Rectangle程序进行测试：根据已经学习的测试思想，对函数getArea()、getPerimeter()和findMax()进行测试。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length*width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">2</span>*length + width;&#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">                maxIndex = i;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;;</span><br><span class="line">        System.out.println(<span class="string">"面积最大："</span>+findMax(arr, <span class="keyword">new</span> areaCompare()).getObject());</span><br><span class="line">        System.out.println(<span class="string">"周长最长："</span>+findMax(arr, <span class="keyword">new</span> perimeterCompare()).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note primary">
            <p>若对代码中实现比较器的写法不理解，请看“四、参考文献” <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
          </div>



<h2 id="二、测试过程"><a href="#二、测试过程" class="headerlink" title="二、测试过程"></a>二、测试过程</h2><h3 id="2-1-测试getArea-方法——返回矩形面积"><a href="#2-1-测试getArea-方法——返回矩形面积" class="headerlink" title="2.1 测试getArea()方法——返回矩形面积"></a>2.1 测试getArea()方法——返回矩形面积</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length*width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>根据Rect类可得成员变量length、width为int型，含义为矩形的长宽，故合法输入为正数，负数和0位非法输入。</p>
<p>此处假设非法输入返回值为-1。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectArea</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width, <span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getArea方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:&#123;0&#125;*&#123;1&#125;=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>,-<span class="number">3</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">5</span>,-<span class="number">6</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getArea(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>由此可见，此方法代码并没有考虑输入为0和负数的非法情况。</p>
</li>
</ol>
<hr>
<h3 id="2-2-测试getPerimeter-方法——返回矩形周长"><a href="#2-2-测试getPerimeter-方法——返回矩形周长" class="headerlink" title="2.2 测试getPerimeter()方法——返回矩形周长"></a>2.2 测试getPerimeter()方法——返回矩形周长</h3>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*length + width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li><p>测试分析</p>
<p>同理于测试getArea()，此处需要的参数只有length、width，所以考虑负数和0的非法输入。</p>
<p>设计测试用例如下：   </p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectPerimeter</span><span class="params">(<span class="keyword">int</span> length,<span class="keyword">int</span> width,<span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getPerimeter方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:(&#123;0&#125;+&#123;1&#125;)*2=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">22</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerimeter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getPerimeter(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
<td align="center">-10</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>可见，方法代码并没有考虑输入为0和负数的非法情况，且计算过程存在问题，返回去看代码发现没有加括号，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(length+width);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h3 id="2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象"><a href="#2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象" class="headerlink" title="2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象"></a>2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">        <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">            maxIndex = i;</span><br><span class="line">    <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-3-1-比较器areaCompare——比较面积"><a href="#2-3-1-比较器areaCompare——比较面积" class="headerlink" title="2.3.1 比较器areaCompare——比较面积"></a>2.3.1 比较器areaCompare——比较面积</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>需要参数length、width，所以考虑负数和0的非法输入。</p>
<p>需注意⚠️：若比较面积时输入的矩形数组都为非法输入（矩形长宽都存在0或负数），getArea()因为非法输入都return -1，则areaCompare比较器中比较函数compare都会return 0，则findMax中return arr[0]，返回一个非法矩形，显然错误。故此处findMax也要有一个对应非法输入时的输出，假设为null。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxArea</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">20</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.areaCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
<td align="center">(3,10)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(0,3)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(0,3)</td>
</tr>
</tbody></table>
<p>可见，代码没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况，且通过第一个测试用例可知，计算过程存在问题，返回去看代码发现areaCompare比较器中比较函数compare存在逻辑错误，应返回最大矩形对象，却返回最小矩形对象，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h4 id="2-3-2-比较器perimeterCompare——比较周长"><a href="#2-3-2-比较器perimeterCompare——比较周长" class="headerlink" title="2.3.2 比较器perimeterCompare——比较周长"></a>2.3.2 比较器perimeterCompare——比较周长</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>同理于areaCompare，需要参数length、width，所以考虑负数和0的非法输入；设置null为全非法输入的返回值。<br>设计测试用例</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxPerimeter</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">2</span>,<span class="number">65</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.perimeterCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
</ol>
<ol start="3">
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(6,0)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(6,0)</td>
</tr>
</tbody></table>
<p>可见代码同样没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况。</p>
</li>
</ol>
<hr>
<h2 id="三、修改代码"><a href="#三、修改代码" class="headerlink" title="三、修改代码"></a>三、修改代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> length*width;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>*(length + width);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(((Rect)arr[maxIndex]).getLength()&lt;=<span class="number">0</span> || ((Rect)arr[maxIndex]).getWidth()&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span></span>&#123;</span><br><span class="line">             <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Rect rect1=findMax(arr, <span class="keyword">new</span> areaCompare());</span><br><span class="line">        Rect rect2=findMax(arr, <span class="keyword">new</span> perimeterCompare());</span><br><span class="line">        <span class="keyword">if</span>(rect1 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"面积最大："</span>+rect1.getObject());</span><br><span class="line">        <span class="keyword">if</span>(rect2 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"周长最长："</span>+rect2.getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为方便测试，使用测试套件Suite，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;TestRectArea<span class="class">.<span class="keyword">class</span>,<span class="title">TestRectPerimeter</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxArea</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxPerimeter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:48%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" class="lazyload"></a>

<p>程序执行结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" data-fancybox="group" data-caption="image-20200331140852779" class="fancybox"><img alt="image-20200331140852779" style="zoom:33%;" title="image-20200331140852779" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" class="lazyload"></a>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p> <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit+idea入门使用</title>
    <url>/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Junit-idea入门使用"><a href="#Junit-idea入门使用" class="headerlink" title="Junit+idea入门使用"></a>Junit+idea入门使用</h1><h2 id="一、Junit配置"><a href="#一、Junit配置" class="headerlink" title="一、Junit配置"></a>一、Junit配置</h2><ol>
<li><p>Intellij idea添加Junit插件</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" data-fancybox="group" data-caption="image-20200326203540257" class="fancybox"><img alt="image-20200326203540257" title="image-20200326203540257" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" class="lazyload"></a></p>
<p>快捷键(command+，)进入preference，在Plugins中搜索Junit，并安装JunitGeneratorV2.0，安装完毕后重启idea。</p>
</li>
<li><p>在需要测试的项目中导入jar包</p>
<p>Hamcrest Core包 <a href="https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core/1.3" target="_blank" rel="noopener">下载地址</a></p>
<p>Junit4包  <a href="https://mvnrepository.com/artifact/junit/junit/4.12" target="_blank" rel="noopener">下载地址</a></p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" data-fancybox="group" data-caption="image-20200326205514332" class="fancybox"><img alt="image-20200326205514332" style="zoom:50%;" title="image-20200326205514332" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" class="lazyload"></a>

<p>快捷键（command+；）进入Project Structure，==》model==》Dependencies中添加jar</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" data-fancybox="group" data-caption="image-20200326205637184" class="fancybox"><img alt="image-20200326205637184" title="image-20200326205637184" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" class="lazyload"></a></p>
</li>
<li><p>Junit具体设置，可在preference中查看</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" data-fancybox="group" data-caption="image-20200326210734815" class="fancybox"><img alt="image-20200326210734815" title="image-20200326210734815" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="二、使用Junit进行测试"><a href="#二、使用Junit进行测试" class="headerlink" title="二、使用Junit进行测试"></a>二、使用Junit进行测试</h2><p>Eg：编写简单的计算器，包含加减乘除4个功能，参数为double类型。</p>
<ol>
<li>创建java工程，在src中创建Calculator类，代码如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1,<span class="keyword">double</span> n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.add(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.subtract(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.multiply(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n2==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.divide(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <p>​      注：之所以要用上面这种写法，而不用如下代码，是为了避免double的精度误差：</p>
          </div>

</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1-n2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>​        具体可查看<a href="https://blog.csdn.net/m0_37450089/article/details/80270893" target="_blank" rel="noopener">java double相对精度误差</a></p>
<ol start="2">
<li><p>创建src同级目录test，并将之设为Test根目录，之后此文件夹会显示为绿色。</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" data-fancybox="group" data-caption="image-20200326211308852" class="fancybox"><img alt="image-20200326211308852" style="zoom:30%;" title="image-20200326211308852" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" class="lazyload"></a>
</li>
<li><p>在test目录中编写测试类</p>
<p>选中要测试的类，右键选择Test，或者直接快捷键shift+command+T</p>
<p>点击Create New Test，之后可以设置生成的测试类名，是否有setup等方法，以及要测试的方法</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" data-fancybox="group" data-caption="image-20200326211548128" class="fancybox"><img alt="image-20200326211548128" style="zoom:35%;" title="image-20200326211548128" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" data-fancybox="group" data-caption="image-20200326211803437" class="fancybox"><img alt="image-20200326211803437" style="zoom:30%;" title="image-20200326211803437" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" data-fancybox="group" data-caption="image-20200326211931771" class="fancybox"><img alt="image-20200326211931771" style="zoom:45%;" title="image-20200326211931771" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" class="lazyload"></a>

<p>生成效果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" data-fancybox="group" data-caption="image-20200326212315132" class="fancybox"><img alt="image-20200326212315132" style="zoom:40%;" title="image-20200326212315132" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" class="lazyload"></a>

<p>编写代码如下，点击测试类左侧的小箭头即可运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">2.3</span>,<span class="number">5.4</span>),<span class="number">7.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">3.2</span>,<span class="number">5.3</span>),-<span class="number">2.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">3.1</span>,<span class="number">5.2</span>),<span class="number">16.12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.div(<span class="number">3.2</span>,<span class="number">5.0</span>),<span class="number">0.64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <ol><li>因为不继承TestCase，assertEquals方法来自import static org.junit.Assert.*;此方法已过时。以下提供两种解决方法：</li></ol><ul><li>extends TestCase，以使用TestCase类的assertEquals方法。</li><li>import static org.junit.Assert.*; 使用assertEquals(x1,x2,x3);三个参数的形式，表示判断x1与x2是否在误差x3内相等。 </li></ul><ol start="2"><li>格式规范：</li></ol><ul><li>extends TestCase并在方法前加test</li><li>import org.junit.Test，在测试方法前使用注解@Test（不继承TestCase）</li></ul><p>​        否则会出现如下报错：<br><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" data-fancybox="group" data-caption="image-20200326213406633" class="fancybox"><img alt="image-20200326213406633" style="zoom:50%;" title="image-20200326213406633" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" class="lazyload"></a></p><p>​        这是因为以前版本的JUnit通过命名约定和反射来定位测试用例，要求测试方法以“test”开头+方法名，且测试类需要继承TestCase。JUnit4中简化了这个操作，只需要在测试类中引入org.junit.Test，在测试方法前使用注解@Test，JUnit就可以侦测到此测试方法，保持了代码的简洁。</p><p>​    PS：在JUnit4中仍可以以原来的方式进行测试（继承TestCase并在方法前加test），但这样就没有必要用到注解，因为一旦继承了TestCase，注解就会失效，此时没有test前缀，会报上述错误AssertionFailedError:No tests found……</p>
          </div>



</li>
</ol>
<ol start="4">
<li><p>使用测试套件Suite</p>
<p>​        因为3所说的编写Test类，对于每个测试方法，只能写一个测试用例。则编写多个测试用例就需要写多个测试类。那如何使这些测试类同时一起运行呢？答案是使用Suite。</p>
<p>​        Suite是一种批量运行测试类的方法，以方便我们在每次进行系统测试时，只需执行若干测试套件而不是执行无数测试用例。</p>
<div class="note danger">
            <p>​        测试套件中不仅可以包含基本的测试类，而且可以包含其它的测试套件。但是，一定要保证测试套件之间没有循环包含关系，否则将出现死循环。</p>
          </div>

<p>​        为了演示，此处再编写CalculatorTest2类，代码如下：    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest2</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator =<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">23.0</span>,<span class="number">1.0</span>),<span class="number">24.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">9.8</span>,<span class="number">5.3</span>),<span class="number">4.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">2.0</span>,<span class="number">6.0</span>),<span class="number">12.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     assertEquals(calculator.div(<span class="number">5.0</span>,<span class="number">0.0</span>),-<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法一：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestSuite; </span><br><span class="line"><span class="keyword">import</span> junit.framework.Test; </span><br><span class="line"><span class="keyword">import</span> junit.textui.TestRunner; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> <span class="keyword">extends</span> <span class="title">TestSuite</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//TestSuite功能练习</span></span><br><span class="line">        TestSuite suite = <span class="keyword">new</span> TestSuite(<span class="string">"TestSuite Test"</span>); </span><br><span class="line">        suite.addTestSuite(TestCalculator<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTestSuite(TestCalculator2<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTest(<span class="keyword">new</span> TestCalculator());</span><br><span class="line">        <span class="comment">//添加一个具体的测试用例</span></span><br><span class="line">        suite.addTest(TestSuite.createTest(TestCalculator<span class="class">.<span class="keyword">class</span>,“<span class="title">testAdd</span>”))</span>;</span><br><span class="line">        <span class="keyword">return</span> suite; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">        TestRunner.run(suite()); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* suite方法命名规则如下：</span></span><br><span class="line"><span class="comment">       1）必须以“suite”方法命名；</span></span><br><span class="line"><span class="comment">       2）suite方法的访问修饰权限必须为public；</span></span><br><span class="line"><span class="comment">       3）.suite方法必须为静态方法；</span></span><br><span class="line"><span class="comment">       4）.suite方法必须没有参数。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法二（此处我采用了写法二）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;CalculatorTest<span class="class">.<span class="keyword">class</span>,<span class="title">CalculatorTest2</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note info">
            <p>​        @RunWith：当类被@RunWith注解修饰，或者类继承一个被@RunWith注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不是使用JUnit默认的运行器。</p><p>​        在执行JUnit测试引擎的run方法时会调用TestSuite的的run方法，TestSuite在执行自身run方法时会遍历所有TestCase对象的run方法，同一个TestCase子类的run方法会根据自身所包含的测试用例个数被执行相应的次数。</p>
          </div>

<p>​    执行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" style="zoom:45%;" title="6" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" class="lazyload"></a>
</li>
<li><p>参数化测试——使用Parameterized</p>
<p>​        当我们编写了大量的单元测试方法后，我们发现这些方法其实大同小异，只是参数不同（测试边界值或者测试异常值）。在以前的 JUnit版本上，并没有好的解决方法，而现在我们可以使用JUnit提供的参数化测试方式解决这个问题。</p>
<p>​        若要避免一个测试用例写一个测试类的情况，可使用Parameterized，写多个测试用例。</p>
<div class="note info">
            <ol><li>JUnit4通过Parameterized运行器实现参数化测试。@RunWith(parameterized.class)</li><li>提供数据的方法要加@Parameters注解，此方法必须为静态方法（static），且返回一个集合（Collection）。<br> 此处使用了interable接口的写法也🉑️（因为Collection是interable接口的实现，实现了interable接口就可以使用foreach）<br> 为更容易区分参数化测试的每个测试用例，可在@Parameters注解上提供一个名称。此名称可包含占位符，此占位符在运行时将被替换。<ul><li>{index}:当前参数的索引</li><li>{0},{1},……:第一个参数，第二个参数……</li></ul></li><li>当执行参数化测试类时，实例的测试方法和测试数据将在测试示例创建时交叉连接在一起。 </li></ol>
          </div>

<p>​        创建一个类TestCalculator，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(value = Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberB;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCalculator</span><span class="params">(<span class="keyword">double</span> numberA,<span class="keyword">double</span> numberB,<span class="keyword">double</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberA=numberA;</span><br><span class="line">        <span class="keyword">this</span>.numberB=numberB;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:add(&#123;0&#125;+&#123;1&#125;)=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data1()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">2.0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3.4</span>,<span class="number">5.8</span>,<span class="number">9.2</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        assertEquals(calculator.add(numberA,numberB),expected,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>运行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" style="zoom:50%;" title="8" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" class="lazyload"></a>
<div class="note warning">
            <p>若测试只需单个参数，则无需将其包装为数组，此情况可提供一个迭代器或对象数组。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;? extends Object&gt; data() &#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.asList(<span class="string">"first test"</span>, <span class="string">"second test"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>​    或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object[] data() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Object[] &#123; <span class="string">"first test"</span>, <span class="string">"second test"</span> &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
          </div>

</li>
</ol>
<h2 id="三、more-about-Junit"><a href="#三、more-about-Junit" class="headerlink" title="三、more about Junit"></a>三、more about Junit</h2><ol>
<li>Junit注解</li>
</ol>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试注解，标记一个方法可以作为一个测试用例。</td>
</tr>
<tr>
<td>@Before</td>
<td>Before注解表示，该方法必须在类中的每个测试之前执行,以便执行某些必要的先决条件。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>BeforeClass注解指出这是附着在静态方法必须执行一次并在类的所有测试之前，这种情况一般用于测试计算、共享配制方法(如数据库连接)。</td>
</tr>
<tr>
<td>@After</td>
<td>After注释表示，该方法在每项测试后执行（如执行每一个测试后重置某些变量，删除临时变量等）。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>当需要执行所有测试在JUnit测试用例类后执行，AlterClass注解可以使用以清理一些资源（如数据库连接），注意：方法必须为静态方法。</td>
</tr>
<tr>
<td>@Ignore</td>
<td>当想暂时禁用特定的测试执行可以使用这个注解，每个被注解为@Ignore的方法将不再执行。</td>
</tr>
<tr>
<td>@Runwith</td>
<td>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。</td>
</tr>
<tr>
<td>@Parameters</td>
<td>用于使用参数化功能。</td>
</tr>
<tr>
<td>@SuiteClasses</td>
<td>用于套件测试。</td>
</tr>
</tbody></table>
<ol start="2">
<li>Junit断言</li>
</ol>
<table>
<thead>
<tr>
<th>断言</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void assertEquals([String message],expected value,actual value)</td>
<td>断言两个值相等。值类型可能是int，short，long，byte，char，Object，第一个参数是一个可选字符串消息</td>
</tr>
<tr>
<td>void assertTrue([String message],boolean condition)</td>
<td>断言一个条件为真</td>
</tr>
<tr>
<td>void assertFalse([String message],boolean condition)</td>
<td>断言一个条件为假</td>
</tr>
<tr>
<td>void assertNotNull([String message],java.lang.Object object)</td>
<td>断言一个对象不为空（null）</td>
</tr>
<tr>
<td>void assertNull([String message],java.lang.Object object)</td>
<td>断言一个对象为空（null）</td>
</tr>
<tr>
<td>void assertSame([String message],java.lang.Object expected,java.lang.Object actual)</td>
<td>断言两个对象引用相同的对象</td>
</tr>
<tr>
<td>void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)</td>
<td>断言两个对象不是引用同一个对象</td>
</tr>
<tr>
<td>void assertArrayEquals([String message],expectedArray,resultArray)</td>
<td>断言预期数组和结果数组相等，数组类型可能是int，short，long，byte，char，Object</td>
</tr>
</tbody></table>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/mattlinsheep/article/details/7225334" target="_blank" rel="noopener">JUnit4使用手册</a><br><a href="https://blog.csdn.net/w605283073/article/details/80051229" target="_blank" rel="noopener">JUnit4 参数化测试（Parameterized tests）</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>


<h1 id="第1章-数据结构绪论"><a href="#第1章-数据结构绪论" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h1><p><strong>数据结构:</strong> 是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<h2 id="1-4-基本概念和术语"><a href="#1-4-基本概念和术语" class="headerlink" title="1.4 基本概念和术语"></a>1.4 基本概念和术语</h2><ol>
<li><strong>数据:</strong> 是<span class="y">描述客观事物的符号</span>，是计算机中可操作的对象，是能<u>被计算机识别</u>，并<u>输入给计算机处理的符号集合</u>。</li>
<li><strong>数据元素（记录）:</strong> 是<span class="y">组成数据</span>的、有一定意义的基本单位，在计算机中通常作为整体处理。</li>
<li><strong>数据项:</strong> 一个<span class="y">数据元素可由若干个数据项组成</span>。  </li>
<li><strong>数据对象:</strong> 是<span class="y">性质相同的数据元素的集合</span>，是<span class="r">数据的子集</span>。  <ul>
<li>性质相同—数据元素<u><strong>具有相同数量和类型</strong></u>的数据项。  </li>
<li>在不产生混淆的情况下，简称数据。</li>
</ul>
</li>
<li><strong>数据结构：</strong> 是<span class="y">相互之间存在一种或多种特定关系的数据元素的集合。</span>即数据具有<u>组织形式</u>。<ul>
<li><strong>逻辑结构：</strong> 指<span class="y">数据对象中数据元素之间的相互关系。</span> 分为以下四种：<ul>
<li><strong>集合结构：</strong> 数据元素间关系只有<span class="b">“同属于一个集合”</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" class="lazyload"></a></li>
<li><strong>线性结构：</strong> 数据元素之间是<span class="b">一对一关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" class="lazyload"></a></li>
<li><strong>树形结构：</strong> 数据元素之间存在<span class="b">一对多的层次关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" class="lazyload"></a></li>
<li><strong>图形结构：</strong> 数据元素之间存在<span class="b">多对多关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" class="lazyload"></a><br>PS：用示意图表示数据的逻辑结构时：</li>
<li>将每个数据元素看做一个结点，用圆圈表示。</li>
<li>元素之间的逻辑关系用结点之间的连线表示，若此关系有方向就带上箭头。<ul>
<li><strong>物理结构（存储结构）：</strong> 指<span class="y">数据的逻辑结构在计算机中的存储形式。</span>  </li>
</ul>
</li>
<li>数据是数据元素的集合，则物理结构就是<span class="r">如何把数据元素存储到计算机存储器中</span>。</li>
<li>存储结构应正确反映元素间的逻辑关系。有以下两种：<ul>
<li><strong>顺序存储结构：</strong> 将数据元素存放在<span class="b">地址连续的存储单元</span>。<br><span class="r">数据间的逻辑关系与物理关系一致</span>。<font class="fb">Eg：数组</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" class="lazyload"></a></li>
<li><strong>链式存储结构：</strong> 将数据元素存放在<span class="b">任意的存储单元</span>，存储单元可以连续可以不连续。<br><span class="r">数据元素的物理关系不能反映逻辑关系</span>，所以需一个 <strong>指针</strong> 存放数据元素的地址，则可通过地址找到相关联数据元素的位置。<font class="fb">Eg：链表</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" class="lazyload"></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><span class="r"><strong>数据项是数据不可分割的最小单位。</strong></span></li>
<li>数据项组成数据元素（记录），数据元素组成数据。<br><font class="fb">Eg：人类是数据，人是数据元素，眼、耳、口、鼻等是数据项。</font><ul>
<li>数据对象是相同数据元素的集合，数据结构是相互间存在某关系的数据元素的集合。<br><font class="fb">Eg:人都有姓名、生日、性别等相同的数据项，这些数据项的集合为数据对象。</font></li>
<li>研究数据结构的意义：分析待处理对象的性质及各处理对象之间存在的关系，以编写好的程序。</li>
<li>数据结构分为逻辑结构、物理结构。<br>逻辑结构—数据对象中数据元素之间的关系，分为集合结构、线性结构、树形结构、图形结构</li>
</ul>
</li>
</ul>
<p>　</p>
<p>　</p>
]]></content>
  </entry>
</search>
