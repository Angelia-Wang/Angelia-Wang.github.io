<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Junit+idea入门使用</title>
    <url>/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Junit-idea入门使用"><a href="#Junit-idea入门使用" class="headerlink" title="Junit+idea入门使用"></a>Junit+idea入门使用</h1><h2 id="一、Junit配置"><a href="#一、Junit配置" class="headerlink" title="一、Junit配置"></a>一、Junit配置</h2><ol>
<li><p>Intellij idea添加Junit插件</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" data-fancybox="group" data-caption="image-20200326203540257" class="fancybox"><img alt="image-20200326203540257" title="image-20200326203540257" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" class="lazyload"></a></p>
<p>快捷键(command+，)进入preference，在Plugins中搜索Junit，并安装JunitGeneratorV2.0，安装完毕后重启idea。</p>
</li>
<li><p>在需要测试的项目中导入jar包</p>
<p>Hamcrest Core包 <a href="https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core/1.3" target="_blank" rel="noopener">下载地址</a></p>
<p>Junit4包  <a href="https://mvnrepository.com/artifact/junit/junit/4.12" target="_blank" rel="noopener">下载地址</a></p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" data-fancybox="group" data-caption="image-20200326205514332" class="fancybox"><img alt="image-20200326205514332" style="zoom:50%;" title="image-20200326205514332" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" class="lazyload"></a>

<p>快捷键（command+；）进入Project Structure，==》model==》Dependencies中添加jar</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" data-fancybox="group" data-caption="image-20200326205637184" class="fancybox"><img alt="image-20200326205637184" title="image-20200326205637184" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" class="lazyload"></a></p>
</li>
<li><p>Junit具体设置，可在preference中查看</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" data-fancybox="group" data-caption="image-20200326210734815" class="fancybox"><img alt="image-20200326210734815" title="image-20200326210734815" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="二、使用Junit进行测试"><a href="#二、使用Junit进行测试" class="headerlink" title="二、使用Junit进行测试"></a>二、使用Junit进行测试</h2><p>Eg：编写简单的计算器，包含加减乘除4个功能，参数为double类型。</p>
<ol>
<li>创建java工程，在src中创建Calculator类，代码如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1,<span class="keyword">double</span> n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.add(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.subtract(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.multiply(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n2==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.divide(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<p>​      ⚠️注：之所以要用上面这种写法，而不用如下代码，是为了避免double的精度误差：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1-n2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>​        具体可查看<a href="https://blog.csdn.net/m0_37450089/article/details/80270893" target="_blank" rel="noopener">java double相对精度误差</a></p>
<ol start="2">
<li><p>创建src同级目录test，并将之设为Test根目录，之后此文件夹会显示为绿色。</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" data-fancybox="group" data-caption="image-20200326211308852" class="fancybox"><img alt="image-20200326211308852" style="zoom:30%;" title="image-20200326211308852" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" class="lazyload"></a>
</li>
<li><p>在test目录中编写测试类</p>
<p>选中要测试的类，右键选择Test，或者直接快捷键shift+command+T</p>
<p>点击Create New Test，之后可以设置生成的测试类名，是否有setup等方法，以及要测试的方法</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" data-fancybox="group" data-caption="image-20200326211548128" class="fancybox"><img alt="image-20200326211548128" style="zoom:35%;" title="image-20200326211548128" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" data-fancybox="group" data-caption="image-20200326211803437" class="fancybox"><img alt="image-20200326211803437" style="zoom:30%;" title="image-20200326211803437" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" data-fancybox="group" data-caption="image-20200326211931771" class="fancybox"><img alt="image-20200326211931771" style="zoom:45%;" title="image-20200326211931771" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" class="lazyload"></a>

<p>生成效果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" data-fancybox="group" data-caption="image-20200326212315132" class="fancybox"><img alt="image-20200326212315132" style="zoom:40%;" title="image-20200326212315132" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" class="lazyload"></a>

<p>编写代码如下，点击测试类左侧的小箭头即可运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">2.3</span>,<span class="number">5.4</span>),<span class="number">7.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">3.2</span>,<span class="number">5.3</span>),-<span class="number">2.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">3.1</span>,<span class="number">5.2</span>),<span class="number">16.12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.div(<span class="number">3.2</span>,<span class="number">5.0</span>),<span class="number">0.64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>​        ⚠️：<br>​        1⃣️要继承TestCase。<br>​        因为不继承TestCase，assertEquals方法来自import static org.junit.Assert.*;此方法已过时。应使用TestCase类的assertEquals方法。或者使用assertEquals(x1,x2,x3);三个参数的形式，表示判断x1与x2是否在误差x3内相等。<br>​        2⃣️测试方法名前要加test，否则会出现如下报错：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" data-fancybox="group" data-caption="image-20200326213406633" class="fancybox"><img alt="image-20200326213406633" style="zoom:50%;" title="image-20200326213406633" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" class="lazyload"></a>
</li>
<li><p>使用TestSuite</p>
<p>因为3所说的编写Test类，对于每个测试方法，只能写一个测试用例。则编写多个测试用例就需要写多个测试类。那如何使这些测试类同时一起运行呢？答案是使用TestSuite。</p>
<p>为了演示，此处再编写CalculatorTest2类，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest2</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator =<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">23.0</span>,<span class="number">1.0</span>),<span class="number">24.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">9.8</span>,<span class="number">5.3</span>),<span class="number">4.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">2.0</span>,<span class="number">6.0</span>),<span class="number">12.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.div(<span class="number">5.0</span>,<span class="number">0.0</span>),-<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法一：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestSuite; </span><br><span class="line"><span class="keyword">import</span> junit.framework.Test; </span><br><span class="line"><span class="keyword">import</span> junit.textui.TestRunner; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> <span class="keyword">extends</span> <span class="title">TestSuite</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//TestSuite功能练习</span></span><br><span class="line">        TestSuite suite = <span class="keyword">new</span> TestSuite(<span class="string">"TestSuite Test"</span>); </span><br><span class="line">        suite.addTestSuite(TestCalculator<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTestSuite(TestCalculator2<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTest(<span class="keyword">new</span> TestCalculator());</span><br><span class="line">        <span class="comment">//添加一个具体的测试用例</span></span><br><span class="line">        suite.addTest(TestSuite.createTest(TestCalculator<span class="class">.<span class="keyword">class</span>,“<span class="title">testAdd</span>”))</span>;</span><br><span class="line">        <span class="keyword">return</span> suite; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">        TestRunner.run(suite()); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* suite方法命名规则如下：</span></span><br><span class="line"><span class="comment">       1）必须以“suite”方法命名；</span></span><br><span class="line"><span class="comment">       2）suite方法的访问修饰权限必须为public；</span></span><br><span class="line"><span class="comment">       3）.suite方法必须为静态方法；</span></span><br><span class="line"><span class="comment">       4）.suite方法必须没有参数。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法二（此处我采用了写法二）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;CalculatorTest<span class="class">.<span class="keyword">class</span>,<span class="title">CalculatorTest2</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    在执行JUnit测试引擎的run方法时会调用TestSuite的的run方法，TestSuite在执行自身run方法时会遍历所有TestCase对象的run方法，同一个TestCase子类的run方法会根据自身所包含的测试用例个数被执行相应的次数。</p>
<p>​    执行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" style="zoom:45%;" title="6" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" class="lazyload"></a>
</li>
<li><p>使用Parameterized</p>
<p>若要避免一个测试用例写一个测试类的情况，可使用Parameterized，写多个测试用例。</p>
<p>创建一个类TestCalculator，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(value = Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberB;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCalculator</span><span class="params">(<span class="keyword">double</span> numberA,<span class="keyword">double</span> numberB,<span class="keyword">double</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberA=numberA;</span><br><span class="line">        <span class="keyword">this</span>.numberB=numberB;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:add(&#123;0&#125;+&#123;1&#125;)=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data1()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">2.0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3.4</span>,<span class="number">5.8</span>,<span class="number">9.2</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        assertEquals(calculator.add(numberA,numberB),expected,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>运行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" style="zoom:50%;" title="8" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" class="lazyload"></a>

</li>
</ol>
<h2 id="more-about-Junit"><a href="#more-about-Junit" class="headerlink" title="more about Junit"></a>more about Junit</h2><ol>
<li>Junit注解</li>
</ol>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试注解，标记一个方法可以作为一个测试用例。</td>
</tr>
<tr>
<td>@Before</td>
<td>Before注解表示，该方法必须在类中的每个测试之前执行,以便执行某些必要的先决条件。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>BeforeClass注解指出这是附着在静态方法必须执行一次并在类的所有测试之前，这种情况一般用于测试计算、共享配制方法(如数据库连接)。</td>
</tr>
<tr>
<td>@After</td>
<td>After注释表示，该方法在每项测试后执行（如执行每一个测试后重置某些变量，删除临时变量等）。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>当需要执行所有测试在JUnit测试用例类后执行，AlterClass注解可以使用以清理一些资源（如数据库连接），注意：方法必须为静态方法。</td>
</tr>
<tr>
<td>@Ignore</td>
<td>当想暂时禁用特定的测试执行可以使用这个注解，每个被注解为@Ignore的方法将不再执行。</td>
</tr>
<tr>
<td>@Runwith</td>
<td>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。</td>
</tr>
<tr>
<td>@Parameters</td>
<td>用于使用参数化功能。</td>
</tr>
<tr>
<td>@SuiteClasses</td>
<td>用于套件测试。</td>
</tr>
</tbody></table>
<ol start="2">
<li>Junit断言</li>
</ol>
<table>
<thead>
<tr>
<th>断言</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void assertEquals([String message],expected value,actual value)</td>
<td>断言两个值相等。值类型可能是int，short，long，byte，char，Object，第一个参数是一个可选字符串消息</td>
</tr>
<tr>
<td>void assertTrue([String message],boolean condition)</td>
<td>断言一个条件为真</td>
</tr>
<tr>
<td>void assertFalse([String message],boolean condition)</td>
<td>断言一个条件为假</td>
</tr>
<tr>
<td>void assertNotNull([String message],java.lang.Object object)</td>
<td>断言一个对象不为空（null）</td>
</tr>
<tr>
<td>void assertNull([String message],java.lang.Object object)</td>
<td>断言一个对象为空（null）</td>
</tr>
<tr>
<td>void assertSame([String message],java.lang.Object expected,java.lang.Object actual)</td>
<td>断言两个对象引用相同的对象</td>
</tr>
<tr>
<td>void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)</td>
<td>断言两个对象不是引用同一个对象</td>
</tr>
<tr>
<td>void assertArrayEquals([String message],expectedArray,resultArray)</td>
<td>断言预期数组和结果数组相等，数组类型可能是int，short，long，byte，char，Object</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>


<h1 id="第1章-数据结构绪论"><a href="#第1章-数据结构绪论" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h1><p><strong>数据结构:</strong> 是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<h2 id="1-4-基本概念和术语"><a href="#1-4-基本概念和术语" class="headerlink" title="1.4 基本概念和术语"></a>1.4 基本概念和术语</h2><ol>
<li><strong>数据:</strong> 是<span class="y">描述客观事物的符号</span>，是计算机中可操作的对象，是能<u>被计算机识别</u>，并<u>输入给计算机处理的符号集合</u>。</li>
<li><strong>数据元素（记录）:</strong> 是<span class="y">组成数据</span>的、有一定意义的基本单位，在计算机中通常作为整体处理。</li>
<li><strong>数据项:</strong> 一个<span class="y">数据元素可由若干个数据项组成</span>。  </li>
<li><strong>数据对象:</strong> 是<span class="y">性质相同的数据元素的集合</span>，是<span class="r">数据的子集</span>。  <ul>
<li>性质相同—数据元素<u><strong>具有相同数量和类型</strong></u>的数据项。  </li>
<li>在不产生混淆的情况下，简称数据。</li>
</ul>
</li>
<li><strong>数据结构：</strong> 是<span class="y">相互之间存在一种或多种特定关系的数据元素的集合。</span>即数据具有<u>组织形式</u>。<ul>
<li><strong>逻辑结构：</strong> 指<span class="y">数据对象中数据元素之间的相互关系。</span> 分为以下四种：<ul>
<li><strong>集合结构：</strong> 数据元素间关系只有<span class="b">“同属于一个集合”</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" class="lazyload"></a></li>
<li><strong>线性结构：</strong> 数据元素之间是<span class="b">一对一关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" class="lazyload"></a></li>
<li><strong>树形结构：</strong> 数据元素之间存在<span class="b">一对多的层次关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" class="lazyload"></a></li>
<li><strong>图形结构：</strong> 数据元素之间存在<span class="b">多对多关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" class="lazyload"></a><br>PS：用示意图表示数据的逻辑结构时：</li>
<li>将每个数据元素看做一个结点，用圆圈表示。</li>
<li>元素之间的逻辑关系用结点之间的连线表示，若此关系有方向就带上箭头。<ul>
<li><strong>物理结构（存储结构）：</strong> 指<span class="y">数据的逻辑结构在计算机中的存储形式。</span>  </li>
</ul>
</li>
<li>数据是数据元素的集合，则物理结构就是<span class="r">如何把数据元素存储到计算机存储器中</span>。</li>
<li>存储结构应正确反映元素间的逻辑关系。有以下两种：<ul>
<li><strong>顺序存储结构：</strong> 将数据元素存放在<span class="b">地址连续的存储单元</span>。<br><span class="r">数据间的逻辑关系与物理关系一致</span>。<font class="fb">Eg：数组</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" class="lazyload"></a></li>
<li><strong>链式存储结构：</strong> 将数据元素存放在<span class="b">任意的存储单元</span>，存储单元可以连续可以不连续。<br><span class="r">数据元素的物理关系不能反映逻辑关系</span>，所以需一个 <strong>指针</strong> 存放数据元素的地址，则可通过地址找到相关联数据元素的位置。<font class="fb">Eg：链表</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" class="lazyload"></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><span class="r"><strong>数据项是数据不可分割的最小单位。</strong></span></li>
<li>数据项组成数据元素（记录），数据元素组成数据。<br><font class="fb">Eg：人类是数据，人是数据元素，眼、耳、口、鼻等是数据项。</font><ul>
<li>数据对象是相同数据元素的集合，数据结构是相互间存在某关系的数据元素的集合。<br><font class="fb">Eg:人都有姓名、生日、性别等相同的数据项，这些数据项的集合为数据对象。</font></li>
<li>研究数据结构的意义：分析待处理对象的性质及各处理对象之间存在的关系，以编写好的程序。</li>
<li>数据结构分为逻辑结构、物理结构。<br>逻辑结构—数据对象中数据元素之间的关系，分为集合结构、线性结构、树形结构、图形结构</li>
</ul>
</li>
</ul>
<p>　</p>
<p>　</p>
]]></content>
  </entry>
</search>
