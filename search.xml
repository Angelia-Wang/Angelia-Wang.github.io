<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3.1 简单模拟——E Shortest Distance</title>
    <url>/2020/07/01/3.1%20%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F%E2%80%94%E2%80%94E%20Shortest%20Distance/</url>
    <content><![CDATA[<h1 id="3-1-简单模拟——E-Shortest-Distance"><a href="#3-1-简单模拟——E-Shortest-Distance" class="headerlink" title="3.1 简单模拟——E Shortest Distance"></a>3.1 简单模拟——E Shortest Distance</h1><p><a href="http://codeup.cn/problem.php?cid=100000575&amp;pid=4" target="_blank" rel="noopener">http://codeup.cn/problem.php?cid=100000575&amp;pid=4</a></p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" data-fancybox="group" data-caption="image-20200702153841801" class="fancybox"><img alt="image-20200702153841801" style="zoom:50%;" title="image-20200702153841801" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702153841801.png" class="lazyload"></a>

<h2 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h2><p>给出一个简单周期的高速公路上的N个出口，找出任何一对出口之间的最短距离。</p>
<p>输入第一个N，接下来N个为Di，表示第i个和第i+1个出口之间的距离，DN表示第N个和第1个出口之间的距离。</p>
<p>给出M，接下来M组是要求最点距离的两个出口。</p>
<h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>以样例输入为例，表示有5个出口，各自距离如👇所示：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" data-fancybox="group" data-caption="image-20200702154331644" class="fancybox"><img alt="image-20200702154331644" style="zoom:40%;" title="image-20200702154331644" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200702154331644.png" class="lazyload"></a>

<p>我们可以把1出口到各个出口i间的距离纪录在数组a[i]中，为了方便这里不用a[0]，显然a[1]=0。记录环形总长sum。</p>
<p>要求距离的start出口、end出口，有以下情况（假设end&gt;start）：</p>
<ul>
<li>其中一个为1，即求1出口到其他出口的最短距离，即max { a[i] ,  sum - a[i] }</li>
<li>没有一个为1，则求max { a[end] - a[start] ,  sum - ( a[end] - a[start] ) }</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n, m, temp, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++) &#123;  <span class="comment">//为了点后续计算方便，a[0]没有用，a[i]表示1到i点的距离，a[1]=0</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">        sum += temp;</span><br><span class="line">        a[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">    sum+=temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, ans, t2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;start, &amp;<span class="built_in">end</span>);</span><br><span class="line">        <span class="keyword">if</span> (start &gt; <span class="built_in">end</span>) &#123;</span><br><span class="line">            t2 = <span class="built_in">end</span>;</span><br><span class="line">            <span class="built_in">end</span> = start;</span><br><span class="line">            start = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">1</span>) ans = a[<span class="built_in">end</span>] &lt; (sum - a[<span class="built_in">end</span>]) ? a[<span class="built_in">end</span>] : (sum - a[<span class="built_in">end</span>]);</span><br><span class="line">        <span class="keyword">else</span> ans = (a[<span class="built_in">end</span>] - a[start]) &lt; (sum - a[<span class="built_in">end</span>] + a[start]) ? (a[<span class="built_in">end</span>] - a[start]) : (sum - a[<span class="built_in">end</span>] + a[start]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编程——知识点笔记</title>
    <url>/2020/04/22/python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章 变量和简单数据类型"></a>第二章 变量和简单数据类型</h1><h2 id="2-1-变量的命名"><a href="#2-1-变量的命名" class="headerlink" title="2.1 变量的命名"></a>2.1 变量的命名</h2><ol>
<li><p>由字母、数字、下划线组成，不能由数字开头，区分大小写</p>
<ul>
<li>（目前，应用小写的变量名，虽然使用大写字母不会导致错误）</li>
</ul>
</li>
<li><p>变量名最好简短、具有描述性</p>
</li>
</ol>
<h2 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2 字符串"></a>2.2 字符串</h2><p>​            —由单引号/双引号括起</p>
<ol>
<li><p>因此，可在字符串中灵活使用””和’’</p>
</li>
<li><p>空白：任何非打印字符，如空格、制表符、换行符。 </p>
<ul>
<li><p>在字符串中添加制表符：\t </p>
</li>
<li><p>添加换行符：\n </p>
</li>
<li><p>字符串“\n\t”表示换到下一行并在下一行开头添加制表符</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-2-1-修改字符串大小写"><a href="#2-2-1-修改字符串大小写" class="headerlink" title="2.2.1 修改字符串大小写"></a>2.2.1 修改字符串大小写</h3><ol>
<li>每个单词首字母大写：title()</li>
<li>字符串全大写：upper()</li>
<li>字符串全小写：lower()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())   <span class="comment"># Ada Lovelace</span></span><br><span class="line">print(name.upper())   <span class="comment"># ADA LOVELACE</span></span><br><span class="line">print(name.lower())   <span class="comment"># ada lovelace</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-2-合并（拼接）字符串"><a href="#2-2-2-合并（拼接）字符串" class="headerlink" title="2.2.2 合并（拼接）字符串"></a>2.2.2 合并（拼接）字符串</h3><p>​            —使用加号（+）合并字符串[拼接]</p>
<h3 id="2-2-3-删除空白"><a href="#2-2-3-删除空白" class="headerlink" title="2.2.3 删除空白"></a>2.2.3 删除空白</h3><p>（空白符：空格、换行符、制表符等）</p>
<ol>
<li>删除字符串首端空白：lstrip()</li>
<li>删除字符串尾端空白：rstrip()</li>
<li>删除字符串首尾两端空白：strip()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_language=<span class="string">'  python  '</span></span><br><span class="line">print(favorite_language.lstrip())   <span class="comment"># 'python  '</span></span><br><span class="line">print(favorite_language.rstrip())   <span class="comment">#'  python'</span></span><br><span class="line">print(favorite_language.strip())    <span class="comment">#'python'</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-4-字符替换-——-replace"><a href="#2-2-4-字符替换-——-replace" class="headerlink" title="2.2.4 字符替换 —— replace()"></a>2.2.4 字符替换 —— replace()</h3><p>将字符串中的特定单词string1替换为另一个单词string2 —— replace(string1, string2, [count])</p>
<ul>
<li>可添加形参count，不写默认<u><strong>都替换</strong></u>；否则表示最多替换前count个</li>
<li>函数返回一个新的copy</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">"I really like dogs. My dog names Jack."</span></span><br><span class="line">message = message.replace(<span class="string">'dog'</span>, <span class="string">'cat'</span>)</span><br><span class="line">print(message)  <span class="comment"># I really like cats. My cat names Jack.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-5-字符串分割-——-split"><a href="#2-2-5-字符串分割-——-split" class="headerlink" title="2.2.5 字符串分割 —— split()"></a>2.2.5 字符串分割 —— split()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br><span class="line"><span class="comment"># str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</span></span><br><span class="line"><span class="comment"># num -- 分割次数。默认为 -1, 即分隔所有。</span></span><br><span class="line"><span class="comment"># 函数返回字符串列表</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-6-字符串计数-——-count"><a href="#2-2-6-字符串计数-——-count" class="headerlink" title="2.2.6 字符串计数 —— count()"></a>2.2.6 字符串计数 —— count()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.count(sub, start=<span class="number">0</span>,end=len(string))</span><br><span class="line"><span class="comment"># sub -- 搜索的子字符串</span></span><br><span class="line"><span class="comment"># start -- 字符串开始搜索的索引。默认为0.</span></span><br><span class="line"><span class="comment"># end -- 字符串中结束搜索的索引。默认为字符串的最后一个位置。</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'adddaddd'</span></span><br><span class="line">print(a.count(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">4</span>))   <span class="comment"># 1</span></span><br><span class="line">print(a.count(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">5</span>))   <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></div>



<h2 id="2-3-数字"><a href="#2-3-数字" class="headerlink" title="2.3 数字"></a>2.3 数字</h2><ol>
<li><p>可使用括号修改运算次序</p>
</li>
<li><p>浮点数结果包含的小数位数可能是不确定的</p>
</li>
<li><p>python2中整数除法结果为整数.   Eg: 2/3=1,若要避免，则要保证至少有一个操作数为浮点数，Eg: 2.0/3=1.5;<br>python3中整数除法结果为浮点数</p>
</li>
<li><p>将非字符串值表示为字符串：str(变量)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age=<span class="number">23</span></span><br><span class="line">message=<span class="string">"Happy "</span>+str(age)+<span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)   <span class="comment">#Happy 23rd Birthday!</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h2><p>​            —使用#标识，#后边的内容被python解释器忽略</p>
<h1 id="第三章-列表简介"><a href="#第三章-列表简介" class="headerlink" title="第三章 列表简介"></a>第三章 列表简介</h1><p>​            —用方括号([])来表示列表，并用逗号分隔其中的元素</p>
<h2 id="3-1-访问列表元素"><a href="#3-1-访问列表元素" class="headerlink" title="3.1 访问列表元素"></a>3.1 访问列表元素</h2><p>​            —通过下标访问列表元素，索引从0开始</p>
<p>将索引指定为-1，返回最后一个列表元素<u><strong>（负数索引返回离列表末尾相应距离的元素）</strong></u></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycle=[<span class="string">'trek'</span>,<span class="string">'cannondale'</span>,<span class="string">'redline'</span>]</span><br><span class="line">print(bicycle[<span class="number">0</span>].title())   <span class="comment"># Trek</span></span><br><span class="line">print(bicycle[<span class="number">-1</span>])          <span class="comment"># redline</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3-2-在列表中添加元素"><a href="#3-2-在列表中添加元素" class="headerlink" title="3.2 在列表中添加元素"></a>3.2 在列表中添加元素</h2><ol>
<li>在列表末尾添加元素：append()</li>
<li>在列表中插入元素：insert()</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[]</span><br><span class="line">motorcycles.append(<span class="string">'honda'</span>)</span><br><span class="line">motorcycles.append(<span class="string">"yamaha"</span>)</span><br><span class="line">print(motorcycles)    <span class="comment"># ['honda', 'yamaha']</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">'uducate'</span>)</span><br><span class="line">print(motorcycles)    <span class="comment"># ['uducate', 'honda', 'yamaha']</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3-3-从列表中删除元素"><a href="#3-3-从列表中删除元素" class="headerlink" title="3.3 从列表中删除元素"></a>3.3 从列表中删除元素</h2><ol>
<li><p>使用del语句</p>
<ul>
<li>要知道删除的元素的索引</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'yamaha', 'suzuki']</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'suzuki']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="2">
<li><p>使用pop()方法</p>
<ul>
<li>pop()可得到删除元素的值并在列表中删除它</li>
<li>可指定索引，默认删除末尾元素</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">popped_m1 = motorcycles.pop()</span><br><span class="line">print(popped_m1)               <span class="comment"># suzuki  </span></span><br><span class="line">print(motorcycles)             <span class="comment">#['honda', 'yamaha']</span></span><br><span class="line">popped_m2 = motorcycles.pop(<span class="number">0</span>)</span><br><span class="line">print(popped_m2)               <span class="comment"># honda</span></span><br><span class="line">print(motorcycles)             <span class="comment">#['yamaha']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="3">
<li><p>根据值删除元素—remove(value) </p>
<ul>
<li>若value在列表中出现多次，只删除第一个</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'yamaha'</span>]</span><br><span class="line">motorcycles.remove(<span class="string">'yamaha'</span>)</span><br><span class="line">print(motorcycles)   <span class="comment"># ['honda', 'suzuki', 'yamaha']</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="3-4-组织列表"><a href="#3-4-组织列表" class="headerlink" title="3.4 组织列表"></a>3.4 组织列表</h2><ol>
<li>对列表进行永久性排序：sort()—默认按字母顺序排列，sort(reverse=True)按字母反向排列</li>
<li>对列表进行临时排序：sorted(list)—默认按字母顺序排列，也可传递参数reverse=True</li>
<li>永久性反转列表：reverse()—若要恢复原来顺序，再次reverse即可</li>
<li>确定列表长度：len(list)</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)           <span class="comment"># ['audi', 'bmw', 'subaru', 'toyota']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)  </span><br><span class="line">print(cars)           <span class="comment"># ['toyota', 'subaru', 'bmw', 'audi']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))   <span class="comment"># ['audi', 'bmw', 'subaru', 'toyota']  </span></span><br><span class="line">print(cars)           <span class="comment"># ['bmw', 'audi', 'toyota', 'subaru']</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars)           <span class="comment"># ['subaru', 'toyota', 'audi', 'bmw']</span></span><br><span class="line"></span><br><span class="line">print(len(cars))      <span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div>







<h1 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h1><h2 id="4-1-遍历列表——for循环"><a href="#4-1-遍历列表——for循环" class="headerlink" title="4.1 遍历列表——for循环"></a>4.1 遍历列表——for循环</h2><ul>
<li><p>⚠️ for首句后有冒号</p>
</li>
<li><p>Python根据缩进来判断代码行与前一个代码行的关系。</p>
<p>for循环后每个缩进的代码行都是循环的一部分。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cats = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>, <span class="string">'jack'</span>]</span><br><span class="line"><span class="keyword">for</span> cat <span class="keyword">in</span> cats:</span><br><span class="line">    print(cat.title()+<span class="string">" is a good cat!"</span>)</span><br><span class="line">    print(<span class="string">"I love "</span>+cat.title()+<span class="string">".\n"</span>)</span><br><span class="line">print(<span class="string">"That's all"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># Alice is a good cat!</span></span><br><span class="line"><span class="comment"># I love Alice.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># David is a good cat!</span></span><br><span class="line"><span class="comment"># I love David.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Carolina is a good cat!</span></span><br><span class="line"><span class="comment"># I love Carolina.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Jack is a good cat!</span></span><br><span class="line"><span class="comment"># I love Jack.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># That's all</span></span><br></pre></td></tr></table></figure></div>



<h2 id="4-2-创建数值列表"><a href="#4-2-创建数值列表" class="headerlink" title="4.2 创建数值列表"></a>4.2 创建数值列表</h2><ol>
<li><p>使用函数range()——range(begin,  end, step)</p>
<ul>
<li>从begin开始，每次增加一个步长step，到end结束（包括begin，不包括end，默认step=1）。</li>
<li>使用range()时，若输出不符合预期，可尝试将指定的值加1或减1。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    print(value)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用range()创建数字列表</p>
<ul>
<li><p>使用函数list()可将range()的结果直接转换为列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even_number = list(range(<span class="number">2</span>, <span class="number">10</span>+<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(even_number)  <span class="comment">#[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用range()创建任何需要的数字列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">      squares.append(value**<span class="number">2</span>)</span><br><span class="line">  print(squares)    <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></div>

<p>python中，**2表示平方，**3表示立方，**0.5表示平方根</p>
</li>
</ul>
</li>
<li><p>对数字列表执行简单的统计计算</p>
<ul>
<li>最大值—max(list)</li>
<li>最小值—min(list)</li>
<li>总和—sun(list)</li>
</ul>
</li>
<li><p>列表解析</p>
<p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)      <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h2 id="4-3-使用列表的部分元素（切片）"><a href="#4-3-使用列表的部分元素（切片）" class="headerlink" title="4.3 使用列表的部分元素（切片）"></a>4.3 使用列表的部分元素（切片）</h2><h3 id="4-3-1-切片"><a href="#4-3-1-切片" class="headerlink" title="4.3.1 切片"></a>4.3.1 切片</h3><ol>
<li>创建切片，可指定起始元素和终止元素的索引。（同样包含起始元素，不包含终止元素）</li>
</ol>
<ul>
<li><p>⚠️ 是索引，和range中的值不同。</p>
</li>
<li><p>若未指定起始索引，默认从列表开头开始；若未指定终止元素索引，默认终止于列表末尾。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">print(players[<span class="number">1</span>:<span class="number">4</span>])      <span class="comment"># ['martina', 'michael', 'florence']</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>遍历切片：在for循环中使用切片</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">print(<span class="string">"我们队中的前三个队员:"</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我们队中的前三个队员:</span></span><br><span class="line"><span class="comment"># Charles</span></span><br><span class="line"><span class="comment"># Martina</span></span><br><span class="line"><span class="comment"># Michael</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-2-复制列表"><a href="#4-3-2-复制列表" class="headerlink" title="4.3.2 复制列表"></a>4.3.2 复制列表</h3><p>​            —创建一个包含整个列表的切片，即同时省略起始索引和终止索引（[ : ]）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">print(<span class="string">"我喜欢的食物是:"</span>+str(my_foods))         <span class="comment"># 我喜欢的食物是:['pizza', 'falafel', 'carrot cake']</span></span><br><span class="line">print(<span class="string">"我朋友喜欢的食物是:"</span>+str(friend_foods))  <span class="comment"># 我朋友喜欢的食物是:['pizza', 'falafel', 'carrot cake']</span></span><br></pre></td></tr></table></figure></div>

<p>⚠️ 若写成：friend_foods = my_foods 则不能得到两个列表。（这种语法实际上是将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表）</p>
<h2 id="4-4-元组"><a href="#4-4-元组" class="headerlink" title="4.4 元组"></a>4.4 元组</h2><ol>
<li><p>列表适合用于存储在程序运行期间可变的数据集（列表是可以修改的），使用方括号标识。</p>
</li>
<li><p>不可变的列表称为<code>元组</code>，使用圆括号标识。</p>
</li>
<li><p>元组的遍历于访问与列表操作相同。</p>
</li>
<li><p>试图修改元组的操作是非法的，但允许给元组重新赋值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Rectangle = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">Rectangle[<span class="number">0</span>] = <span class="number">250</span>     <span class="comment"># 报错</span></span><br><span class="line">Rectangle = (<span class="number">400</span>, <span class="number">100</span>) <span class="comment"># 合法</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> Rectangle:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></div>







</li>
</ol>
<h1 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h1><h2 id="5-1-示例"><a href="#5-1-示例" class="headerlink" title="5.1 示例"></a>5.1 示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>] </span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:    <span class="comment">#注意要有冒号</span></span><br><span class="line">        print(car.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(car.title())</span><br></pre></td></tr></table></figure></div>

<h2 id="5-2-条件测试"><a href="#5-2-条件测试" class="headerlink" title="5.2 条件测试"></a>5.2 条件测试</h2><ol>
<li><p>检查是否相等：==</p>
<ul>
<li>考虑大小写，若想忽略大小写时，可将变量转换为小写再比较 Eg：car.lower == ‘audi’</li>
</ul>
</li>
<li><p>检查是否不等：!=</p>
</li>
<li><p>逻辑与：and</p>
</li>
<li><p>逻辑或：or</p>
</li>
<li><p>判断列表中是否存在特定值：in</p>
</li>
<li><p>判断列表中是否不存在特定值：not in</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">banned_users = [<span class="string">'andrew'</span>, <span class="string">'carolina'</span>, <span class="string">'david'</span>] </span><br><span class="line">user = <span class="string">'marie'</span> </span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> banned_users:</span><br><span class="line">    print(user.title() + <span class="string">", you can post a response if you wish."</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>布尔表达式：True、False（注意要大写！）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">game_active = <span class="literal">True</span> </span><br><span class="line">can_edit = <span class="literal">False</span></span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="5-3-if语句多种结构"><a href="#5-3-if语句多种结构" class="headerlink" title="5.3 if语句多种结构"></a>5.3 if语句多种结构</h2><ol>
<li><p>if语句</p>
</li>
<li><p>if-else语句</p>
</li>
<li><p>if-elif-else结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"你的票价是 $"</span> + str(price) + <span class="string">"。"</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用多个elif代码块</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"你的票价是 $"</span> + str(price) + <span class="string">"。"</span>)</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="5-4-使用if语句处理列表"><a href="#5-4-使用if语句处理列表" class="headerlink" title="5.4 使用if语句处理列表"></a>5.4 使用if语句处理列表</h2><ol>
<li><p>判定列表是否为空——if list:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requested_toppings = [] </span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">        print(<span class="string">"Finished making your pizza!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Are you sure you want a plain pizza?"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：Are you sure you want a plain pizza?</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>判断字符串是否为空——if string:</p>
<p>(若一字符串string=“”，则 if string返回False)</p>
</li>
<li><p>使用多个列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">available_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'olives'</span>, <span class="string">'green peppers'</span>, <span class="string">'pepperoni'</span>, <span class="string">'pineapple'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line">requested_toppings = [<span class="string">'mushrooms'</span>, <span class="string">'french fries'</span>, <span class="string">'extra cheese'</span>]</span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        print(<span class="string">"Adding "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, we don't have "</span> + requested_topping + <span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"Finished making your pizza!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Adding mushrooms.</span></span><br><span class="line"><span class="comment"># Sorry, we don't have french fries.</span></span><br><span class="line"><span class="comment"># Adding extra cheese.</span></span><br><span class="line"><span class="comment"># Finished making your pizza!</span></span><br></pre></td></tr></table></figure></div>







</li>
</ol>
<h1 id="第六章-字典"><a href="#第六章-字典" class="headerlink" title="第六章 字典"></a>第六章 字典</h1><ol>
<li>字典是一系列<code>键-值对</code>，可通过键访问与之相关联的值。</li>
<li>Python中，字典是一种动态结构，用放在花括号{}中的一系列<code>键-值对</code>表示，键与值之间用冒号分隔，键-值对之间用逗号分隔。</li>
</ol>
<h2 id="6-1-使用字典"><a href="#6-1-使用字典" class="headerlink" title="6.1 使用字典"></a>6.1 使用字典</h2><ol>
<li><p>通过键获取对应的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">print(alien[<span class="string">'color'</span>])    <span class="comment"># green</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改键对应的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien[<span class="string">'color'</span>]=<span class="string">'yellow'</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加键-值对</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line">print(alien)       <span class="comment">#&#123;'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除键-值对——使用del语句</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien[<span class="string">'points'</span>]</span><br><span class="line">print(alien)       <span class="comment"># &#123;'color': 'green'&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建空字典</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien=&#123;&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="6-2-遍历字典"><a href="#6-2-遍历字典" class="headerlink" title="6.2 遍历字典"></a>6.2 遍历字典</h2><ol>
<li><p>得到字典的所有键-值对：items()——返回一个键-值对列表</p>
<ul>
<li><p>遍历字典：for k, v in dictionary.items(): </p>
<p>（items方法返回一个一个键-值对列表，Python遍历列表中的每一个键-值对，并将键、值存储在声明的两个变量k、v中。）</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历字典  for k, v in dictionary.items():</span></span><br><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'efermi'</span>,</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'enrico'</span>,</span><br><span class="line">    <span class="string">'last'</span>: <span class="string">'fermi'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    print(<span class="string">"Key: "</span> + key)</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Key: username</span></span><br><span class="line"><span class="comment"># Value: efermi</span></span><br><span class="line"><span class="comment"># Key: first</span></span><br><span class="line"><span class="comment"># Value: enrico</span></span><br><span class="line"><span class="comment"># Key: last</span></span><br><span class="line"><span class="comment"># Value: fermi</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>得到字典的所有键：keys()——返回一个键列表</p>
<ul>
<li><p>遍历字典所有键：for k in dictionary.keys():  或  for k in dictionary: </p>
<p>（因为遍历字典时，默认遍历所有的键，故keys()可省略）</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    print(name.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Jen</span></span><br><span class="line"><span class="comment"># Sarah</span></span><br><span class="line"><span class="comment"># Edward</span></span><br><span class="line"><span class="comment"># Phil</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>得到字典的所有值：values()——返回一个值列表</p>
<ul>
<li>遍历字典的所有值：for v in dictionary.values():</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br><span class="line"><span class="comment"># Python</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>遍历字典时，键-值对的返回顺序与存储顺序不同（Python不关心键-值对的存储顺序，只跟踪键和值之间的关联关系）</p>
<p>若以特定顺序返回元素，可在for循环中对返回的值进行排序——sorted()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> sorted(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用集合（set）可剔除列表中的重复项——set()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># C</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># Ruby</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="6-3-嵌套"><a href="#6-3-嵌套" class="headerlink" title="6.3 嵌套"></a>6.3 嵌套</h2><ol>
<li><p>嵌套：将一系列字典存储在列表中，或将列表作为值存储在字典中。</p>
<p>（可以在列表中嵌套字典，在字典中嵌套列表，在字典中嵌套字典）</p>
</li>
</ol>
<h3 id="6-3-1-字典列表（在列表中嵌套字典）"><a href="#6-3-1-字典列表（在列表中嵌套字典）" class="headerlink" title="6.3.1 字典列表（在列表中嵌套字典）"></a>6.3.1 字典列表（在列表中嵌套字典）</h3><p>​    Eg：字典alien_0包含一个外星人的各种信息，则要存储多个外星人的信息时就可以创建外星人列表。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'points'</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'red', 'points': 15&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>​    PS：更符合现实的情形是，外星人不止三个，且每个外星人都是使用代码自动生成的：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    new_alien = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">'color'</span>] == <span class="string">'green'</span>:</span><br><span class="line">        alien[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line">        alien[<span class="string">'speed'</span>] = <span class="string">'medium'</span></span><br><span class="line">        alien[<span class="string">'points'</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">5</span>]:</span><br><span class="line">    print(alien)</span><br><span class="line">print(<span class="string">"..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'yellow', 'points': 10, 'speed': 'medium'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-3-2-在字典中存储列表"><a href="#6-3-2-在字典中存储列表" class="headerlink" title="6.3.2 在字典中存储列表"></a>6.3.2 在字典中存储列表</h3><p>当需要在字典中将一个键关联到多个值时，可在字典中嵌套一个列表。</p>
<p>Eg：每个人喜欢的语言存储在字典中，若一个人喜欢多种语言，则可用一个列表来存储语言信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: [<span class="string">'python'</span>, <span class="string">'ruby'</span>],</span><br><span class="line">    <span class="string">'sarah'</span>: [<span class="string">'c'</span>],</span><br><span class="line">    <span class="string">'edward'</span>: [<span class="string">'ruby'</span>, <span class="string">'go'</span>],</span><br><span class="line">    <span class="string">'phil'</span>: [<span class="string">'python'</span>, <span class="string">'haskell'</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="keyword">if</span> len(languages) == <span class="number">1</span>:</span><br><span class="line">        print(name.title()+<span class="string">"'s favorite language is:\n\t"</span>+languages[<span class="number">0</span>].title())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(name.title()+<span class="string">"'s favorite languages are:"</span>)</span><br><span class="line">        <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">            print(<span class="string">'\t'</span>+language.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># Jen's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Python</span></span><br><span class="line"><span class="comment"># 	Ruby</span></span><br><span class="line"><span class="comment"># Sarah's favorite language is:</span></span><br><span class="line"><span class="comment"># 	C</span></span><br><span class="line"><span class="comment"># Edward's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Ruby</span></span><br><span class="line"><span class="comment"># 	Go</span></span><br><span class="line"><span class="comment"># Phil's favorite languages are:</span></span><br><span class="line"><span class="comment"># 	Python</span></span><br><span class="line"><span class="comment"># 	Haskell</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6-3-3-在字典中存储字典"><a href="#6-3-3-在字典中存储字典" class="headerlink" title="6.3.3 在字典中存储字典"></a>6.3.3 在字典中存储字典</h3><p>Eg：某网站有多个用户，每个用户有不同的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。（这种情况，也可通过在用户列表中嵌套字典实现）</p>
<p>⚠️ 字典中的字典结构最好相同（虽然Python没有此要求，但这使得嵌套的字典处理起来更容易，否则for循环内部代码将更复杂）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = &#123; </span><br><span class="line">    <span class="string">'aeinstein'</span>: &#123;</span><br><span class="line">        <span class="string">'first'</span>: <span class="string">'albert'</span>,</span><br><span class="line">        <span class="string">'last'</span>: <span class="string">'einstein'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'princeton'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'mcurie'</span>: &#123;</span><br><span class="line">        <span class="string">'first'</span>: <span class="string">'marie'</span>,</span><br><span class="line">        <span class="string">'last'</span>: <span class="string">'curie'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'paris'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    print(<span class="string">"Username: "</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">'first'</span>] + <span class="string">" "</span> + user_info[<span class="string">'last'</span>]</span><br><span class="line">    location = user_info[<span class="string">'location'</span>]</span><br><span class="line">    print(<span class="string">"\tFull name: "</span> + full_name.title())</span><br><span class="line">    print(<span class="string">"\tLocation: "</span> + location.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Username: aeinstein</span></span><br><span class="line"><span class="comment"># 	Full name: Albert Einstein</span></span><br><span class="line"><span class="comment"># 	Location: Princeton</span></span><br><span class="line"><span class="comment"># Username: mcurie</span></span><br><span class="line"><span class="comment"># 	Full name: Marie Curie</span></span><br><span class="line"><span class="comment"># 	Location: Paris</span></span><br></pre></td></tr></table></figure></div>





<h1 id="第七章-用户输入和while循环"><a href="#第七章-用户输入和while循环" class="headerlink" title="第七章 用户输入和while循环"></a>第七章 用户输入和while循环</h1><h2 id="7-1-用户输入"><a href="#7-1-用户输入" class="headerlink" title="7.1 用户输入"></a>7.1 用户输入</h2><ol>
<li><p>获取用户输入：input()</p>
<ul>
<li>函数input()可无参数，也可有一个参数，用于展示需要向用户显示的提示或说明。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = input(<span class="string">"Tell me something, and I will repeat it back to you: "</span>) </span><br><span class="line">print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell me something, and I will repeat it back to you: Hello everyone! </span></span><br><span class="line"><span class="comment"># Hello everyone!</span></span><br></pre></td></tr></table></figure></div>

<p>PS：提示可能超过一行，这时为了代码清晰，可将提示存储在一个变量中，再将该变量传递给input()</p>
</li>
<li><p>获取数值输入：int(变量)、float(变量)</p>
<ul>
<li>使用input()获取的输入都是字符串类型，可使用int()将之转换为整数，使用float()转换为浮点数</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = input(<span class="string">"How old are you? "</span>)</span><br><span class="line">age = int(age)</span><br></pre></td></tr></table></figure></div>

<p>PS：字符串转数值：str(变量)</p>
<p>​         数值转字符串：int(变量)、float(变量)</p>
</li>
<li><p>求模运算：% 返回余数</p>
</li>
<li><p>在Python 2.7中使用raw_input()提示用户输入</p>
<p>（Python 2.7也有函数input()，但它将用户输入解读为Python代码，并尝试运行它们）</p>
</li>
</ol>
<h2 id="7-2-while循环"><a href="#7-2-while循环" class="headerlink" title="7.2 while循环"></a>7.2 while循环</h2><ol>
<li><p>善用标志变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用break语句退出循环</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用continue语句跳过当前循环</p>
</li>
</ol>
<h2 id="7-3-使用while循环处理列表和字典"><a href="#7-3-使用while循环处理列表和字典" class="headerlink" title="7.3 使用while循环处理列表和字典"></a>7.3 使用while循环处理列表和字典</h2><ol>
<li><p>while list: ——列表为空时结束循环</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先，创建一个待验证用户列表</span></span><br><span class="line"><span class="comment"># 和一个用于存储已验证用户的空列表</span></span><br><span class="line">unconfirmed_users = [<span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'candace'</span>]</span><br><span class="line">confirmed_users = [] </span><br><span class="line"><span class="comment"># 验证每个用户，直到没有未验证用户为止</span></span><br><span class="line"><span class="comment"># 将每个经过验证的列表都移到已验证用户列表中</span></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(<span class="string">"正在验证用户： "</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"><span class="comment"># 显示所有已验证的用户</span></span><br><span class="line">print(<span class="string">"\n下列用户已验证："</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 正在验证用户： Candace</span></span><br><span class="line"><span class="comment"># 正在验证用户： Brian</span></span><br><span class="line"><span class="comment"># 正在验证用户： Alice</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 下列用户已验证：</span></span><br><span class="line"><span class="comment"># Candace</span></span><br><span class="line"><span class="comment"># Brian</span></span><br><span class="line"><span class="comment"># Alice</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除列表中中的所有特定值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pets = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'goldfish'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'cat'</span>]</span><br><span class="line">print(pets)</span><br><span class="line"><span class="keyword">while</span> <span class="string">'cat'</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">'cat'</span>)</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']</span></span><br><span class="line"><span class="comment"># ['dog', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用用户输入填充字典</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">responses = &#123;&#125; </span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">while</span> polling_active: </span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">    name = input(<span class="string">"\nWhat is your name? "</span>) </span><br><span class="line">    response = input(<span class="string">"Which mountain would you like to climb someday? "</span>) </span><br><span class="line">    <span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">    responses[name] = response </span><br><span class="line">    <span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line">    repeat = input(<span class="string">"Would you like to let another person respond? (yes/ no) "</span>) </span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">'no'</span>: </span><br><span class="line">        polling_active = <span class="literal">False</span> </span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line">print(<span class="string">"\n--- Poll Results ---"</span>) </span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items(): </span><br><span class="line">    print(name + <span class="string">" would like to climb "</span> + response + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure></div>





</li>
</ol>
<h1 id="第八章-函数"><a href="#第八章-函数" class="headerlink" title="第八章 函数"></a>第八章 函数</h1><p>函数是带名称的代码块，用于完成具体工作，可将代码与主程序分离，让主程序更易理解。</p>
<h2 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h2><ol>
<li><p>函数定义格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">([形参列表])</span>:</span></span><br><span class="line">  [<span class="string">"""文档字符串"""</span>]</span><br><span class="line">  函数方法体</span><br></pre></td></tr></table></figure></div>

<p>函数调用格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名([实参列表])</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>文档字符串：用<code>三引号</code>括起，描述函数是做什么的，Python使用它们来生成有关程序中函数的文档。</p>
</li>
<li><p>形参：函数完成其工作所需的一项信息。</p>
</li>
<li><p>实参：调用函数时传递给函数的信息。</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">"""显示简单的问候语"""</span></span><br><span class="line">    print(<span class="string">'Hello,'</span> + username.title() + <span class="string">'!'</span>)</span><br><span class="line"></span><br><span class="line">greet_user(<span class="string">'jesse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：Hello,Jesse!</span></span><br></pre></td></tr></table></figure></div>



<h2 id="8-2-传递实参"><a href="#8-2-传递实参" class="headerlink" title="8.2 传递实参"></a>8.2 传递实参</h2><p>向函数传递参数的方式：位置实参、关键字实参、列表、字典。</p>
<h3 id="8-2-1-位置实参"><a href="#8-2-1-位置实参" class="headerlink" title="8.2.1 位置实参"></a>8.2.1 位置实参</h3><p>要求实参和形参的顺序相同。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">'金毛'</span>, <span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只金毛。</span></span><br><span class="line"><span class="comment"># 我的金毛的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-2-关键字实参"><a href="#8-2-2-关键字实参" class="headerlink" title="8.2.2 关键字实参"></a>8.2.2 关键字实参</h3><p>关键字参数传递给函数的是<code>名称-值对</code>，所以无需考虑函数调用中的实参顺序，这种方式更清楚地指出了函数调用中各个值的用途。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(animal_type=<span class="string">'金毛'</span>, pet_name=<span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只金毛。</span></span><br><span class="line"><span class="comment"># 我的金毛的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-3-设置形参默认值"><a href="#8-2-3-设置形参默认值" class="headerlink" title="8.2.3 设置形参默认值"></a>8.2.3 设置形参默认值</h3><p>调用函数时若给形参提供了实参，则使用指定的实参值；否则，使用形参的默认值。（使用默认值让实参变成可选的。）</p>
<p>⚠️ 形参的默认值必须从右往左写。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type=<span class="string">'狗'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"我有一只"</span> + animal_type + <span class="string">"。"</span>)</span><br><span class="line">    print(<span class="string">"我的"</span> + animal_type + <span class="string">"的名字是"</span> + pet_name.title() + <span class="string">"。"</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">'旺财'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我有一只狗。</span></span><br><span class="line"><span class="comment"># 我的狗的名字是旺财。</span></span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-4-传递列表"><a href="#8-2-4-传递列表" class="headerlink" title="8.2.4 传递列表"></a>8.2.4 传递列表</h3><ol>
<li>将列表传递给函数后，在函数中对此列表做出的任何修改都是永久性的。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span><span class="params">(unprinted_designs, completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        print(<span class="string">"Printing model: "</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span></span><br><span class="line">    <span class="string">"""显示打印好的所有模型"""</span></span><br><span class="line">    print(<span class="string">"The following models have been printed:"</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        print(completed_model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">'iphone case'</span>, <span class="string">'robot pendant'</span>, <span class="string">'dodecahedron'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Printing model: dodecahedron</span></span><br><span class="line"><span class="comment"># Printing model: robot pendant</span></span><br><span class="line"><span class="comment"># Printing model: iphone case</span></span><br><span class="line"><span class="comment"># The following models have been printed:</span></span><br><span class="line"><span class="comment"># dodecahedron</span></span><br><span class="line"><span class="comment"># robot pendant</span></span><br><span class="line"><span class="comment"># iphone case</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><p>若希望向函数传递列表的副本而不是原件，可使用表示法创建列表的副本。</p>
<p>调用函数格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(列表名[:])</span><br></pre></td></tr></table></figure></div>

<p>Eg：1中若不想清空未打印的设计列表，可如下调用print_models()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print_models(unprinted_designs[:], completed_models)</span><br></pre></td></tr></table></figure></div>

<p>PS：虽然向函数传递列表的副本可保留原始列表中的内容，但尽量不要这么做，因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</p>
</li>
</ol>
<h2 id="8-3-返回值"><a href="#8-3-返回值" class="headerlink" title="8.3 返回值"></a>8.3 返回值</h2><ol>
<li>函数可以返回任何类型的值，包括是列表或字典。</li>
<li>return None  表示返回空，做if判断时，为False。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name, age=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span> </span><br><span class="line">    person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125; </span><br><span class="line">    <span class="keyword">if</span> age: </span><br><span class="line">        person[<span class="string">'age'</span>] = age </span><br><span class="line">    <span class="keyword">return</span> person </span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>, age=<span class="number">27</span>)   </span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'first': 'jimi', 'last': 'hendrix', 'age': 27&#125;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="8-4-传递任意数量的实参"><a href="#8-4-传递任意数量的实参" class="headerlink" title="8.4 传递任意数量的实参"></a>8.4 传递任意数量的实参</h2><ol>
<li><p>传递任意数量的实参——使用<code>*形参名</code></p>
<p>（星号让Python创建一个名为形参名的<code>空元组</code>，并将收到的所有值都封装进这个元组中）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"使用以下材料做一个披萨:"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个披萨:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个披萨:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>结合使用位置实参和任意参数实参——注意必须将接纳任意数量实参的形参放在最后</p>
<p>（Python先匹配位置参数和关键字实参，再将余下的实参都收集到最后一个形参中）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">    <span class="string">"""概述要制作的比萨"""</span></span><br><span class="line">    print(<span class="string">"用以下材料做一个"</span> + str(size) + <span class="string">"寸的披萨"</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个16寸披萨:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"><span class="comment"># 使用以下材料做一个12寸披萨:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用任意数量的关键字实参——使用<code>**形参名</code></p>
<p>（两个星号让Python创建一个名为形参名的<code>空字典</code>，并将收到的所有<code>名称-值对</code>都封装进此字典中）</p>
<p>有时，需接受任意数量的实参，但是预先不知道传递给函数的会是什么信息，此情况下，可将函数编写成能接受任意数量的<code>键-值对</code>——调用语句提供了多少就接受多少。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span>, <span class="string">'einstein'</span>,location=<span class="string">'princeton'</span>,field=<span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># &#123;'first_name': 'albert', 'last_name': 'einstein', 'location': 'princeton', 'field': 'physics'&#125;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="8-5-将函数存储在模块中"><a href="#8-5-将函数存储在模块中" class="headerlink" title="8.5 将函数存储在模块中"></a>8.5 将函数存储在模块中</h2><ul>
<li><p>函数的优点是将代码块与主程序分离，通过给函数指定描述性名称，让主程序更易理解。</p>
<p>进一步地，可将函数存储在被称为<code>模块</code>的独立文件中，再将模块导入到主程序中。（模块名全小写，单词之间加下划线）</p>
</li>
<li><p><strong>import语句——允许在当前运行的程序文件中使用模块中的代码。</strong></p>
</li>
</ul>
<h3 id="8-5-1-导入整个模块"><a href="#8-5-1-导入整个模块" class="headerlink" title="8.5.1 导入整个模块"></a>8.5.1 导入整个模块</h3><ol>
<li><p>导入模块格式—— <code>import</code>module_name</p>
<p>（python运行代码行import module_name时，会将其中的所有函数都复制到此程序中）</p>
</li>
<li><p>使用此模块中的任意一函数格式—— module_name.function_name()</p>
<p>（句点表示法——需指定模块名和函数名，中间用点号连接）</p>
</li>
</ol>
<h3 id="8-5-2-导入模块中的特定函数"><a href="#8-5-2-导入模块中的特定函数" class="headerlink" title="8.5.2 导入模块中的特定函数"></a>8.5.2 导入模块中的特定函数</h3><ol>
<li><p>导入模块中特定函数格式—— <code>from</code>module_name <code>import</code>function_name</p>
<ul>
<li>通过逗号分隔函数名，可导入模块中任意数量的函数—— <code>from</code>module_name <code>import</code>function_0, function_1, function_2</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>使用此模块中的任意一函数格式—— function_name()</p>
<p>(无需指定模块名，因为在import语句中已显式导入此函数，故调用时只需指定函数名)</p>
</li>
</ol>
<h3 id="8-5-3-导入模块中的所有函数"><a href="#8-5-3-导入模块中的所有函数" class="headerlink" title="8.5.3 导入模块中的所有函数"></a>8.5.3 导入模块中的所有函数</h3><ol>
<li><p>导入模块格式—— <code>from</code>module_name <code>import</code>*</p>
<ul>
<li><p>星号运算符让Python导入模块中的所有函数</p>
</li>
<li><p>使用非自己编写的大型模块时，最好不要用此导入方式，因为模块和本项目可能存在多个名称相同的函数或变量，进而覆盖函数</p>
<p>（故最佳的做法是，导入所需函数，或导入整个模块并使用句点表示法）</p>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li>使用此模块中的任意一函数格式—— function_name()</li>
</ol>
<h3 id="8-5-4-使用as指定别名"><a href="#8-5-4-使用as指定别名" class="headerlink" title="8.5.4 使用as指定别名"></a>8.5.4 使用as指定别名</h3><ol>
<li>给模块指定别名—— <code>import</code> module_name <code>as</code> mn</li>
<li>给函数指定别名—— <code>from</code> module_name <code>import</code> function_name <code>as</code> fn<ul>
<li>若导入的函数名称与程序中现有的名称冲突，或函数名称太长，可指定函数别名。</li>
</ul>
</li>
</ol>
<h2 id="8-6-函数编写指南"><a href="#8-6-函数编写指南" class="headerlink" title="8.6 函数编写指南"></a>8.6 函数编写指南</h2><ol>
<li><p>函数应指定描述性名称，且只使用小写字母和下划线。（大写字母不会有错误，但是最好别用）</p>
</li>
<li><p>函数都应有简要阐述其功能的注释，此注释应采用文档字符串格式（三引号括起）并紧跟在函数定义后。</p>
</li>
<li><p>指定形参默认值时，等号两边不要有空格。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameter_0, parameter_1=<span class="string">'default name'</span>)</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>同理，调用函数时若使用关键字实参，等号两边也不要有空格。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name(value_0, parameter_1=<span class="string">'value_1'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若形参很多，导致函数定义时长度超过79字符，可在函数定义中输入左括号后按回车键，并在下一行按两个Tab键，将形参列表与函数体区分开，便于代码阅读。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        parameter_0, parameter_1, parameter_2,</span></span></span><br><span class="line"><span class="function"><span class="params">        parameter_3, parameter_4, parameter_5)</span>:</span></span><br><span class="line">    function body...</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若程序或模块包含多个函数，可使用两个空行将相邻函数分开。</p>
</li>
<li><p>所有import语句应放在文件开头，除非文件开头使用注释来描述整个程序。</p>
</li>
</ol>
<h1 id="第九章-类"><a href="#第九章-类" class="headerlink" title="第九章 类"></a>第九章 类</h1><h2 id="9-1-创建和使用类"><a href="#9-1-创建和使用类" class="headerlink" title="9.1 创建和使用类"></a>9.1 创建和使用类</h2><ol>
<li><p>类名中<strong>每个单词首字母都需大写，不使用下划线</strong>，类包含<code>方法</code>和<code>属性</code>（类中的函数称为方法）。</p>
</li>
<li><p><code>__init__()</code>是个特殊的方法（相当于java中的构造函数），此方法必须有形参<code>self</code>，且self必须位于其他形参前面。</p>
<ul>
<li><p><code>self</code>是一个指向实例本身的引用，让实例能访问类中的属性和方法。</p>
<p>（类中编写的方法若要操作属性，一定要加形参self，使用self.property的方式得到属性值。）</p>
</li>
<li><p><code>__init__()</code>方法中可为属性指定默认值，但若指定了默认值，__init__()方法就不能给通过形参重新给它赋值，需要重新写一个set方法更换它的值。（所以还不如指定形参的默认值）</p>
</li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""一次模拟小狗的简单尝试"""</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span>  <span class="comment"># 开头末尾各有两个下划线，旨在避免Python默认方法与普通方法发生名称冲突</span></span><br><span class="line">        <span class="string">"""初始化属性name和age"""</span> </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age </span><br><span class="line">        self.gender = <span class="string">'男'</span>  <span class="comment"># 设置性别默认值</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""模拟小狗被命令时蹲下"""</span> </span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>) </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""模拟小狗被命令时打滚"""</span> </span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure></div>

<p>PS：在Python2.7中创建类时，需要在括号内包含单词object：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(object)</span>:</span></span><br><span class="line">  --略--</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><strong>实例名都小写，单词之间添加下划线</strong>。<ul>
<li>访问实例的属性、调用方法，都使用句点表示法。</li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>)</span><br><span class="line">print(<span class="string">"我的狗狗名字是"</span> + my_dog.name.title() + <span class="string">"。"</span>)</span><br><span class="line">print(<span class="string">"它"</span> + str(my_dog.age) + <span class="string">"岁了，是个"</span> + my_dog.gender + <span class="string">"孩。"</span>)</span><br><span class="line">my_dog.sit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 我的狗狗名字是Willie。</span></span><br><span class="line"><span class="comment"># 它6岁了，是个男孩。</span></span><br><span class="line"><span class="comment"># Willie is now sitting.</span></span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>修改属性的值：直接通过实例访问属性进行修改；通过方法进行设置。</li>
</ol>
<h2 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h2><p><code>子类</code>继承其<code>父类</code>的所有属性和方法，同时还可以定义自己的属性和方法。（父类也称<code>超类</code>）</p>
<ol>
<li><p>创建子类时，父类必须包含在当前文件中，且位于子类的前面。</p>
</li>
<li><p>定义子类时，必须在括号内指定父类的名称。</p>
</li>
<li><p>子类的方法<code>__init__()</code></p>
<ul>
<li>创建子类实例时，需先给父类的所有属性赋值。因此要写 <code>super().__init__(父类属性参数列表)</code></li>
</ul>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名<span class="params">(父类名)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,子类及父类属性列表)</span>:</span></span><br><span class="line">    <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">    super().__init__(父类属性列表)</span><br><span class="line">    ---初始化子类的属性(略)---</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""电动汽车的独特之处"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())   <span class="comment"># 2016 Tesla Model S</span></span><br></pre></td></tr></table></figure></div>

<p>PS：Python2.7中的继承——函数super()需要两个实参：<code>子类名</code>、<code>对象self</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        --略-- </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 子类        </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        super(ElectricCar, self).__init__(make, model, year) </span><br><span class="line">        --略--</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>子类继承父类后，可添加新的属性和方法，也可重写父类方法。<ul>
<li><strong>重写父类方法，要求与父类方法同名</strong></li>
</ul>
</li>
</ol>
<h2 id="9-3-导入类"><a href="#9-3-导入类" class="headerlink" title="9.3 导入类"></a>9.3 导入类</h2><ol>
<li><p>可以将类存储在模块中，然后在主程序中导入所需的模块。（一个模块可存储任意多个类）</p>
<ul>
<li>操作与导入模块中的函数相同，使用import语句</li>
<li>可导入一个模块，使用句点表示法访问所需类 —— <code>import</code> module_name</li>
<li>可导入一个模块的特定类，若导入多个类则用逗号隔开—— <code>from</code> module_name <code>import</code> class_name</li>
<li>可导入一个模块的所有类（使用星号），但不推荐，可能导致名称冲突—— <code>from</code> module_name <code>import *</code></li>
</ul>
<p>（要从一个模块中导入很多类时，推荐导入模块，再使用句点表示法module_name.calss_name访问类）</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># car.py</span></span><br><span class="line"><span class="string">"""一个可用于表示汽车的类"""</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span> </span><br><span class="line">        <span class="string">"""初始化描述汽车的属性"""</span> </span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model </span><br><span class="line">        self.year = year </span><br><span class="line">        self.odometer_reading = <span class="number">0</span> </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""返回整洁的描述性名称"""</span> </span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model </span><br><span class="line">        <span class="keyword">return</span> long_name.title() </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""打印一条消息，指出汽车的里程"""</span> </span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>) </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span> </span><br><span class="line">        <span class="string">"""将里程表读数设置为指定的值，拒绝将里程表往回拨"""</span> </span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading: </span><br><span class="line">            self.odometer_reading = mileage </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>) </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self, miles)</span>:</span> </span><br><span class="line">        <span class="string">"""将里程表读数增加指定的量"""</span> </span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_car.py</span></span><br><span class="line"><span class="string">"""一组可用于表示电动汽车的类"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟电动汽车电瓶的简单尝试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, battery_size=<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电瓶的属性"""</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶容量的消息"""</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶续航里程的消息"""</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            range = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">            range = <span class="number">270</span></span><br><span class="line">        message = <span class="string">"This car can go approximately "</span> + str(range)</span><br><span class="line">        message += <span class="string">" miles on a full charge."</span></span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span> </span><br><span class="line">    <span class="string">"""模拟电动汽车的独特之处"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性，再初始化电动汽车特有的属性"""</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_cars.py</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car </span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> ElectricCar </span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">'volkswagen'</span>, <span class="string">'beetle'</span>, <span class="number">2016</span>) </span><br><span class="line">print(my_beetle.get_descriptive_name())    <span class="comment"># 2016 Volkswagen Beetle</span></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'roadster'</span>, <span class="number">2016</span>) </span><br><span class="line">print(my_tesla.get_descriptive_name())     <span class="comment"># 2016 Tesla Roadster</span></span><br></pre></td></tr></table></figure></div>



<h2 id="9-4-Python标准库"><a href="#9-4-Python标准库" class="headerlink" title="9.4 Python标准库"></a>9.4 Python标准库</h2><ol>
<li><p>Python标准库是一组模块，可直接通过import使用。</p>
</li>
<li><p>Eg：模块collections中的OrderedDict类</p>
<ul>
<li>OrderedDict实例的行为几乎与字典相同，区别只在于记录了<code>键-值对</code>的添加顺序。</li>
<li>兼具列表和字典的主要优点（将信息关联起来的同时保留原来的顺序）</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"></span><br><span class="line">favorite_languages[<span class="string">'jen'</span>] = <span class="string">'python'</span></span><br><span class="line">favorite_languages[<span class="string">'sarah'</span>] = <span class="string">'c'</span></span><br><span class="line">favorite_languages[<span class="string">'edward'</span>] = <span class="string">'ruby'</span></span><br><span class="line">favorite_languages[<span class="string">'phil'</span>] = <span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items(): </span><br><span class="line">    print(name.title() + <span class="string">"'s favorite language is "</span> + language.title() + <span class="string">"."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Jen's favorite language is Python. </span></span><br><span class="line"><span class="comment"># Sarah's favorite language is C. </span></span><br><span class="line"><span class="comment"># Edward's favorite language is Ruby. </span></span><br><span class="line"><span class="comment"># Phil's favorite language is Python.</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="9-5-类编码风格"><a href="#9-5-类编码风格" class="headerlink" title="9.5 类编码风格"></a>9.5 类编码风格</h2><ol>
<li>类名中每个单词首字母大写，不使用下划线；实例名和模块名都小写，单词之间加下划线。</li>
<li>类中，使用一个空行来分隔方法；模块中，使用两个空行来分隔类。</li>
<li>先编写导入标准库模块中的import语句，再添加一个空行，导入自己编写的模块的import语句。</li>
</ol>
<h1 id="第十章-文件和异常"><a href="#第十章-文件和异常" class="headerlink" title="第十章 文件和异常"></a>第十章 文件和异常</h1><h2 id="10-1-读取文件"><a href="#10-1-读取文件" class="headerlink" title="10.1 读取文件"></a>10.1 读取文件</h2><p>Eg：pi.txt文件</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420230316802.png" data-fancybox="group" data-caption="image-20200420230316802" class="fancybox"><img alt="image-20200420230316802" style="zoom:40%;" title="image-20200420230316802" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420230316802.png" class="lazyload"></a>

<ol>
<li><p>文件路径</p>
<ul>
<li>相对路径（相对于当前运行的程序所在目录）<ul>
<li>在Linux和OS X中：with open(‘text_files/filename.txt’) as file_object:</li>
<li>在Windows中（使用反斜杠\）：with open(‘text_files\filename.txt’) as file_object:</li>
</ul>
</li>
<li>绝对路径</li>
</ul>
</li>
<li><p>读取文本文件时，Python将其中的所有文本都解读为字符串。</p>
<ul>
<li>若需转换为数值 —— <code>int(变量)</code>将字符串转换为整数，<code>float(变量)</code>将字符串转换为浮点数</li>
</ul>
</li>
</ol>
<h3 id="10-1-1-读取整个文件——read"><a href="#10-1-1-读取整个文件——read" class="headerlink" title="10.1.1 读取整个文件——read()"></a>10.1.1 读取整个文件——read()</h3><ul>
<li>函数<code>open(file_name)</code> 返回一个表示文件的对象。</li>
<li>使用关键词<code>with</code>则无需访问文件后将其关闭（调用close()函数），Python会自动在合适时将其关闭。</li>
<li>函数<code>read()</code>将读取文件的全部内容，并返回一个字符串。PS：read()到达文件末尾时会返回一个空字符串。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br><span class="line"></span><br><span class="line">print(len(contents))</span><br></pre></td></tr></table></figure></div>

<p>​    输出：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420231942761.png" data-fancybox="group" data-caption="image-20200420231942761" class="fancybox"><img alt="image-20200420231942761" style="zoom:40%;" title="image-20200420231942761" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420231942761.png" class="lazyload"></a>

<div class="note warning">
            <p>​    ⚠️ 为什么有38个字符？</p><p>​           答：content为’3.1415926535\n  8979323846\n  2643383279’（中间空的是两个字符）</p><p>​          PS：之所以最后有一个空行，是因为print语句会加上一个换行符\n</p>
          </div>



<h3 id="10-1-2-逐行读取——readline"><a href="#10-1-2-逐行读取——readline" class="headerlink" title="10.1.2 逐行读取——readline()"></a>10.1.2 逐行读取——readline()</h3><ul>
<li>要以逐行的方式检查文件，可对文件对象使用for循环：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></div>

<p>​    输出：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420232814904.png" data-fancybox="group" data-caption="image-20200420232814904" class="fancybox"><img alt="image-20200420232814904" style="zoom:40%;" title="image-20200420232814904" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200420232814904.png" class="lazyload"></a>

<div class="note warning">
            <p>​    ⚠️ 为什么中间会出现空白行？</p><p>​           答：因为pi.txt文件中每行后有一个换行符\n，而print语句又会加上一个换行符\n，故出现了空白行。</p><p>​               （可通过在print语句中使用rstrip()函数，消除文件每行末尾的换行符，来消除空白行）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.1415926535</span></span><br><span class="line"><span class="comment">#   8979323846</span></span><br><span class="line"><span class="comment">#   2643383279</span></span><br></pre></td></tr></table></figure></div>
          </div>



<h3 id="10-1-3-将各行存储在列表中——readlines"><a href="#10-1-3-将各行存储在列表中——readlines" class="headerlink" title="10.1.3 将各行存储在列表中——readlines()"></a>10.1.3 将各行存储在列表中——readlines()</h3><ul>
<li>使用关键词<code>with</code>时，open()返回的文件对象只能在with代码块内使用。</li>
<li>使用函数<code>readlines()</code>从文件中读取每一行，最终返回一个列表。则将之存储在一个变量中，就可在with代码块外使用此列表。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()  <span class="comment"># strip能剔除pi.txt中每行的换行和头部空格</span></span><br><span class="line"></span><br><span class="line">print(pi_string)      <span class="comment"># 3.141592653589793238462643383279</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 32</span></span><br></pre></td></tr></table></figure></div>

<h3 id="10-1-4-取文件前x个字符-——-使用切片"><a href="#10-1-4-取文件前x个字符-——-使用切片" class="headerlink" title="10.1.4 取文件前x个字符 —— 使用切片"></a>10.1.4 取文件前x个字符 —— 使用切片</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pi_million_digits.txt中圆周率精确到小数点后1 000 000位</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_million_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string[:<span class="number">52</span>] + <span class="string">"..."</span>) <span class="comment"># 3.14159265358979323846264338327950288419716939937510...</span></span><br><span class="line">print(len(pi_string)) <span class="comment"># 1000002</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-2-写入文件"><a href="#10-2-写入文件" class="headerlink" title="10.2 写入文件"></a>10.2 写入文件</h2><ol>
<li>读取写入文件都使用open函数打开文件 —— <code>open(file_name, [mode])</code><ul>
<li>第一个形参file_name：要打开的文件名称，不可省略。</li>
<li>第二个形参mode：指定文件读打开的模式——读取模式(‘r’)，写入模式(‘w’)，附加模式(‘a’)，读取写入模式(‘r+’)。省略时默认为读取模式。</li>
<li>若要写入的文件不存在，open()函数将自动创建它；若要读入的文件不存在，则会报错FileNotFoundError异常。</li>
<li>写入模式(‘w’)时，若文件已存在，会清空文件内容；若不希望清空内容，使用附加模式(‘a’)。</li>
</ul>
</li>
<li>写入文件 —— <code>write()</code><ul>
<li>函数write()不会自动在文本末尾添加换行符，需要你自己加\n</li>
</ul>
</li>
<li>Python只能将字符串写入文本文件，若要讲数值数据存储在文本中，需先使用<code>str(变量)</code>将其转换为字符串格式。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span> </span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming.\n"</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love creating new games."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># programming.txt：</span></span><br><span class="line"><span class="comment"># I love programming. </span></span><br><span class="line"><span class="comment"># I love creating new games.</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-3-异常"><a href="#10-3-异常" class="headerlink" title="10.3 异常"></a>10.3 异常</h2><ol>
<li><p><code>异常</code>是一种特殊的对象，Python使用它来管理程序执行期间发生的错误。</p>
<p>（每当发生让Python不知所措的错误时，它都会创建一个异常对象。）</p>
</li>
<li><p>若不对产生的异常进行处理，程序将停止，并显示一个trackback，其中包含有关异常的报告。</p>
</li>
<li><p>异常需使用<code>try-except</code>代码块 或 <code>try-except-else</code>代码块进行处理。</p>
<ul>
<li><p>try代码块：存放 <u><strong>可能引发异常</strong></u> 的代码</p>
</li>
<li><p>若Python尝试运行try代码块中的代码时发生了except指定的异常，执行except代码块内容</p>
</li>
<li><p>else代码块：存放当 <strong><u>try代码块成功执行时</u></strong> 才需要执行的代码</p>
</li>
<li><p>可使用<code>pass语句</code>，让Python在发生指定异常时什么都不做，不出现traceback也不产生任何输出。</p>
<p>（pass语句也算是一种对异常的处理，还充当了占位符，提醒你程序的某个地方啥都没做，且以后也许需要在这里做些什么）</p>
</li>
</ul>
</li>
<li><p>若程序运行不产生异常，执行完try块后会跳过except块，执行后续代码；</p>
<p>否则，会直接查找except块并执行其中代码，然后执行后续代码（但try块中未执行的部分不再执行）。</p>
<p>（所以try-except-else可用try-except代替，只需将else块中内容放在try快中，但是有else代码块会使代码逻辑更清晰）</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理 ZeroDivisionError 异常</span></span><br><span class="line">print(<span class="string">"输入被除数和输出，将给出二者的商。"</span>)</span><br><span class="line">print(<span class="string">"输入 'q' 可终止程序。"</span>) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    first_number = input(<span class="string">"\n被除数: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"除数: "</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"不能被0除!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 等价程序</span></span><br><span class="line">print(<span class="string">"输入被除数和除数，将给出二者的商。"</span>)</span><br><span class="line">print(<span class="string">"输入 'q' 可终止程序。"</span>) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    first_number = input(<span class="string">"\n被除数: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"除数: "</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">        print(answer)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"不能被0除!"</span>)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理 FileNotFoundError 异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span> </span><br><span class="line">    <span class="string">"""计算一个文件大致包含多少个单词"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"文件 "</span> + filename + <span class="string">" 有大约 "</span> + str(num_words) + <span class="string">" 个英文单词。"</span>)</span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">'alice.txt'</span>, <span class="string">'siddhartha.txt'</span>, <span class="string">'moby_dick.txt'</span>, <span class="string">'little_women.txt'</span>] <span class="comment"># 其中siddhartha.txt不存在</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames: </span><br><span class="line">    count_words(filename)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 文件 alice.txt 有大约 29461 个英文单词。 </span></span><br><span class="line"><span class="comment"># 文件 moby_dick.txt 有大约 215136 个英文单词。  </span></span><br><span class="line"><span class="comment"># 文件 little_women.txt 有大约 189079 个英文单词。</span></span><br></pre></td></tr></table></figure></div>



<h2 id="10-4-存储数据"><a href="#10-4-存储数据" class="headerlink" title="10.4 存储数据"></a>10.4 存储数据</h2><ol>
<li><p>使用模块json存储数据</p>
<ul>
<li><p>模块json可将给简单的Python数据结构（列表、字典）转储到文件中，并在程序加载文件时将数据加载到数据结构。</p>
<p>还能与其他编程语言的人分享数据。</p>
</li>
<li><p>使用文件扩展名<code>.json</code>来指出文件存储的数据为JSON格式。</p>
</li>
</ul>
</li>
<li><p>存储数据 —— <code>json.dump()</code></p>
<ul>
<li>接受两个实参：要存储的数据、用于存储数据的文件对象</li>
</ul>
</li>
<li><p>读取数据 —— <code>json.load()</code></p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">    </span><br><span class="line">print(numbers)    <span class="comment"># [2, 3, 5, 7, 11, 13]</span></span><br></pre></td></tr></table></figure></div>

<p>​    实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""如果存储了用户名，就获取它"""</span></span><br><span class="line">    filename = <span class="string">'username.json'</span> </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj: </span><br><span class="line">            username = json.load(f_obj) </span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""提示用户输入用户名"""</span></span><br><span class="line">    username = input(<span class="string">"What is your name? "</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""问候用户，并指出其名字"""</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">        </span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><p>比较<code>json.dumps</code>, <code>json.loads</code>和<code>json.dump</code>, <code>json.load</code></p>
<ul>
<li><p><code>json.dumps</code>, <code>json.loads</code> 进行Python的数据结构和JSON格式之间的转换</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python数据结构 -&gt; JSON</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'ACME'</span>,</span><br><span class="line">    <span class="string">'shares'</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">'price'</span> : <span class="number">542.23</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON -&gt; Python数据结构</span></span><br><span class="line">data = json.loads(json_str)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>json.dump</code>, <code>json.load</code> 将Python的数据结构存储到JSON<strong><u>文件</u></strong>，或从JSON文件中读取数据</p>
</li>
</ul>
</li>
</ol>
<h1 id="第十一章-测试代码"><a href="#第十一章-测试代码" class="headerlink" title="第十一章 测试代码"></a>第十一章 测试代码</h1><ol>
<li><p><code>单元测试</code>：用于核实函数的某个方面没有问题。</p>
</li>
<li><p><code>测试用例</code>：是一组单元测试，这些单元测试一起核实函数在各种情况下的行为都符合要求。</p>
<ul>
<li>良好的测试用例应考虑函数可能收到的各种输入，包含针对所有这些情况的测试。</li>
</ul>
</li>
<li><p><code>全覆盖式测试</code>：用例包含一整套单元测试，涵盖了各种可能的函数使用方式。</p>
</li>
<li><p>How为函数编写测试用例：</p>
<ul>
<li><p>导入<code>unittest</code>模块以及要测试的函数；</p>
</li>
<li><p>创建一个继承<code>unittest.TestCase</code>的类，此类的命名需包含<code>Test</code>字样；</p>
</li>
<li><p>在此类中编写一系列方法对函数行为的不同方面进行测试，测试方法必须以<code>test_</code>打头。</p>
<p>（这样这些方法才会在运行测试代码时自动运行）</p>
</li>
<li><p>Python在unittest.TestCase类中提供了很多<code>断言方法</code>，可用于在测试方法中核实得到的结果是否与期望的结果一致。</p>
<p>（测试方法中若要使用断言，要有self形参，通过<code>self.assertEqual()</code>方式使用断言）</p>
</li>
<li><p>测试文件代码行最后执行<code>unittest.main()</code>让Python运行这个文件中的测试。</p>
</li>
</ul>
</li>
<li><p><code>断言方法</code>能检查你认为应该满足的条件是否确实满足。若满足，则对程序行为的假设得到了确认，没有错误。否则，Python将引发异常。常见的6种断言方法如下：（使用需继承unittest.TestCase类）</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>assertEqual(a, b)</strong></td>
<td align="center"><strong>核实a == b</strong></td>
</tr>
<tr>
<td align="center"><strong>assertNotEqual(a, b)</strong></td>
<td align="center"><strong>核实a != b</strong></td>
</tr>
<tr>
<td align="center"><strong>assertTrue(x)</strong></td>
<td align="center"><strong>核实x为True</strong></td>
</tr>
<tr>
<td align="center"><strong>assertFalse(x)</strong></td>
<td align="center"><strong>核实x为False</strong></td>
</tr>
<tr>
<td align="center"><strong>assertIn(item,  list)</strong></td>
<td align="center"><strong>核实item在list中</strong></td>
</tr>
<tr>
<td align="center"><strong>assertNotIn(item, list)</strong></td>
<td align="center"><strong>核实item不在list中</strong></td>
</tr>
</tbody></table>
</li>
<li><p>方法<code>setUp()</code></p>
<ul>
<li>若在测试类中写了setUp()方法，则Python将先运行它，再运行各个以test_打头的方法。</li>
<li>setUp()让测试方法编写更容易：可在setUp()方法中创建一系列实例并设置它们的属性，再在测试方法中直接使用这些实例。（这些实例变量都<strong><u>需加上前缀self</u></strong>，即存储在测试类的属性中，因此可以在此类的任何地方使用）</li>
</ul>
</li>
<li><p>运行测试用例时，每完成一个单元测试，Python都打印一个字符：</p>
<ul>
<li>测试通过，打印一个句点</li>
<li>测试引发错误，打印一个E</li>
<li>测试导致断言失败，打印一个F</li>
</ul>
</li>
</ol>
<h2 id="11-1-测试函数"><a href="#11-1-测试函数" class="headerlink" title="11.1 测试函数"></a>11.1 测试函数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name_function.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last, middle=<span class="string">''</span>)</span>:</span> </span><br><span class="line">    <span class="string">"""生成整洁的姓名"""</span> </span><br><span class="line">    <span class="keyword">if</span> middle: </span><br><span class="line">        full_name = first + <span class="string">' '</span> + middle + <span class="string">' '</span> + last </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        full_name = first + <span class="string">' '</span> + last </span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest </span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span> </span><br><span class="line">    <span class="string">"""测试name_function.py """</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span> </span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>, <span class="string">'joplin'</span>) </span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Janis Joplin'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_middle_name</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""能够正确地处理像Wolfgang Amadeus Mozart这样的姓名吗？"""</span> </span><br><span class="line">        formatted_name = get_formatted_name( <span class="string">'wolfgang'</span>, <span class="string">'mozart'</span>, <span class="string">'amadeus'</span>) </span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Wolfgang Amadeus Mozart'</span>) </span><br><span class="line">        </span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></div>



<h2 id="11-2-测试类"><a href="#11-2-测试类" class="headerlink" title="11.2 测试类"></a>11.2 测试类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># survey.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="string">"""收集匿名调查问卷的答案"""</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span> </span><br><span class="line">        <span class="string">"""存储一个问题，并为存储答案做准备"""</span> </span><br><span class="line">        self.question = question </span><br><span class="line">        self.responses = [] </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""显示调查问卷"""</span> </span><br><span class="line">        print(question) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self, new_response)</span>:</span> </span><br><span class="line">        <span class="string">"""存储单份调查答卷"""</span> </span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="string">"""显示收集到的所有答卷"""</span> </span><br><span class="line">        print(<span class="string">"Survey results:"</span>) </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses: </span><br><span class="line">            print(<span class="string">'- '</span> + response)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest </span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span> </span><br><span class="line">    <span class="string">"""针对AnonymousSurvey类的测试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个调查对象和一组答案，供使用的测试方法使用"""</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试单个答案会被妥善地存储"""</span></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试三个答案会被妥善地存储"""</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)          </span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>此处：setUp()方法创建一个调查对象my_survey和一个答案列表responses。</p><p>存储二者的变量名都含前缀self（即存储在属性中），故可在这个类的任何地方使用。</p>
          </div>




















]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit+EasyMock测试实例</title>
    <url>/2020/04/03/JUnit+EasyMock%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-EasyMock测试实例"><a href="#JUnit-EasyMock测试实例" class="headerlink" title="JUnit+EasyMock测试实例"></a>JUnit+EasyMock测试实例</h1><h2 id="一、实例一（纯Java）"><a href="#一、实例一（纯Java）" class="headerlink" title="一、实例一（纯Java）"></a>一、实例一（纯Java）</h2><p>要求：</p>
<p>编写一个简单的货币基金选择器，考虑以下几种货币类型：CNY(人民币)、USD(美元)、GBP(英镑)、EUR(欧元)、CAD(加元)，假设基金选择方法每次选择兑换值最高的货币作为投资目标，实验包括对JUnit和EasyMock的使用，最后给出关键的代码截图和测试用例运行结果。</p>
<h3 id="1-1-接口-ExchangeRate"><a href="#1-1-接口-ExchangeRate" class="headerlink" title="1.1 接口 ExchangeRate"></a>1.1 接口 ExchangeRate</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExchangeRate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">(String inputCurrency, String outputCurrency)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-需测试类-Currency-java"><a href="#1-2-需测试类-Currency-java" class="headerlink" title="1.2 需测试类 Currency.java"></a>1.2 需测试类 Currency.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Currency</span><span class="params">(<span class="keyword">double</span> amount,String unit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.unit=unit;</span><br><span class="line">        setAmount(amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = <span class="keyword">new</span> Double(amount2).longValue();</span><br><span class="line">        <span class="keyword">this</span>.cents=(<span class="keyword">int</span>) amount2*<span class="number">100</span>%<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Currency <span class="title">toChange</span><span class="params">(ExchangeRate converter)</span></span>&#123;</span><br><span class="line">        String[]u=&#123;<span class="string">"CNY"</span>,<span class="string">"USD"</span>,<span class="string">"GBP"</span>,<span class="string">"EUR"</span>,<span class="string">"CAD"</span>&#125;;</span><br><span class="line">        String changeUnit=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">double</span> maxRate=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> temp;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String tempUnit:u)&#123;</span><br><span class="line">                temp=converter.getRate(<span class="keyword">this</span>.unit,tempUnit);</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;maxRate) &#123;</span><br><span class="line">                    changeUnit=tempUnit;</span><br><span class="line">                    maxRate=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(changeUnit.equals(<span class="keyword">this</span>.unit)) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">double</span> input = amount+cents/<span class="number">100.0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Currency(input*maxRate,changeUnit);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Currency)&#123;</span><br><span class="line">            Currency other =(Currency) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.unit.equals(other.unit) &amp;&amp; <span class="keyword">this</span>.amount==other.amount &amp;&amp; <span class="keyword">this</span>.cents==other.cents;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.amount+<span class="string">"."</span>+cents+<span class="string">" "</span>+unit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-3-测试类"><a href="#1-3-测试类" class="headerlink" title="1.3 测试类"></a>1.3 测试类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Currency testObject=<span class="keyword">new</span> Currency(<span class="number">2.5</span>,<span class="string">"USD"</span>);</span><br><span class="line">        Currency expected=<span class="keyword">new</span> Currency(<span class="number">3.75</span>,<span class="string">"EUR"</span>);</span><br><span class="line"></span><br><span class="line">        ExchangeRate mockRate= EasyMock.createMock(ExchangeRate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"USD"</span>)).andReturn(<span class="number">1.0</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CNY"</span>)).andReturn(<span class="number">0.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"GBP"</span>)).andReturn(<span class="number">1.1</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"EUR"</span>)).andReturn(<span class="number">1.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CAD"</span>)).andReturn(<span class="number">0.3</span>);</span><br><span class="line">        EasyMock.replay(mockRate);</span><br><span class="line"></span><br><span class="line">        Currency actual=testObject.toChange(mockRate);</span><br><span class="line">        assertEquals(actual,expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <ol><li>Currency类中要覆盖Object的toString方法，是因为assertEquals方法中传入的是两个Currency对象，它会像根据Object的toString方法，将二者转化为String类型，再通过equals方法比较。默认转化为Currency对象的地址。</li><li>Currency类中要覆盖Object的equals方法，是因为Object的equals方法默认按地址比较，而不是内容。</li></ol>
          </div>

<hr>
<h2 id="二、实例二-（模拟JavaEE环境）"><a href="#二、实例二-（模拟JavaEE环境）" class="headerlink" title="二、实例二 （模拟JavaEE环境）"></a>二、实例二 （模拟JavaEE环境）</h2><h3 id="2-1-需测试类-LoginServlet-java"><a href="#2-1-需测试类-LoginServlet-java" class="headerlink" title="2.1 需测试类 LoginServlet.java"></a>2.1 需测试类 LoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">		String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">		String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(password)) &#123;</span><br><span class="line">			ServletContext context = getServletContext();</span><br><span class="line">			RequestDispatcher dispatcher = context.getNamedDispatcher(<span class="string">"dispatcher"</span>);</span><br><span class="line">			dispatcher.forward(req, res);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Login failed."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-测试类-TestLoginServlet-java"><a href="#2-2-测试类-TestLoginServlet-java" class="headerlink" title="2.2 测试类 TestLoginServlet.java"></a>2.2 测试类 TestLoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLoginServlet</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> ServletContext context;</span><br><span class="line">    <span class="keyword">private</span> RequestDispatcher dispatcher;</span><br><span class="line">    <span class="keyword">private</span> LoginServlet loginServlet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        request= EasyMock.createMock(HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        context=EasyMock.createMock(ServletContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        dispatcher=EasyMock.createMock(RequestDispatcher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        loginServlet=<span class="keyword">new</span> LoginServlet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.expect(context.getNamedDispatcher(<span class="string">"dispatcher"</span>)).andReturn(dispatcher);</span><br><span class="line">        dispatcher.forward(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        EasyMock.replay(context);</span><br><span class="line">        EasyMock.replay(dispatcher);</span><br><span class="line">        <span class="comment">//匿名类 </span></span><br><span class="line">        loginServlet =<span class="keyword">new</span> LoginServlet()&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> context;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">        EasyMock.verify(context);</span><br><span class="line">        EasyMock.verify(dispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"ad"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>测试类中之所以用到匿名类，是因为要测试的代码中使用了getServletContext()方法，此方法是Servlet上下文的方法，此处模拟了环境，也应模拟此方法。</p><p>How使用匿名类？<a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
          </div>

<hr>
<h2 id="三、实例三"><a href="#三、实例三" class="headerlink" title="三、实例三"></a>三、实例三</h2><h3 id="3-1-接口-DBUtility-java"><a href="#3-1-接口-DBUtility-java" class="headerlink" title="3.1 接口 DBUtility.java"></a>3.1 接口 DBUtility.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBUtility</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Statement stmt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(ResultSet rs)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-SalesOrders-java"><a href="#3-2-SalesOrders-java" class="headerlink" title="3.2 SalesOrders.java"></a>3.2 SalesOrders.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SalesOrder</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-SalesOrderImpl-java"><a href="#3-3-SalesOrderImpl-java" class="headerlink" title="3.3 SalesOrderImpl.java"></a>3.3 SalesOrderImpl.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderImpl</span> <span class="keyword">implements</span> <span class="title">SalesOrder</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> String orderNumber;</span><br><span class="line">	<span class="keyword">private</span> String region;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> totalPrice;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> totalPrice;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>&#123;<span class="keyword">this</span>.orderNumber = orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>&#123;<span class="keyword">this</span>.region = region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>&#123;<span class="keyword">this</span>.totalPrice = totalPrice;&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		orderNumber = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">		region = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">		totalPrice = resultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> totalPrice = <span class="keyword">this</span>.getTotalPrice();</span><br><span class="line">		<span class="keyword">double</span> totalPoints = <span class="number">0.0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"Africa"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Asia Pacific"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.9</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Europe"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.85</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"America"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.8</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.75</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (totalPoints &lt; <span class="number">500</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_A"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">1000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_B"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">2000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_C"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">4000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_D"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_E"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"orderNumber = "</span>+orderNumber+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"region = "</span>+region+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"totalPrice = "</span>+totalPrice+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"priceLevel = "</span>+<span class="keyword">this</span>.getPriceLevel()+<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-测试-SalesOrderTestCase-java"><a href="#3-4-测试-SalesOrderTestCase-java" class="headerlink" title="3.4 测试 SalesOrderTestCase.java"></a>3.4 测试 SalesOrderTestCase.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.testcase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.expectLastCall;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.demo.matcher.SQLEquals.sqlEquals;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IMocksControl;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.DBUtility;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrder;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrderImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderTestCase</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSalesOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		IMocksControl control = EasyMock.createControl();</span><br><span class="line">		</span><br><span class="line">		DBUtility mockDBUtility = control.createMock(DBUtility<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mockDBUtility.getConnection();</span><br><span class="line">			EasyMock.expectLastCall().andStubReturn(mockConnection);</span><br><span class="line"></span><br><span class="line">			mockConnection.createStatement();</span><br><span class="line">			expectLastCall().andStubReturn(mockStatement);</span><br><span class="line"></span><br><span class="line">			mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>));</span><br><span class="line">			expectLastCall().andStubReturn(mockResultSet);</span><br><span class="line"></span><br><span class="line">			mockResultSet.next();</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">true</span>).times(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">false</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_001"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_002"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_003"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">2</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Asia Pacific"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Europe"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"America"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">1350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">5350.0</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			control.replay();</span><br><span class="line">			</span><br><span class="line">			Connection conn = mockDBUtility.getConnection();</span><br><span class="line">			Statement stat = conn.createStatement();</span><br><span class="line">			ResultSet rs = stat.executeQuery(<span class="string">"select * from sales_order_table"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			String[] priceLevels = &#123; <span class="string">"Level_A"</span>, <span class="string">"Level_C"</span>, <span class="string">"Level_E"</span> &#125;;</span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">				SalesOrder order = <span class="keyword">new</span> SalesOrderImpl();</span><br><span class="line">				order.loadDataFromDB(rs);</span><br><span class="line">				assertEquals(order.getPriceLevel(), priceLevels[i]);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;		</span><br><span class="line">			control.verify();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-自定义参数匹配器-SQLEquals-java"><a href="#3-5-自定义参数匹配器-SQLEquals-java" class="headerlink" title="3.5 自定义参数匹配器 SQLEquals.java"></a>3.5 自定义参数匹配器 SQLEquals.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">		buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String) <span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line">        reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyMock入门使用</title>
    <url>/2020/04/03/EasyMock%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>

<!-- toc -->


<h1 id="EasyMock入门使用"><a href="#EasyMock入门使用" class="headerlink" title="EasyMock入门使用"></a>EasyMock入门使用</h1><h2 id="一、EasyMock安装"><a href="#一、EasyMock安装" class="headerlink" title="一、EasyMock安装"></a>一、EasyMock安装</h2><ol>
<li><p>EasyMock是一套通过简单的方法对于指定的接口或类生成Mock对象的类库，它能利用对接口或类的模拟来辅助单元测试。</p>
</li>
<li><p>要使用EasyMock辅助单元测试，添加easymock的jar包即可。</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" data-fancybox="group" data-caption="image-20200402190315174" class="fancybox"><img alt="image-20200402190315174" style="zoom:40%;" title="image-20200402190315174" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" class="lazyload"></a>

</li>
</ol>
<hr>
<h2 id="二、EasyMock使用"><a href="#二、EasyMock使用" class="headerlink" title="二、EasyMock使用"></a>二、EasyMock使用</h2><p>通过EasyMock，我们可以为指定的接口动态地创建Mock对象，并利用Mock对象来模拟协同模块或领域对象，从而使单元测试顺利进行。此过程可划分为以下步骤：</p>
<ul>
<li>使用EasyMock生成Mock对象</li>
<li>设定Mock对象的预期行为和输出</li>
<li>将Mock对象切换到Replay状态</li>
<li>调用Mock对象方法进行单元测试</li>
<li>对Mock对象的行为进行验证</li>
</ul>
<h3 id="2-1-使用EasyMock生成Mock对象"><a href="#2-1-使用EasyMock生成Mock对象" class="headerlink" title="2.1 使用EasyMock生成Mock对象"></a>2.1 使用EasyMock生成Mock对象</h3><p>根据指定的接口或类，EasyMock能动态地创建Mock对象。</p>
<h4 id="2-1-1-为接口生成Mock对象"><a href="#2-1-1-为接口生成Mock对象" class="headerlink" title="2.1.1 为接口生成Mock对象"></a>2.1.1 为接口生成Mock对象</h4><p><font class="fb">Eg：以<code>ResultSet</code>接口为例</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">ResultSet</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.<span class="function">String <span class="title">getString</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>通常，构建一个真实的 <code>RecordSet</code> 对象需要经过一个复杂的过程：在开发过程中，开发人员通常会编写一个 <code>DBUtility</code> 类来获取数据库连接 <code>Connection</code>，并利用 <code>Connection</code> 创建一个 <code>Statement</code>。执行一个 <code>Statement</code> 可以获取到一个或多个 <code>ResultSet</code> 对象。这样的构造过程复杂并且依赖于数据库的正确运行。数据库或是数据库交互模块出现问题，都会影响单元测试的结果。</p>
</li>
<li><p>我们可以使用 EasyMock 动态构建 <code>ResultSet</code> 接口的 Mock 对象来解决这个问题。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">import</span> org.easymock.Easymock; <span class="comment">//静态方法引入</span></span><br><span class="line">ResultSet mockResultSet = createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>或</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.easymock.Easymock; </span><br><span class="line">ResultSet mockResultSet = Easymock.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-2-为类生成Mock对象"><a href="#2-1-2-为类生成Mock对象" class="headerlink" title="2.1.2 为类生成Mock对象"></a>2.1.2 为类生成Mock对象</h4><p>EasyMock默认只支持为接口生成Mock对象，若要为类生成Mock对象，需下载扩展包<code>EasyMock Class Extension</code>，在对具体类进行模拟时，只需把 <code>org.easymock.EasyMock</code>替换为 <code>org.easymock.classextension.Easymock</code>。</p>
<h4 id="2-1-3-使用IMocksControl对象管理Mock对象"><a href="#2-1-3-使用IMocksControl对象管理Mock对象" class="headerlink" title="2.1.3 使用IMocksControl对象管理Mock对象"></a>2.1.3 使用IMocksControl对象管理Mock对象</h4><p>若在相对复杂的测试用例中使用多个Mock对象，可使用EasyMock提供的生成和管理Mock对象的机制。</p>
<p>EasyMock类的<code>createControl</code>方法能创建一个接口<code>IMocksControl</code>的对象，此对象能创建并管理多个Mock对象。</p>
<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createControl();</span><br><span class="line">java.sql.Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-设定Mock对象的预期行为和输出"><a href="#2-2-设定Mock对象的预期行为和输出" class="headerlink" title="2.2 设定Mock对象的预期行为和输出"></a>2.2 设定Mock对象的预期行为和输出</h3><ol>
<li><p>在一个完整测试中，一个Mock对象会经历两个状态：Record状态和Replay状态。</p>
<p>Mock对象一经创建，状态为Record，Record状态下用户可以设定Mock对象的预期行为和输出，这些对象行为会被录制下来，保存在Mock对象中。</p>
</li>
<li><p>添加Mock对象行为的过程分为三步：</p>
<ul>
<li>对Mock对象的特定方法作出调用</li>
<li>通过org.easymock.EasyMock提供的静态方法expectLastCall获取上一次方法调用所对应的IExpectionSetters实例</li>
<li>用过IExpectionSetters实例设定Mock对象的预期输出（有两种类型）<ul>
<li>产生返回值</li>
<li>抛出异常</li>
</ul>
</li>
</ul>
<p>（Mock对象的行为可简单理解为Mock对象的调用和方法调用所产生的输出。）</p>
</li>
</ol>
<h4 id="2-2-1-设定预期返回值"><a href="#2-2-1-设定预期返回值" class="headerlink" title="2.2.1 设定预期返回值"></a>2.2.1 设定预期返回值</h4><p>设定返回值对应接口<code>IExpectionSetters</code>的<code>andReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andReturn</span><span class="params">(T value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<h5 id="2-2-1-1-返回值不是void"><a href="#2-2-1-1-返回值不是void" class="headerlink" title="2.2.1.1 返回值不是void"></a>2.2.1.1 返回值不是void</h5><ol>
<li><p><font class="fb">Eg：仍用 <code>ResultSet</code> 接口的 Mock 对象为例，若希望方法 <code>mockResultSet.getString(1)</code> 的返回值为 “My return value”，则：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">EasyMock.expectLastCall().andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>

<p> <font class="fb">或：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若希望 <strong>某方法的调用总是返回一个相同的值</strong> ，为避免每次调用都为Mock对象的行为进行一次设定，可用默认返回值的方法——<code>andSubReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubReturn</span><span class="params">(Object value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：假设我们创建了 <code>Statement</code> 和 <code>ResultSet</code> 接口的 Mock 对象 mockStatement 和 mockResultSet，在测试过程中，我们希望 mockStatement 对象的 <code>executeQuery</code> 方法总是返回 mockResultSet，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>)).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h5 id="2-2-1-2-返回值为void"><a href="#2-2-1-2-返回值为void" class="headerlink" title="2.2.1.2 返回值为void"></a>2.2.1.2 返回值为void</h5><p>若方法的返回值类型为void，则对于此类方法，我们无需设定返回值，只需设置调用次数就可以。（也可以不设置）</p>
<p>How设定调用次数，详看2.2.3。</p>
<p><font class="fb">Eg：以 <code>ResultSet</code> 接口的 <code>close</code> 方法为例，假设在测试过程中，该方法被调用3至5次，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.close();</span><br><span class="line">EasyMock.expectLastCall().times(<span class="number">3</span>,<span class="number">5</span>);<span class="comment">// 最新版本的EasyMock可以忽略此句</span></span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResult.close()).times(<span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-2-设定预期异常抛出"><a href="#2-2-2-设定预期异常抛出" class="headerlink" title="2.2.2 设定预期异常抛出"></a>2.2.2 设定预期异常抛出</h4><p>设定预期抛出异常对应接口<code>IExpectionSetters</code>的<code>andThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>类似的，设定抛出默认异常对应接口<code>IExpectionSetters</code>的<code>andStubThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expectLastCall().andThrow(</span><br><span class="line">                <span class="keyword">new</span> MyException(<span class="keyword">new</span> RuntimeException())).anyTimes();</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-3-设定预期方法调用次数"><a href="#2-2-3-设定预期方法调用次数" class="headerlink" title="2.2.3 设定预期方法调用次数"></a>2.2.3 设定预期方法调用次数</h4><ol>
<li>设定确定的调用次数：通过接口<code>IExpectionSetters</code>的<code>times</code>方法。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IExpectationSetters&lt;T&gt;times(<span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：我们希望 mockResultSet 的 <code>getString</code> 方法在测试过程中被调用3次，期间的返回值都是 “My return value”，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">expectLastCall().andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设定非准确调用次数：<ul>
<li><code>times(int minTimes, int maxTimes)</code>：该方法最少被调用 minTimes 次，最多被调用 maxTimes 次。</li>
<li><code>atLeastOnce()</code>：该方法至少被调用一次。</li>
<li><code>anyTimes()</code>：该方法可以被调用任意次。</li>
</ul>
</li>
</ol>
<h4 id="2-2-4-若返回结果在运行时才能确定"><a href="#2-2-4-若返回结果在运行时才能确定" class="headerlink" title="2.2.4 若返回结果在运行时才能确定"></a>2.2.4 若返回结果在运行时才能确定</h4><p>很可能某个方法期望的返回结果不是固定的，例如根据传入参数不同而不同；这时需要使用<strong>andAnswer</strong>()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockService.execute(EasyMock.anyInt())).andAnswer(<span class="keyword">new</span> IAnswer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">answer</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Integer count = (Integer) EasyMock.getCurrentArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>​    注意：通过<code>EasyMock.getCurrentArguments()</code>可以获取传入参数！</p>
          </div>



<h3 id="2-3-将Mock对象切换到Replay状态——replay"><a href="#2-3-将Mock对象切换到Replay状态——replay" class="headerlink" title="2.3 将Mock对象切换到Replay状态——replay"></a>2.3 将Mock对象切换到Replay状态——replay</h3><ol>
<li><p>在生成Mock对象和设定Mock对象行为的两个阶段，Mock对象的状态均为Record，此阶段Mock对象会记录用户对预期行为和输出的设定。</p>
</li>
<li><p>在使用Mock对象隐形实际的测试前，需将Mock对象的状态切换为Replay，此阶段Mock对象能根据设定对特定的方法调用作出预期的响应。</p>
</li>
<li><p>将对象切换到Replay状态有两种方法：</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.replay(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.replay();</span><br></pre></td></tr></table></figure></div>

<p>此语句可将通过coltrol的createMock方法生成的所有Mock对象均切换为Replay状态。</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-4-调用Mock对象方法进行单元测试"><a href="#2-4-调用Mock对象方法进行单元测试" class="headerlink" title="2.4 调用Mock对象方法进行单元测试"></a>2.4 调用Mock对象方法进行单元测试</h3><p>此部分放到JUnit+EasyMock实例中。</p>
<h3 id="2-5-对Mock对象的行为进行验证——verify"><a href="#2-5-对Mock对象的行为进行验证——verify" class="headerlink" title="2.5 对Mock对象的行为进行验证——verify"></a>2.5 对Mock对象的行为进行验证——verify</h3><p>在利用Mock对象进行实际的测试过程后，还需对Mock对象的方法调用的次数进行验证。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.verify(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.verify();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象方法的调用次数。</p>
</li>
</ul>
<h3 id="2-6-Mock对象的重用——reset"><a href="#2-6-Mock对象的重用——reset" class="headerlink" title="2.6 Mock对象的重用——reset"></a>2.6 Mock对象的重用——reset</h3><p>为避免生成过多的Mock对象，EasyMock允许对原有的Mock对象进行重用。</p>
<p>可使用reset方法对Mock对象重新初始化。重新初始化后，Mock对象被置为Record状态。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.reset(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.reset();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象重新初始化。</p>
</li>
</ul>
<hr>
<h2 id="三、在EasyMock中使用参数匹配器"><a href="#三、在EasyMock中使用参数匹配器" class="headerlink" title="三、在EasyMock中使用参数匹配器"></a>三、在EasyMock中使用参数匹配器</h2><p>使用Mock对象进行实际的测试过程中，EasyMock会根据方法名和参数来匹配一个预期方法的调用。</p>
<p>此时，EasyMock对参数的匹配默认使用equals()方法进行比较，这可能会引起一些问题，因此EasyMock提供了一些参数匹配方式。</p>
<div class="note info">
            <p><font class="fb">如2.2.1.1中创建的mockStatement对象：</font></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div><p>实际调用中，可能会遇到SQL语句中某些关键词大小写问题（因为SQL语句不区分大小写）如将SELECT写成select，此时EasyMock采用的默认匹配器equals方法将认为参数不匹配，则Mock对象的预期方法不会被调用。</p>
          </div>

<h3 id="3-1-EasyMock预定义的参数匹配器"><a href="#3-1-EasyMock预定义的参数匹配器" class="headerlink" title="3.1 EasyMock预定义的参数匹配器"></a>3.1 EasyMock预定义的参数匹配器</h3><ol>
<li><p><code>anyObject()</code>：任意输入值都与预期值匹配；</p>
</li>
<li><p><code>aryEq(X value)</code>：通过<code>Arrays.equals()</code>进行匹配，适用于数组对象；</p>
</li>
<li><p><code>isNull()</code>：当输入值为Null时匹配；</p>
</li>
<li><p><code>notNull()</code>：当输入值不为Null时匹配；</p>
</li>
<li><p><code>same(X value)</code>：当输入值和预期值是同一个对象时匹配；</p>
</li>
<li><p><code>lt(X value), leq(X value), geq(X value), gt(X value)</code>：当输入值小于、小等于、大等于、大于预期值时匹配，适用于数值类型；</p>
</li>
<li><p><code>startsWith(String prefix), contains(String substring), endsWith(String suffix)</code>：当输入值以预期值开头、包含预期值、以预期值结尾时匹配，适用于String类型；</p>
</li>
<li><p><code>matches(String regex)</code>：当输入值与正则表达式匹配时匹配，适用于String类型。</p>
<p><font class="fb">例如：若我对mockStatement具体执行的语句并不关注，希望所有输入的字符串都能够匹配这一方法的调用</font></p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(anyObject())).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p>详细参阅 <a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<h3 id="3-2-EasyMock自定义参数匹配器"><a href="#3-2-EasyMock自定义参数匹配器" class="headerlink" title="3.2 EasyMock自定义参数匹配器"></a>3.2 EasyMock自定义参数匹配器</h3><ol>
<li><p>预定义的参数匹配器无法满足一些复杂情况，此时需自己定义参数匹配器。</p>
<p><font class="fb">如：在3.1中我们希望有一个匹配器对SQL中关键词的大小写不敏感，使用anyObject其实并不好，此时我们可以自定义参数匹配器SQLEquals。</font></p>
</li>
<li><p>How自定义参数匹配器：</p>
<ul>
<li><p>实现 <code>org.easymock.IArgumentMatcher</code> 接口</p>
<ul>
<li><p><code>matches(Object actual)</code> 方法应当实现输入值和预期值的匹配逻辑</p>
</li>
<li><p><code>appendTo(StringBuffer buffer)</code> 方法可以添加当匹配失败时需要显示的信息</p>
</li>
</ul>
</li>
<li><p>使用静态方法包装实现接口的类</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"><span class="comment">//实现IArgumentMatcher接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123; </span><br><span class="line">   <span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//当匹配失败时需要显示的信息</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">       buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//输入值和预期值的匹配逻辑</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String) <span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//自定义参数匹配器SQLEquals静态方法	</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123; </span><br><span class="line">       reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">       <span class="keyword">return</span> in;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">使用自定义的sqlEquals匹配器：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>))).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="四、特殊的Mock对象类型"><a href="#四、特殊的Mock对象类型" class="headerlink" title="四、特殊的Mock对象类型"></a>四、特殊的Mock对象类型</h2><p>上述创建的Mock对象都属于EasyMock默认的Mock对象类型，它对预期方法的调用顺序不敏感，对非预期的方法调用抛出AssertionError。</p>
<p>除此默认类型，EasyMock还提供一些特殊的Mock类型用于支持不同的需求。</p>
<h3 id="4-1-Strick-Mock对象"><a href="#4-1-Strick-Mock对象" class="headerlink" title="4.1 Strick Mock对象"></a>4.1 Strick Mock对象</h3><p>Stick Mock对象——对方法调用的先后顺序敏感，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createStrickMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createStrickMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Stick Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createStrictControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-2-Nice-Mock对象"><a href="#4-2-Nice-Mock对象" class="headerlink" title="4.2 Nice Mock对象"></a>4.2 Nice Mock对象</h3><p>Nice Mock对象——默认返回0，null或false等“无效值”，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createNiceMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createNiceMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Nice Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createNiceControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="五、EasyMock-的工作原理"><a href="#五、EasyMock-的工作原理" class="headerlink" title="五、EasyMock 的工作原理"></a>五、EasyMock 的工作原理</h2><p>参阅  <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<hr>
<h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<p><a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<p><a href="https://blog.csdn.net/vking_wang/article/details/9170979" target="_blank" rel="noopener">【JUnit】EasyMock用法总结</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit测试实例</title>
    <url>/2020/03/31/JUnit%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-测试实例"><a href="#JUnit-测试实例" class="headerlink" title="JUnit 测试实例"></a>JUnit 测试实例</h1><h2 id="一、-实验要求"><a href="#一、-实验要求" class="headerlink" title="一、 实验要求"></a>一、 实验要求</h2><p>对Rectangle程序进行测试：根据已经学习的测试思想，对函数getArea()、getPerimeter()和findMax()进行测试。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length*width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">2</span>*length + width;&#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">                maxIndex = i;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;;</span><br><span class="line">        System.out.println(<span class="string">"面积最大："</span>+findMax(arr, <span class="keyword">new</span> areaCompare()).getObject());</span><br><span class="line">        System.out.println(<span class="string">"周长最长："</span>+findMax(arr, <span class="keyword">new</span> perimeterCompare()).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note primary">
            <p>若对代码中实现比较器的写法不理解，请看“四、参考文献” <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
          </div>



<h2 id="二、测试过程"><a href="#二、测试过程" class="headerlink" title="二、测试过程"></a>二、测试过程</h2><h3 id="2-1-测试getArea-方法——返回矩形面积"><a href="#2-1-测试getArea-方法——返回矩形面积" class="headerlink" title="2.1 测试getArea()方法——返回矩形面积"></a>2.1 测试getArea()方法——返回矩形面积</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length*width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>根据Rect类可得成员变量length、width为int型，含义为矩形的长宽，故合法输入为正数，负数和0位非法输入。</p>
<p>此处假设非法输入返回值为-1。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectArea</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width, <span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getArea方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:&#123;0&#125;*&#123;1&#125;=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>,-<span class="number">3</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">5</span>,-<span class="number">6</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getArea(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>由此可见，此方法代码并没有考虑输入为0和负数的非法情况。</p>
</li>
</ol>
<hr>
<h3 id="2-2-测试getPerimeter-方法——返回矩形周长"><a href="#2-2-测试getPerimeter-方法——返回矩形周长" class="headerlink" title="2.2 测试getPerimeter()方法——返回矩形周长"></a>2.2 测试getPerimeter()方法——返回矩形周长</h3>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*length + width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li><p>测试分析</p>
<p>同理于测试getArea()，此处需要的参数只有length、width，所以考虑负数和0的非法输入。</p>
<p>设计测试用例如下：   </p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectPerimeter</span><span class="params">(<span class="keyword">int</span> length,<span class="keyword">int</span> width,<span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getPerimeter方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:(&#123;0&#125;+&#123;1&#125;)*2=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">22</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerimeter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getPerimeter(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
<td align="center">-10</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>可见，方法代码并没有考虑输入为0和负数的非法情况，且计算过程存在问题，返回去看代码发现没有加括号，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(length+width);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h3 id="2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象"><a href="#2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象" class="headerlink" title="2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象"></a>2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">        <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">            maxIndex = i;</span><br><span class="line">    <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-3-1-比较器areaCompare——比较面积"><a href="#2-3-1-比较器areaCompare——比较面积" class="headerlink" title="2.3.1 比较器areaCompare——比较面积"></a>2.3.1 比较器areaCompare——比较面积</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>需要参数length、width，所以考虑负数和0的非法输入。</p>
<p>需注意⚠️：若比较面积时输入的矩形数组都为非法输入（矩形长宽都存在0或负数），getArea()因为非法输入都return -1，则areaCompare比较器中比较函数compare都会return 0，则findMax中return arr[0]，返回一个非法矩形，显然错误。故此处findMax也要有一个对应非法输入时的输出，假设为null。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxArea</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">20</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.areaCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
<td align="center">(3,10)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(0,3)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(0,3)</td>
</tr>
</tbody></table>
<p>可见，代码没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况，且通过第一个测试用例可知，计算过程存在问题，返回去看代码发现areaCompare比较器中比较函数compare存在逻辑错误，应返回最大矩形对象，却返回最小矩形对象，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h4 id="2-3-2-比较器perimeterCompare——比较周长"><a href="#2-3-2-比较器perimeterCompare——比较周长" class="headerlink" title="2.3.2 比较器perimeterCompare——比较周长"></a>2.3.2 比较器perimeterCompare——比较周长</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>同理于areaCompare，需要参数length、width，所以考虑负数和0的非法输入；设置null为全非法输入的返回值。<br>设计测试用例</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxPerimeter</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">2</span>,<span class="number">65</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.perimeterCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
</ol>
<ol start="3">
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(6,0)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(6,0)</td>
</tr>
</tbody></table>
<p>可见代码同样没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况。</p>
</li>
</ol>
<hr>
<h2 id="三、修改代码"><a href="#三、修改代码" class="headerlink" title="三、修改代码"></a>三、修改代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> length*width;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>*(length + width);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(((Rect)arr[maxIndex]).getLength()&lt;=<span class="number">0</span> || ((Rect)arr[maxIndex]).getWidth()&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span></span>&#123;</span><br><span class="line">             <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Rect rect1=findMax(arr, <span class="keyword">new</span> areaCompare());</span><br><span class="line">        Rect rect2=findMax(arr, <span class="keyword">new</span> perimeterCompare());</span><br><span class="line">        <span class="keyword">if</span>(rect1 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"面积最大："</span>+rect1.getObject());</span><br><span class="line">        <span class="keyword">if</span>(rect2 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"周长最长："</span>+rect2.getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为方便测试，使用测试套件Suite，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;TestRectArea<span class="class">.<span class="keyword">class</span>,<span class="title">TestRectPerimeter</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxArea</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxPerimeter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:48%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" class="lazyload"></a>

<p>程序执行结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" data-fancybox="group" data-caption="image-20200331140852779" class="fancybox"><img alt="image-20200331140852779" style="zoom:33%;" title="image-20200331140852779" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" class="lazyload"></a>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p> <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit+idea入门使用</title>
    <url>/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Junit-idea入门使用"><a href="#Junit-idea入门使用" class="headerlink" title="Junit+idea入门使用"></a>Junit+idea入门使用</h1><h2 id="一、Junit配置"><a href="#一、Junit配置" class="headerlink" title="一、Junit配置"></a>一、Junit配置</h2><ol>
<li><p>Intellij idea添加Junit插件</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" data-fancybox="group" data-caption="image-20200326203540257" class="fancybox"><img alt="image-20200326203540257" title="image-20200326203540257" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" class="lazyload"></a></p>
<p>快捷键(command+，)进入preference，在Plugins中搜索Junit，并安装JunitGeneratorV2.0，安装完毕后重启idea。</p>
</li>
<li><p>在需要测试的项目中导入jar包</p>
<p>Hamcrest Core包 <a href="https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core/1.3" target="_blank" rel="noopener">下载地址</a></p>
<p>Junit4包  <a href="https://mvnrepository.com/artifact/junit/junit/4.12" target="_blank" rel="noopener">下载地址</a></p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" data-fancybox="group" data-caption="image-20200326205514332" class="fancybox"><img alt="image-20200326205514332" style="zoom:50%;" title="image-20200326205514332" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" class="lazyload"></a>

<p>快捷键（command+；）进入Project Structure，==》model==》Dependencies中添加jar</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" data-fancybox="group" data-caption="image-20200326205637184" class="fancybox"><img alt="image-20200326205637184" title="image-20200326205637184" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" class="lazyload"></a></p>
</li>
<li><p>Junit具体设置，可在preference中查看</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" data-fancybox="group" data-caption="image-20200326210734815" class="fancybox"><img alt="image-20200326210734815" title="image-20200326210734815" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="二、使用Junit进行测试"><a href="#二、使用Junit进行测试" class="headerlink" title="二、使用Junit进行测试"></a>二、使用Junit进行测试</h2><p>Eg：编写简单的计算器，包含加减乘除4个功能，参数为double类型。</p>
<ol>
<li>创建java工程，在src中创建Calculator类，代码如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1,<span class="keyword">double</span> n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.add(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.subtract(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.multiply(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n2==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.divide(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <p>​      注：之所以要用上面这种写法，而不用如下代码，是为了避免double的精度误差：</p>
          </div>

</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1-n2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>​        具体可查看<a href="https://blog.csdn.net/m0_37450089/article/details/80270893" target="_blank" rel="noopener">java double相对精度误差</a></p>
<ol start="2">
<li><p>创建src同级目录test，并将之设为Test根目录，之后此文件夹会显示为绿色。</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" data-fancybox="group" data-caption="image-20200326211308852" class="fancybox"><img alt="image-20200326211308852" style="zoom:30%;" title="image-20200326211308852" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" class="lazyload"></a>
</li>
<li><p>在test目录中编写测试类</p>
<p>选中要测试的类，右键选择Test，或者直接快捷键shift+command+T</p>
<p>点击Create New Test，之后可以设置生成的测试类名，是否有setup等方法，以及要测试的方法</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" data-fancybox="group" data-caption="image-20200326211548128" class="fancybox"><img alt="image-20200326211548128" style="zoom:35%;" title="image-20200326211548128" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" data-fancybox="group" data-caption="image-20200326211803437" class="fancybox"><img alt="image-20200326211803437" style="zoom:30%;" title="image-20200326211803437" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" data-fancybox="group" data-caption="image-20200326211931771" class="fancybox"><img alt="image-20200326211931771" style="zoom:45%;" title="image-20200326211931771" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" class="lazyload"></a>

<p>生成效果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" data-fancybox="group" data-caption="image-20200326212315132" class="fancybox"><img alt="image-20200326212315132" style="zoom:40%;" title="image-20200326212315132" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" class="lazyload"></a>

<p>编写代码如下，点击测试类左侧的小箭头即可运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">2.3</span>,<span class="number">5.4</span>),<span class="number">7.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">3.2</span>,<span class="number">5.3</span>),-<span class="number">2.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">3.1</span>,<span class="number">5.2</span>),<span class="number">16.12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.div(<span class="number">3.2</span>,<span class="number">5.0</span>),<span class="number">0.64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <ol><li>因为不继承TestCase，assertEquals方法来自import static org.junit.Assert.*;此方法已过时。以下提供两种解决方法：</li></ol><ul><li>extends TestCase，以使用TestCase类的assertEquals方法。</li><li>import static org.junit.Assert.*; 使用assertEquals(x1,x2,x3);三个参数的形式，表示判断x1与x2是否在误差x3内相等。 </li></ul><ol start="2"><li>格式规范：</li></ol><ul><li>extends TestCase并在方法前加test</li><li>import org.junit.Test，在测试方法前使用注解@Test（不继承TestCase）</li></ul><p>​        否则会出现如下报错：<br><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" data-fancybox="group" data-caption="image-20200326213406633" class="fancybox"><img alt="image-20200326213406633" style="zoom:50%;" title="image-20200326213406633" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" class="lazyload"></a></p><p>​        这是因为以前版本的JUnit通过命名约定和反射来定位测试用例，要求测试方法以“test”开头+方法名，且测试类需要继承TestCase。JUnit4中简化了这个操作，只需要在测试类中引入org.junit.Test，在测试方法前使用注解@Test，JUnit就可以侦测到此测试方法，保持了代码的简洁。</p><p>​    PS：在JUnit4中仍可以以原来的方式进行测试（继承TestCase并在方法前加test），但这样就没有必要用到注解，因为一旦继承了TestCase，注解就会失效，此时没有test前缀，会报上述错误AssertionFailedError:No tests found……</p>
          </div>



</li>
</ol>
<ol start="4">
<li><p>使用测试套件Suite</p>
<p>​        因为3所说的编写Test类，对于每个测试方法，只能写一个测试用例。则编写多个测试用例就需要写多个测试类。那如何使这些测试类同时一起运行呢？答案是使用Suite。</p>
<p>​        Suite是一种批量运行测试类的方法，以方便我们在每次进行系统测试时，只需执行若干测试套件而不是执行无数测试用例。</p>
<div class="note danger">
            <p>​        测试套件中不仅可以包含基本的测试类，而且可以包含其它的测试套件。但是，一定要保证测试套件之间没有循环包含关系，否则将出现死循环。</p>
          </div>

<p>​        为了演示，此处再编写CalculatorTest2类，代码如下：    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest2</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator =<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">23.0</span>,<span class="number">1.0</span>),<span class="number">24.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">9.8</span>,<span class="number">5.3</span>),<span class="number">4.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">2.0</span>,<span class="number">6.0</span>),<span class="number">12.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     assertEquals(calculator.div(<span class="number">5.0</span>,<span class="number">0.0</span>),-<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法一：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestSuite; </span><br><span class="line"><span class="keyword">import</span> junit.framework.Test; </span><br><span class="line"><span class="keyword">import</span> junit.textui.TestRunner; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> <span class="keyword">extends</span> <span class="title">TestSuite</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//TestSuite功能练习</span></span><br><span class="line">        TestSuite suite = <span class="keyword">new</span> TestSuite(<span class="string">"TestSuite Test"</span>); </span><br><span class="line">        suite.addTestSuite(TestCalculator<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTestSuite(TestCalculator2<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTest(<span class="keyword">new</span> TestCalculator());</span><br><span class="line">        <span class="comment">//添加一个具体的测试用例</span></span><br><span class="line">        suite.addTest(TestSuite.createTest(TestCalculator<span class="class">.<span class="keyword">class</span>,“<span class="title">testAdd</span>”))</span>;</span><br><span class="line">        <span class="keyword">return</span> suite; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">        TestRunner.run(suite()); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* suite方法命名规则如下：</span></span><br><span class="line"><span class="comment">       1）必须以“suite”方法命名；</span></span><br><span class="line"><span class="comment">       2）suite方法的访问修饰权限必须为public；</span></span><br><span class="line"><span class="comment">       3）.suite方法必须为静态方法；</span></span><br><span class="line"><span class="comment">       4）.suite方法必须没有参数。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法二（此处我采用了写法二）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;CalculatorTest<span class="class">.<span class="keyword">class</span>,<span class="title">CalculatorTest2</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note info">
            <p>​        @RunWith：当类被@RunWith注解修饰，或者类继承一个被@RunWith注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不是使用JUnit默认的运行器。</p><p>​        在执行JUnit测试引擎的run方法时会调用TestSuite的的run方法，TestSuite在执行自身run方法时会遍历所有TestCase对象的run方法，同一个TestCase子类的run方法会根据自身所包含的测试用例个数被执行相应的次数。</p>
          </div>

<p>​    执行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" style="zoom:45%;" title="6" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" class="lazyload"></a>
</li>
<li><p>参数化测试——使用Parameterized</p>
<p>​        当我们编写了大量的单元测试方法后，我们发现这些方法其实大同小异，只是参数不同（测试边界值或者测试异常值）。在以前的 JUnit版本上，并没有好的解决方法，而现在我们可以使用JUnit提供的参数化测试方式解决这个问题。</p>
<p>​        若要避免一个测试用例写一个测试类的情况，可使用Parameterized，写多个测试用例。</p>
<div class="note info">
            <ol><li>JUnit4通过Parameterized运行器实现参数化测试。@RunWith(parameterized.class)</li><li>提供数据的方法要加@Parameters注解，此方法必须为静态方法（static），且返回一个集合（Collection）。<br> 此处使用了interable接口的写法也🉑️（因为Collection是interable接口的实现，实现了interable接口就可以使用foreach）<br> 为更容易区分参数化测试的每个测试用例，可在@Parameters注解上提供一个名称。此名称可包含占位符，此占位符在运行时将被替换。<ul><li>{index}:当前参数的索引</li><li>{0},{1},……:第一个参数，第二个参数……</li></ul></li><li>当执行参数化测试类时，实例的测试方法和测试数据将在测试示例创建时交叉连接在一起。 </li></ol>
          </div>

<p>​        创建一个类TestCalculator，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(value = Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberB;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCalculator</span><span class="params">(<span class="keyword">double</span> numberA,<span class="keyword">double</span> numberB,<span class="keyword">double</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberA=numberA;</span><br><span class="line">        <span class="keyword">this</span>.numberB=numberB;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:add(&#123;0&#125;+&#123;1&#125;)=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data1()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">2.0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3.4</span>,<span class="number">5.8</span>,<span class="number">9.2</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        assertEquals(calculator.add(numberA,numberB),expected,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>运行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" style="zoom:50%;" title="8" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" class="lazyload"></a>
<div class="note warning">
            <p>若测试只需单个参数，则无需将其包装为数组，此情况可提供一个迭代器或对象数组。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;? extends Object&gt; data() &#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.asList(<span class="string">"first test"</span>, <span class="string">"second test"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>​    或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object[] data() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Object[] &#123; <span class="string">"first test"</span>, <span class="string">"second test"</span> &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
          </div>

</li>
</ol>
<h2 id="三、more-about-Junit"><a href="#三、more-about-Junit" class="headerlink" title="三、more about Junit"></a>三、more about Junit</h2><ol>
<li>Junit注解</li>
</ol>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试注解，标记一个方法可以作为一个测试用例。</td>
</tr>
<tr>
<td>@Before</td>
<td>Before注解表示，该方法必须在类中的每个测试之前执行,以便执行某些必要的先决条件。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>BeforeClass注解指出这是附着在静态方法必须执行一次并在类的所有测试之前，这种情况一般用于测试计算、共享配制方法(如数据库连接)。</td>
</tr>
<tr>
<td>@After</td>
<td>After注释表示，该方法在每项测试后执行（如执行每一个测试后重置某些变量，删除临时变量等）。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>当需要执行所有测试在JUnit测试用例类后执行，AlterClass注解可以使用以清理一些资源（如数据库连接），注意：方法必须为静态方法。</td>
</tr>
<tr>
<td>@Ignore</td>
<td>当想暂时禁用特定的测试执行可以使用这个注解，每个被注解为@Ignore的方法将不再执行。</td>
</tr>
<tr>
<td>@Runwith</td>
<td>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。</td>
</tr>
<tr>
<td>@Parameters</td>
<td>用于使用参数化功能。</td>
</tr>
<tr>
<td>@SuiteClasses</td>
<td>用于套件测试。</td>
</tr>
</tbody></table>
<ol start="2">
<li>Junit断言</li>
</ol>
<table>
<thead>
<tr>
<th>断言</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void assertEquals([String message],expected value,actual value)</td>
<td>断言两个值相等。值类型可能是int，short，long，byte，char，Object，第一个参数是一个可选字符串消息</td>
</tr>
<tr>
<td>void assertTrue([String message],boolean condition)</td>
<td>断言一个条件为真</td>
</tr>
<tr>
<td>void assertFalse([String message],boolean condition)</td>
<td>断言一个条件为假</td>
</tr>
<tr>
<td>void assertNotNull([String message],java.lang.Object object)</td>
<td>断言一个对象不为空（null）</td>
</tr>
<tr>
<td>void assertNull([String message],java.lang.Object object)</td>
<td>断言一个对象为空（null）</td>
</tr>
<tr>
<td>void assertSame([String message],java.lang.Object expected,java.lang.Object actual)</td>
<td>断言两个对象引用相同的对象</td>
</tr>
<tr>
<td>void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)</td>
<td>断言两个对象不是引用同一个对象</td>
</tr>
<tr>
<td>void assertArrayEquals([String message],expectedArray,resultArray)</td>
<td>断言预期数组和结果数组相等，数组类型可能是int，short，long，byte，char，Object</td>
</tr>
</tbody></table>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/mattlinsheep/article/details/7225334" target="_blank" rel="noopener">JUnit4使用手册</a><br><a href="https://blog.csdn.net/w605283073/article/details/80051229" target="_blank" rel="noopener">JUnit4 参数化测试（Parameterized tests）</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>


<h1 id="第1章-数据结构绪论"><a href="#第1章-数据结构绪论" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h1><p><strong>数据结构:</strong> 是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<h2 id="1-4-基本概念和术语"><a href="#1-4-基本概念和术语" class="headerlink" title="1.4 基本概念和术语"></a>1.4 基本概念和术语</h2><ol>
<li><strong>数据:</strong> 是<span class="y">描述客观事物的符号</span>，是计算机中可操作的对象，是能<u>被计算机识别</u>，并<u>输入给计算机处理的符号集合</u>。</li>
<li><strong>数据元素（记录）:</strong> 是<span class="y">组成数据</span>的、有一定意义的基本单位，在计算机中通常作为整体处理。</li>
<li><strong>数据项:</strong> 一个<span class="y">数据元素可由若干个数据项组成</span>。  </li>
<li><strong>数据对象:</strong> 是<span class="y">性质相同的数据元素的集合</span>，是<span class="r">数据的子集</span>。  <ul>
<li>性质相同—数据元素<u><strong>具有相同数量和类型</strong></u>的数据项。  </li>
<li>在不产生混淆的情况下，简称数据。</li>
</ul>
</li>
<li><strong>数据结构：</strong> 是<span class="y">相互之间存在一种或多种特定关系的数据元素的集合。</span>即数据具有<u>组织形式</u>。<ul>
<li><strong>逻辑结构：</strong> 指<span class="y">数据对象中数据元素之间的相互关系。</span> 分为以下四种：<ul>
<li><strong>集合结构：</strong> 数据元素间关系只有<span class="b">“同属于一个集合”</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" class="lazyload"></a></li>
<li><strong>线性结构：</strong> 数据元素之间是<span class="b">一对一关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" class="lazyload"></a></li>
<li><strong>树形结构：</strong> 数据元素之间存在<span class="b">一对多的层次关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" class="lazyload"></a></li>
<li><strong>图形结构：</strong> 数据元素之间存在<span class="b">多对多关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" class="lazyload"></a><br>PS：用示意图表示数据的逻辑结构时：</li>
<li>将每个数据元素看做一个结点，用圆圈表示。</li>
<li>元素之间的逻辑关系用结点之间的连线表示，若此关系有方向就带上箭头。<ul>
<li><strong>物理结构（存储结构）：</strong> 指<span class="y">数据的逻辑结构在计算机中的存储形式。</span>  </li>
</ul>
</li>
<li>数据是数据元素的集合，则物理结构就是<span class="r">如何把数据元素存储到计算机存储器中</span>。</li>
<li>存储结构应正确反映元素间的逻辑关系。有以下两种：<ul>
<li><strong>顺序存储结构：</strong> 将数据元素存放在<span class="b">地址连续的存储单元</span>。<br><span class="r">数据间的逻辑关系与物理关系一致</span>。<font class="fb">Eg：数组</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" class="lazyload"></a></li>
<li><strong>链式存储结构：</strong> 将数据元素存放在<span class="b">任意的存储单元</span>，存储单元可以连续可以不连续。<br><span class="r">数据元素的物理关系不能反映逻辑关系</span>，所以需一个 <strong>指针</strong> 存放数据元素的地址，则可通过地址找到相关联数据元素的位置。<font class="fb">Eg：链表</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" class="lazyload"></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><span class="r"><strong>数据项是数据不可分割的最小单位。</strong></span></li>
<li>数据项组成数据元素（记录），数据元素组成数据。<br><font class="fb">Eg：人类是数据，人是数据元素，眼、耳、口、鼻等是数据项。</font><ul>
<li>数据对象是相同数据元素的集合，数据结构是相互间存在某关系的数据元素的集合。<br><font class="fb">Eg:人都有姓名、生日、性别等相同的数据项，这些数据项的集合为数据对象。</font></li>
<li>研究数据结构的意义：分析待处理对象的性质及各处理对象之间存在的关系，以编写好的程序。</li>
<li>数据结构分为逻辑结构、物理结构。<br>逻辑结构—数据对象中数据元素之间的关系，分为集合结构、线性结构、树形结构、图形结构</li>
</ul>
</li>
</ul>
<p>　</p>
<p>　</p>
]]></content>
  </entry>
</search>
