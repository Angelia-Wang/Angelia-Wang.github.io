<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EasyMock入门使用</title>
    <url>/2020/04/03/EasyMock%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>


<p>[TOC]</p>
<h1 id="EasyMock入门使用"><a href="#EasyMock入门使用" class="headerlink" title="EasyMock入门使用"></a>EasyMock入门使用</h1><h2 id="一、EasyMock安装"><a href="#一、EasyMock安装" class="headerlink" title="一、EasyMock安装"></a>一、EasyMock安装</h2><ol>
<li><p>EasyMock是一套通过简单的方法对于指定的接口或类生成Mock对象的类库，它能利用对接口或类的模拟来辅助单元测试。</p>
</li>
<li><p>要使用EasyMock辅助单元测试，添加easymock的jar包即可。</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" data-fancybox="group" data-caption="image-20200402190315174" class="fancybox"><img alt="image-20200402190315174" style="zoom:40%;" title="image-20200402190315174" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200402190315174.png" class="lazyload"></a>

</li>
</ol>
<hr>
<h2 id="二、EasyMock使用"><a href="#二、EasyMock使用" class="headerlink" title="二、EasyMock使用"></a>二、EasyMock使用</h2><p>通过EasyMock，我们可以为指定的接口动态地创建Mock对象，并利用Mock对象来模拟协同模块或领域对象，从而使单元测试顺利进行。此过程可划分为以下步骤：</p>
<ul>
<li>使用EasyMock生成Mock对象</li>
<li>设定Mock对象的预期行为和输出</li>
<li>将Mock对象切换到Replay状态</li>
<li>调用Mock对象方法进行单元测试</li>
<li>对Mock对象的行为进行验证</li>
</ul>
<h3 id="2-1-使用EasyMock生成Mock对象"><a href="#2-1-使用EasyMock生成Mock对象" class="headerlink" title="2.1 使用EasyMock生成Mock对象"></a>2.1 使用EasyMock生成Mock对象</h3><p>根据指定的接口或类，EasyMock能动态地创建Mock对象。</p>
<h4 id="2-1-1-为接口生成Mock对象"><a href="#2-1-1-为接口生成Mock对象" class="headerlink" title="2.1.1 为接口生成Mock对象"></a>2.1.1 为接口生成Mock对象</h4><p><font class="fb">Eg：以<code>ResultSet</code>接口为例</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">ResultSet</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.<span class="function">String <span class="title">getString</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">int</span> arg0)</span> <span class="keyword">throws</span> java.sql.SQLException</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>通常，构建一个真实的 <code>RecordSet</code> 对象需要经过一个复杂的过程：在开发过程中，开发人员通常会编写一个 <code>DBUtility</code> 类来获取数据库连接 <code>Connection</code>，并利用 <code>Connection</code> 创建一个 <code>Statement</code>。执行一个 <code>Statement</code> 可以获取到一个或多个 <code>ResultSet</code> 对象。这样的构造过程复杂并且依赖于数据库的正确运行。数据库或是数据库交互模块出现问题，都会影响单元测试的结果。</p>
</li>
<li><p>我们可以使用 EasyMock 动态构建 <code>ResultSet</code> 接口的 Mock 对象来解决这个问题。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">import</span> org.easymock.Easymock; <span class="comment">//静态方法引入</span></span><br><span class="line">ResultSet mockResultSet = createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>或</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.easymock.Easymock; </span><br><span class="line">ResultSet mockResultSet = Easymock.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-2-为类生成Mock对象"><a href="#2-1-2-为类生成Mock对象" class="headerlink" title="2.1.2 为类生成Mock对象"></a>2.1.2 为类生成Mock对象</h4><p>EasyMock默认只支持为接口生成Mock对象，若要为类生成Mock对象，需下载扩展包<code>EasyMock Class Extension</code>，在对具体类进行模拟时，只需把 <code>org.easymock.EasyMock</code>替换为 <code>org.easymock.classextension.Easymock</code>。</p>
<h4 id="2-1-3-使用IMocksControl对象管理Mock对象"><a href="#2-1-3-使用IMocksControl对象管理Mock对象" class="headerlink" title="2.1.3 使用IMocksControl对象管理Mock对象"></a>2.1.3 使用IMocksControl对象管理Mock对象</h4><p>若在相对复杂的测试用例中使用多个Mock对象，可使用EasyMock提供的生成和管理Mock对象的机制。</p>
<p>EasyMock类的<code>createControl</code>方法能创建一个接口<code>IMocksControl</code>的对象，此对象能创建并管理多个Mock对象。</p>
<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createControl();</span><br><span class="line">java.sql.Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">java.sql.ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-设定Mock对象的预期行为和输出"><a href="#2-2-设定Mock对象的预期行为和输出" class="headerlink" title="2.2 设定Mock对象的预期行为和输出"></a>2.2 设定Mock对象的预期行为和输出</h3><ol>
<li><p>在一个完整测试中，一个Mock对象会经历两个状态：Record状态和Replay状态。</p>
<p>Mock对象一经创建，状态为Record，Record状态下用户可以设定Mock对象的预期行为和输出，这些对象行为会被录制下来，保存在Mock对象中。</p>
</li>
<li><p>添加Mock对象行为的过程分为三步：</p>
<ul>
<li>对Mock对象的特定方法作出调用</li>
<li>通过org.easymock.EasyMock提供的静态方法expectLastCall获取上一次方法调用所对应的IExpectionSetters实例</li>
<li>用过IExpectionSetters实例设定Mock对象的预期输出（有两种类型）<ul>
<li>产生返回值</li>
<li>抛出异常</li>
</ul>
</li>
</ul>
<p>（Mock对象的行为可简单理解为Mock对象的调用和方法调用所产生的输出。）</p>
</li>
</ol>
<h4 id="2-2-1-设定预期返回值"><a href="#2-2-1-设定预期返回值" class="headerlink" title="2.2.1 设定预期返回值"></a>2.2.1 设定预期返回值</h4><p>设定返回值对应接口<code>IExpectionSetters</code>的<code>andReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andReturn</span><span class="params">(T value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<h5 id="2-2-1-1-返回值不是void"><a href="#2-2-1-1-返回值不是void" class="headerlink" title="2.2.1.1 返回值不是void"></a>2.2.1.1 返回值不是void</h5><ol>
<li><p><font class="fb">Eg：仍用 <code>ResultSet</code> 接口的 Mock 对象为例，若希望方法 <code>mockResultSet.getString(1)</code> 的返回值为 “My return value”，则：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">EasyMock.expectLastCall().andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>

<p> <font class="fb">或：</font></p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若希望 <strong>某方法的调用总是返回一个相同的值</strong> ，为避免每次调用都为Mock对象的行为进行一次设定，可用默认返回值的方法——<code>andSubReturn</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubReturn</span><span class="params">(Object value)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：假设我们创建了 <code>Statement</code> 和 <code>ResultSet</code> 接口的 Mock 对象 mockStatement 和 mockResultSet，在测试过程中，我们希望 mockStatement 对象的 <code>executeQuery</code> 方法总是返回 mockResultSet，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>)).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h5 id="2-2-1-2-返回值为void"><a href="#2-2-1-2-返回值为void" class="headerlink" title="2.2.1.2 返回值为void"></a>2.2.1.2 返回值为void</h5><p>若方法的返回值类型为void，则对于此类方法，我们无需设定返回值，只需设置调用次数就可以。（也可以不设置）</p>
<p>How设定调用次数，详看2.2.3。</p>
<p><font class="fb">Eg：以 <code>ResultSet</code> 接口的 <code>close</code> 方法为例，假设在测试过程中，该方法被调用3至5次，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.close();</span><br><span class="line">EasyMock.expectLastCall().times(<span class="number">3</span>,<span class="number">5</span>);<span class="comment">// 最新版本的EasyMock可以忽略此句</span></span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResult.close()).times(<span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-2-设定预期异常抛出"><a href="#2-2-2-设定预期异常抛出" class="headerlink" title="2.2.2 设定预期异常抛出"></a>2.2.2 设定预期异常抛出</h4><p>设定预期抛出异常对应接口<code>IExpectionSetters</code>的<code>andThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IExpectationSetters&lt;T&gt; <span class="title">andThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>类似的，设定抛出默认异常对应接口<code>IExpectionSetters</code>的<code>andStubThrow</code>方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">andStubThrow</span><span class="params">(Throwable throwable)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expectLastCall().andThrow(</span><br><span class="line">                <span class="keyword">new</span> MyException(<span class="keyword">new</span> RuntimeException())).anyTimes();</span><br></pre></td></tr></table></figure></div>

<h4 id="2-2-3-设定预期方法调用次数"><a href="#2-2-3-设定预期方法调用次数" class="headerlink" title="2.2.3 设定预期方法调用次数"></a>2.2.3 设定预期方法调用次数</h4><ol>
<li>设定确定的调用次数：通过接口<code>IExpectionSetters</code>的<code>times</code>方法。</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IExpectationSetters&lt;T&gt;times(<span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">Eg：我们希望 mockResultSet 的 <code>getString</code> 方法在测试过程中被调用3次，期间的返回值都是 “My return value”，则：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">expectLastCall().andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">或：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockResultSet.getString(<span class="number">1</span>)).andReturn(<span class="string">"My return value"</span>).times(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设定非准确调用次数：<ul>
<li><code>times(int minTimes, int maxTimes)</code>：该方法最少被调用 minTimes 次，最多被调用 maxTimes 次。</li>
<li><code>atLeastOnce()</code>：该方法至少被调用一次。</li>
<li><code>anyTimes()</code>：该方法可以被调用任意次。</li>
</ul>
</li>
</ol>
<h4 id="2-2-4-若返回结果在运行时才能确定"><a href="#2-2-4-若返回结果在运行时才能确定" class="headerlink" title="2.2.4 若返回结果在运行时才能确定"></a>2.2.4 若返回结果在运行时才能确定</h4><p>很可能某个方法期望的返回结果不是固定的，例如根据传入参数不同而不同；这时需要使用<strong>andAnswer</strong>()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockService.execute(EasyMock.anyInt())).andAnswer(<span class="keyword">new</span> IAnswer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">answer</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Integer count = (Integer) EasyMock.getCurrentArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> count * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>​    注意：通过<code>EasyMock.getCurrentArguments()</code>可以获取传入参数！</p>
          </div>



<h3 id="2-3-将Mock对象切换到Replay状态——replay"><a href="#2-3-将Mock对象切换到Replay状态——replay" class="headerlink" title="2.3 将Mock对象切换到Replay状态——replay"></a>2.3 将Mock对象切换到Replay状态——replay</h3><ol>
<li><p>在生成Mock对象和设定Mock对象行为的两个阶段，Mock对象的状态均为Record，此阶段Mock对象会记录用户对预期行为和输出的设定。</p>
</li>
<li><p>在使用Mock对象隐形实际的测试前，需将Mock对象的状态切换为Replay，此阶段Mock对象能根据设定对特定的方法调用作出预期的响应。</p>
</li>
<li><p>将对象切换到Replay状态有两种方法：</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.replay(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.replay();</span><br></pre></td></tr></table></figure></div>

<p>此语句可将通过coltrol的createMock方法生成的所有Mock对象均切换为Replay状态。</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-4-调用Mock对象方法进行单元测试"><a href="#2-4-调用Mock对象方法进行单元测试" class="headerlink" title="2.4 调用Mock对象方法进行单元测试"></a>2.4 调用Mock对象方法进行单元测试</h3><p>此部分放到JUnit+EasyMock实例中。</p>
<h3 id="2-5-对Mock对象的行为进行验证——verify"><a href="#2-5-对Mock对象的行为进行验证——verify" class="headerlink" title="2.5 对Mock对象的行为进行验证——verify"></a>2.5 对Mock对象的行为进行验证——verify</h3><p>在利用Mock对象进行实际的测试过程后，还需对Mock对象的方法调用的次数进行验证。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.verify(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.verify();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象方法的调用次数。</p>
</li>
</ul>
<h3 id="2-6-Mock对象的重用——reset"><a href="#2-6-Mock对象的重用——reset" class="headerlink" title="2.6 Mock对象的重用——reset"></a>2.6 Mock对象的重用——reset</h3><p>为避免生成过多的Mock对象，EasyMock允许对原有的Mock对象进行重用。</p>
<p>可使用reset方法对Mock对象重新初始化。重新初始化后，Mock对象被置为Record状态。</p>
<ul>
<li><p>若Mock对象是通过createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.reset(mockResultSet);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若Mock对象通过createControl方法生成的接口对象control的createMock方法生成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">control.reset();</span><br></pre></td></tr></table></figure></div>

<p>同理，此语句可验证通过coltrol的createMock方法生成的所有Mock对象重新初始化。</p>
</li>
</ul>
<hr>
<h2 id="三、在EasyMock中使用参数匹配器"><a href="#三、在EasyMock中使用参数匹配器" class="headerlink" title="三、在EasyMock中使用参数匹配器"></a>三、在EasyMock中使用参数匹配器</h2><p>使用Mock对象进行实际的测试过程中，EasyMock会根据方法名和参数来匹配一个预期方法的调用。</p>
<p>此时，EasyMock对参数的匹配默认使用equals()方法进行比较，这可能会引起一些问题，因此EasyMock提供了一些参数匹配方式。</p>
<div class="note info">
            <p><font class="fb">如2.2.1.1中创建的mockStatement对象：</font></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockStatement.executeQuery(<span class="string">"SELECT * FROM sales_order_table"</span>);</span><br><span class="line">EasyMock.expectLastCall().andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div><p>实际调用中，可能会遇到SQL语句中某些关键词大小写问题（因为SQL语句不区分大小写）如将SELECT写成select，此时EasyMock采用的默认匹配器equals方法将认为参数不匹配，则Mock对象的预期方法不会被调用。</p>
          </div>

<h3 id="3-1-EasyMock预定义的参数匹配器"><a href="#3-1-EasyMock预定义的参数匹配器" class="headerlink" title="3.1 EasyMock预定义的参数匹配器"></a>3.1 EasyMock预定义的参数匹配器</h3><ol>
<li><p><code>anyObject()</code>：任意输入值都与预期值匹配；</p>
</li>
<li><p><code>aryEq(X value)</code>：通过<code>Arrays.equals()</code>进行匹配，适用于数组对象；</p>
</li>
<li><p><code>isNull()</code>：当输入值为Null时匹配；</p>
</li>
<li><p><code>notNull()</code>：当输入值不为Null时匹配；</p>
</li>
<li><p><code>same(X value)</code>：当输入值和预期值是同一个对象时匹配；</p>
</li>
<li><p><code>lt(X value), leq(X value), geq(X value), gt(X value)</code>：当输入值小于、小等于、大等于、大于预期值时匹配，适用于数值类型；</p>
</li>
<li><p><code>startsWith(String prefix), contains(String substring), endsWith(String suffix)</code>：当输入值以预期值开头、包含预期值、以预期值结尾时匹配，适用于String类型；</p>
</li>
<li><p><code>matches(String regex)</code>：当输入值与正则表达式匹配时匹配，适用于String类型。</p>
<p><font class="fb">例如：若我对mockStatement具体执行的语句并不关注，希望所有输入的字符串都能够匹配这一方法的调用</font></p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(anyObject())).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

<p>详细参阅 <a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<h3 id="3-2-EasyMock自定义参数匹配器"><a href="#3-2-EasyMock自定义参数匹配器" class="headerlink" title="3.2 EasyMock自定义参数匹配器"></a>3.2 EasyMock自定义参数匹配器</h3><ol>
<li><p>预定义的参数匹配器无法满足一些复杂情况，此时需自己定义参数匹配器。</p>
<p><font class="fb">如：在3.1中我们希望有一个匹配器对SQL中关键词的大小写不敏感，使用anyObject其实并不好，此时我们可以自定义参数匹配器SQLEquals。</font></p>
</li>
<li><p>How自定义参数匹配器：</p>
<ul>
<li><p>实现 <code>org.easymock.IArgumentMatcher</code> 接口</p>
<ul>
<li><p><code>matches(Object actual)</code> 方法应当实现输入值和预期值的匹配逻辑</p>
</li>
<li><p><code>appendTo(StringBuffer buffer)</code> 方法可以添加当匹配失败时需要显示的信息</p>
</li>
</ul>
</li>
<li><p>使用静态方法包装实现接口的类</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"><span class="comment">//实现IArgumentMatcher接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//当匹配失败时需要显示的信息</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">		buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输入值和预期值的匹配逻辑</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String)</span><br><span class="line">			<span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//自定义参数匹配器SQLEquals静态方法	</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line">        reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><font class="fb">使用自定义的sqlEquals匹配器：</font></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyMock.expect(mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>))).andStubReturn(mockResultSet);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="四、特殊的Mock对象类型"><a href="#四、特殊的Mock对象类型" class="headerlink" title="四、特殊的Mock对象类型"></a>四、特殊的Mock对象类型</h2><p>上述创建的Mock对象都属于EasyMock默认的Mock对象类型，它对预期方法的调用顺序不敏感，对非预期的方法调用抛出AssertionError。</p>
<p>除此默认类型，EasyMock还提供一些特殊的Mock类型用于支持不同的需求。</p>
<h3 id="4-1-Strick-Mock对象"><a href="#4-1-Strick-Mock对象" class="headerlink" title="4.1 Strick Mock对象"></a>4.1 Strick Mock对象</h3><p>Stick Mock对象——对方法调用的先后顺序敏感，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createStrickMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createStrickMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Stick Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createStrictControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-2-Nice-Mock对象"><a href="#4-2-Nice-Mock对象" class="headerlink" title="4.2 Nice Mock对象"></a>4.2 Nice Mock对象</h3><p>Nice Mock对象——默认返回0，null或false等“无效值”，创建方法如下：</p>
<ol>
<li><p>使用 <code>EasyMock.createNiceMock()</code> 来创建：</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet strickMockResultSet = EasyMock.createNiceMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>类似于createMock，同样可用<code>IMocksControl</code>实例来创建一个Nice Mock对象：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IMocksControl control = EasyMock.createNiceControl();</span><br><span class="line">ResultSet strickMockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h2 id="五、EasyMock-的工作原理"><a href="#五、EasyMock-的工作原理" class="headerlink" title="五、EasyMock 的工作原理"></a>五、EasyMock 的工作原理</h2><p>参阅  <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<hr>
<h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-easymock/" target="_blank" rel="noopener">EasyMock使用方法与原理剖析</a></p>
<p><a href="https://www.iteye.com/blog/skydream-829327" target="_blank" rel="noopener">easymock教程-参数匹配</a></p>
<p><a href="https://blog.csdn.net/vking_wang/article/details/9170979" target="_blank" rel="noopener">【JUnit】EasyMock用法总结</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit+EasyMock测试实例</title>
    <url>/2020/04/03/JUnit+EasyMock%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-EasyMock测试实例"><a href="#JUnit-EasyMock测试实例" class="headerlink" title="JUnit+EasyMock测试实例"></a>JUnit+EasyMock测试实例</h1><h2 id="一、实例一（纯Java）"><a href="#一、实例一（纯Java）" class="headerlink" title="一、实例一（纯Java）"></a>一、实例一（纯Java）</h2><p>要求：</p>
<p>编写一个简单的货币基金选择器，考虑以下几种货币类型：CNY(人民币)、USD(美元)、GBP(英镑)、EUR(欧元)、CAD(加元)，假设基金选择方法每次选择兑换值最高的货币作为投资目标，实验包括对JUnit和EasyMock的使用，最后给出关键的代码截图和测试用例运行结果。</p>
<h3 id="1-1-接口-ExchangeRate"><a href="#1-1-接口-ExchangeRate" class="headerlink" title="1.1 接口 ExchangeRate"></a>1.1 接口 ExchangeRate</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExchangeRate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">(String inputCurrency, String outputCurrency)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-需测试类-Currency-java"><a href="#1-2-需测试类-Currency-java" class="headerlink" title="1.2 需测试类 Currency.java"></a>1.2 需测试类 Currency.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String unit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Currency</span><span class="params">(<span class="keyword">double</span> amount,String unit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.unit=unit;</span><br><span class="line">        setAmount(amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = <span class="keyword">new</span> Double(amount2).longValue();</span><br><span class="line">        <span class="keyword">this</span>.cents=(<span class="keyword">int</span>) amount2*<span class="number">100</span>%<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Currency <span class="title">toChange</span><span class="params">(ExchangeRate converter)</span></span>&#123;</span><br><span class="line">        String[]u=&#123;<span class="string">"CNY"</span>,<span class="string">"USD"</span>,<span class="string">"GBP"</span>,<span class="string">"EUR"</span>,<span class="string">"CAD"</span>&#125;;</span><br><span class="line">        String changeUnit=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">double</span> maxRate=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> temp;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String tempUnit:u)&#123;</span><br><span class="line">                temp=converter.getRate(<span class="keyword">this</span>.unit,tempUnit);</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;maxRate) &#123;</span><br><span class="line">                    changeUnit=tempUnit;</span><br><span class="line">                    maxRate=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(changeUnit.equals(<span class="keyword">this</span>.unit)) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">double</span> input = amount+cents/<span class="number">100.0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Currency(input*maxRate,changeUnit);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Currency)&#123;</span><br><span class="line">            Currency other =(Currency) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.unit.equals(other.unit) &amp;&amp; <span class="keyword">this</span>.amount==other.amount &amp;&amp; <span class="keyword">this</span>.cents==other.cents;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.amount+<span class="string">"."</span>+cents+<span class="string">" "</span>+unit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-3-测试类"><a href="#1-3-测试类" class="headerlink" title="1.3 测试类"></a>1.3 测试类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Currency testObject=<span class="keyword">new</span> Currency(<span class="number">2.5</span>,<span class="string">"USD"</span>);</span><br><span class="line">        Currency expected=<span class="keyword">new</span> Currency(<span class="number">3.75</span>,<span class="string">"EUR"</span>);</span><br><span class="line"></span><br><span class="line">        ExchangeRate mockRate= EasyMock.createMock(ExchangeRate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"USD"</span>)).andReturn(<span class="number">1.0</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CNY"</span>)).andReturn(<span class="number">0.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"GBP"</span>)).andReturn(<span class="number">1.1</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"EUR"</span>)).andReturn(<span class="number">1.5</span>);</span><br><span class="line">        EasyMock.expect(mockRate.getRate(<span class="string">"USD"</span>,<span class="string">"CAD"</span>)).andReturn(<span class="number">0.3</span>);</span><br><span class="line">        EasyMock.replay(mockRate);</span><br><span class="line"></span><br><span class="line">        Currency actual=testObject.toChange(mockRate);</span><br><span class="line">        assertEquals(actual,expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <ol><li>Currency类中要覆盖Object的toString方法，是因为assertEquals方法中传入的是两个Currency对象，它会像根据Object的toString方法，将二者转化为String类型，再通过equals方法比较。默认转化为Currency对象的地址。</li><li>Currency类中要覆盖Object的equals方法，是因为Object的equals方法默认按地址比较，而不是内容。</li></ol>
          </div>

<hr>
<h2 id="二、实例二-（模拟JavaEE环境）"><a href="#二、实例二-（模拟JavaEE环境）" class="headerlink" title="二、实例二 （模拟JavaEE环境）"></a>二、实例二 （模拟JavaEE环境）</h2><h3 id="2-1-需测试类-LoginServlet-java"><a href="#2-1-需测试类-LoginServlet-java" class="headerlink" title="2.1 需测试类 LoginServlet.java"></a>2.1 需测试类 LoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">		String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">		String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(password)) &#123;</span><br><span class="line">			ServletContext context = getServletContext();</span><br><span class="line">			RequestDispatcher dispatcher = context.getNamedDispatcher(<span class="string">"dispatcher"</span>);</span><br><span class="line">			dispatcher.forward(req, res);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Login failed."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-测试类-TestLoginServlet-java"><a href="#2-2-测试类-TestLoginServlet-java" class="headerlink" title="2.2 测试类 TestLoginServlet.java"></a>2.2 测试类 TestLoginServlet.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLoginServlet</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> ServletContext context;</span><br><span class="line">    <span class="keyword">private</span> RequestDispatcher dispatcher;</span><br><span class="line">    <span class="keyword">private</span> LoginServlet loginServlet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        request= EasyMock.createMock(HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        context=EasyMock.createMock(ServletContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        dispatcher=EasyMock.createMock(RequestDispatcher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        loginServlet=<span class="keyword">new</span> LoginServlet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.expect(context.getNamedDispatcher(<span class="string">"dispatcher"</span>)).andReturn(dispatcher);</span><br><span class="line">        dispatcher.forward(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        EasyMock.replay(context);</span><br><span class="line">        EasyMock.replay(dispatcher);</span><br><span class="line">        <span class="comment">//匿名类 </span></span><br><span class="line">        loginServlet =<span class="keyword">new</span> LoginServlet()&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> context;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">        EasyMock.verify(context);</span><br><span class="line">        EasyMock.verify(dispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"ad"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="string">"123456"</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginFailed4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"username"</span>)).andReturn(<span class="string">"admin"</span>);</span><br><span class="line">        EasyMock.expect(request.getParameter(<span class="string">"password"</span>)).andReturn(<span class="keyword">null</span>);</span><br><span class="line">        EasyMock.replay(request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loginServlet.doPost(request,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            assertEquals(<span class="string">"Login failed."</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        EasyMock.verify(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note warning">
            <p>测试类中之所以用到匿名类，是因为要测试的代码中使用了getServletContext()方法，此方法是Servlet上下文的方法，此处模拟了环境，也应模拟此方法。</p><p>How使用匿名类？<a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
          </div>

<hr>
<h2 id="三、实例三"><a href="#三、实例三" class="headerlink" title="三、实例三"></a>三、实例三</h2><h3 id="3-1-接口-DBUtility-java"><a href="#3-1-接口-DBUtility-java" class="headerlink" title="3.1 接口 DBUtility.java"></a>3.1 接口 DBUtility.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBUtility</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(Statement stmt)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">closeDBResource</span><span class="params">(ResultSet rs)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-SalesOrders-java"><a href="#3-2-SalesOrders-java" class="headerlink" title="3.2 SalesOrders.java"></a>3.2 SalesOrders.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SalesOrder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-SalesOrderImpl-java"><a href="#3-3-SalesOrderImpl-java" class="headerlink" title="3.3 SalesOrderImpl.java"></a>3.3 SalesOrderImpl.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderImpl</span> <span class="keyword">implements</span> <span class="title">SalesOrder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String orderNumber;</span><br><span class="line">	<span class="keyword">private</span> String region;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> totalPrice;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRegion</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalPrice</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> totalPrice;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span></span>&#123;<span class="keyword">this</span>.orderNumber = orderNumber;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegion</span><span class="params">(String region)</span></span>&#123;<span class="keyword">this</span>.region = region;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPrice</span><span class="params">(<span class="keyword">double</span> totalPrice)</span></span>&#123;<span class="keyword">this</span>.totalPrice = totalPrice;&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDataFromDB</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		orderNumber = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">		region = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">		totalPrice = resultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPriceLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> totalPrice = <span class="keyword">this</span>.getTotalPrice();</span><br><span class="line">		<span class="keyword">double</span> totalPoints = <span class="number">0.0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">"Africa"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Asia Pacific"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.9</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Europe"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.85</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"America"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getRegion()))</span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.8</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			totalPoints = totalPrice * <span class="number">0.75</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (totalPoints &lt; <span class="number">500</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_A"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">1000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_B"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">2000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_C"</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (totalPoints &lt; <span class="number">4000</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_D"</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Level_E"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(<span class="string">"orderNumber = "</span>+orderNumber+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"region = "</span>+region+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"totalPrice = "</span>+totalPrice+<span class="string">"\n"</span>);</span><br><span class="line">		sb.append(<span class="string">"priceLevel = "</span>+<span class="keyword">this</span>.getPriceLevel()+<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-测试-SalesOrderTestCase-java"><a href="#3-4-测试-SalesOrderTestCase-java" class="headerlink" title="3.4 测试 SalesOrderTestCase.java"></a>3.4 测试 SalesOrderTestCase.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.testcase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.expectLastCall;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.demo.matcher.SQLEquals.sqlEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.easymock.EasyMock;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IMocksControl;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.DBUtility;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrder;</span><br><span class="line"><span class="keyword">import</span> org.easymock.demo.domain.SalesOrderImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderTestCase</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSalesOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		IMocksControl control = EasyMock.createControl();</span><br><span class="line">		</span><br><span class="line">		DBUtility mockDBUtility = control.createMock(DBUtility<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Connection mockConnection = control.createMock(Connection<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		Statement mockStatement = control.createMock(Statement<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		ResultSet mockResultSet = control.createMock(ResultSet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mockDBUtility.getConnection();</span><br><span class="line">			EasyMock.expectLastCall().andStubReturn(mockConnection);</span><br><span class="line"></span><br><span class="line">			mockConnection.createStatement();</span><br><span class="line">			expectLastCall().andStubReturn(mockStatement);</span><br><span class="line"></span><br><span class="line">			mockStatement.executeQuery(sqlEquals(<span class="string">"SELECT * FROM sales_order_table"</span>));</span><br><span class="line">			expectLastCall().andStubReturn(mockResultSet);</span><br><span class="line"></span><br><span class="line">			mockResultSet.next();</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">true</span>).times(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="keyword">false</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_001"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_002"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"DEMO_ORDER_003"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getString(<span class="number">2</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Asia Pacific"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"Europe"</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="string">"America"</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			mockResultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">1350.0</span>).times(<span class="number">1</span>);</span><br><span class="line">			expectLastCall().andReturn(<span class="number">5350.0</span>).times(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			control.replay();</span><br><span class="line">			</span><br><span class="line">			Connection conn = mockDBUtility.getConnection();</span><br><span class="line">			Statement stat = conn.createStatement();</span><br><span class="line">			ResultSet rs = stat.executeQuery(<span class="string">"select * from sales_order_table"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			String[] priceLevels = &#123; <span class="string">"Level_A"</span>, <span class="string">"Level_C"</span>, <span class="string">"Level_E"</span> &#125;;</span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">				SalesOrder order = <span class="keyword">new</span> SalesOrderImpl();</span><br><span class="line">				order.loadDataFromDB(rs);</span><br><span class="line">				assertEquals(order.getPriceLevel(), priceLevels[i]);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;			</span><br><span class="line">			control.verify();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-自定义参数匹配器-SQLEquals-java"><a href="#3-5-自定义参数匹配器-SQLEquals-java" class="headerlink" title="3.5 自定义参数匹配器 SQLEquals.java"></a>3.5 自定义参数匹配器 SQLEquals.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.easymock.demo.matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.easymock.EasyMock.reportMatcher;</span><br><span class="line"><span class="keyword">import</span> org.easymock.IArgumentMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLEquals</span> <span class="keyword">implements</span> <span class="title">IArgumentMatcher</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String expectedSQL = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SQLEquals</span><span class="params">(String expectedSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.expectedSQL = expectedSQL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTo</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">		buffer.append(<span class="string">"SQLEquals(\""</span> + expectedSQL + <span class="string">"\")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object actualSQL)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (actualSQL == <span class="keyword">null</span> &amp;&amp; expectedSQL == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (actualSQL <span class="keyword">instanceof</span> String)</span><br><span class="line">			<span class="keyword">return</span> expectedSQL.equalsIgnoreCase((String) actualSQL);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sqlEquals</span><span class="params">(String in)</span> </span>&#123;</span><br><span class="line">        reportMatcher(<span class="keyword">new</span> SQLEquals(in));</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/chengqiuming/article/details/91352913" target="_blank" rel="noopener">Java的匿名内部类</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>EasyMock</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit测试实例</title>
    <url>/2020/03/31/JUnit%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="JUnit-测试实例"><a href="#JUnit-测试实例" class="headerlink" title="JUnit 测试实例"></a>JUnit 测试实例</h1><h2 id="一、-实验要求"><a href="#一、-实验要求" class="headerlink" title="一、 实验要求"></a>一、 实验要求</h2><p>对Rectangle程序进行测试：根据已经学习的测试思想，对函数getArea()、getPerimeter()和findMax()进行测试。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length*width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">2</span>*length + width;&#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">                maxIndex = i;</span><br><span class="line">        <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;;</span><br><span class="line">        System.out.println(<span class="string">"面积最大："</span>+findMax(arr, <span class="keyword">new</span> areaCompare()).getObject());</span><br><span class="line">        System.out.println(<span class="string">"周长最长："</span>+findMax(arr, <span class="keyword">new</span> perimeterCompare()).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note primary">
            <p>若对代码中实现比较器的写法不理解，请看“四、参考文献” <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
          </div>



<h2 id="二、测试过程"><a href="#二、测试过程" class="headerlink" title="二、测试过程"></a>二、测试过程</h2><h3 id="2-1-测试getArea-方法——返回矩形面积"><a href="#2-1-测试getArea-方法——返回矩形面积" class="headerlink" title="2.1 测试getArea()方法——返回矩形面积"></a>2.1 测试getArea()方法——返回矩形面积</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length*width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>根据Rect类可得成员变量length、width为int型，含义为矩形的长宽，故合法输入为正数，负数和0位非法输入。</p>
<p>此处假设非法输入返回值为-1。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectArea</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width, <span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getArea方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:&#123;0&#125;*&#123;1&#125;=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>,-<span class="number">3</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">5</span>,-<span class="number">6</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getArea(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx1.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length,width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(3,4)</td>
<td align="center">12</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(4,-3)</td>
<td align="center">-1</td>
<td align="center">-12</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-5,-6)</td>
<td align="center">-1</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>由此可见，此方法代码并没有考虑输入为0和负数的非法情况。</p>
</li>
</ol>
<hr>
<h3 id="2-2-测试getPerimeter-方法——返回矩形周长"><a href="#2-2-测试getPerimeter-方法——返回矩形周长" class="headerlink" title="2.2 测试getPerimeter()方法——返回矩形周长"></a>2.2 测试getPerimeter()方法——返回矩形周长</h3>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*length + width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li><p>测试分析</p>
<p>同理于测试getArea()，此处需要的参数只有length、width，所以考虑负数和0的非法输入。</p>
<p>设计测试用例如下：   </p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectPerimeter</span><span class="params">(<span class="keyword">int</span> length,<span class="keyword">int</span> width,<span class="keyword">int</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length=length;</span><br><span class="line">        <span class="keyword">this</span>.width=width;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设要测试的getPerimeter方法遇到非法输入时返回-1</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:(&#123;0&#125;+&#123;1&#125;)*2=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object []&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">22</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPerimeter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(<span class="keyword">new</span> Rect(length,width).getPerimeter(),expected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx2.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例（length，width）</th>
<th align="center">预期结果（返回值）</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(5,6)</td>
<td align="center">22</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-3,4)</td>
<td align="center">-1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(3,-4)</td>
<td align="center">-1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(-3,-4)</td>
<td align="center">-1</td>
<td align="center">-10</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">(3,0)</td>
<td align="center">-1</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">(0,4)</td>
<td align="center">-1</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">(0,0)</td>
<td align="center">-1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>可见，方法代码并没有考虑输入为0和负数的非法情况，且计算过程存在问题，返回去看代码发现没有加括号，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(length+width);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h3 id="2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象"><a href="#2-3-测试findMax-方法——返回矩形数组中面积or周长最大的矩形对象" class="headerlink" title="2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象"></a>2.3 测试findMax()方法——返回矩形数组中面积or周长最大的矩形对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">        <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)</span><br><span class="line">            maxIndex = i;</span><br><span class="line">    <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-3-1-比较器areaCompare——比较面积"><a href="#2-3-1-比较器areaCompare——比较面积" class="headerlink" title="2.3.1 比较器areaCompare——比较面积"></a>2.3.1 比较器areaCompare——比较面积</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getArea() &lt; o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>需要参数length、width，所以考虑负数和0的非法输入。</p>
<p>需注意⚠️：若比较面积时输入的矩形数组都为非法输入（矩形长宽都存在0或负数），getArea()因为非法输入都return -1，则areaCompare比较器中比较函数compare都会return 0，则findMax中return arr[0]，返回一个非法矩形，显然错误。故此处findMax也要有一个对应非法输入时的输出，假设为null。</p>
<p>设计测试用例如下：</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxArea</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxArea</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">20</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.areaCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx3.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(10,20)</td>
<td align="center">(3,10)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(0,3)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(0,3)</td>
</tr>
</tbody></table>
<p>可见，代码没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况，且通过第一个测试用例可知，计算过程存在问题，返回去看代码发现areaCompare比较器中比较函数compare存在逻辑错误，应返回最大矩形对象，却返回最小矩形对象，应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h4 id="2-3-2-比较器perimeterCompare——比较周长"><a href="#2-3-2-比较器perimeterCompare——比较周长" class="headerlink" title="2.3.2 比较器perimeterCompare——比较周长"></a>2.3.2 比较器perimeterCompare——比较周长</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>测试分析</p>
<p>同理于areaCompare，需要参数length、width，所以考虑负数和0的非法输入；设置null为全非法输入的返回值。<br>设计测试用例</p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectFindMaxPerimeter</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect[] arr;</span><br><span class="line">    <span class="keyword">private</span> Rect expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRectFindMaxPerimeter</span><span class="params">(Rect[] arr,Rect expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr=arr;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">2</span>,<span class="number">65</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">4</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">5</span>, -<span class="number">6</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(-<span class="number">10</span>, -<span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">new</span> Rect(<span class="number">1</span>,<span class="number">1</span>)&#125;,</span><br><span class="line">                &#123;<span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">3</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">0</span>),</span><br><span class="line">                        <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Rect(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">                &#125;,<span class="keyword">null</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Rect temp=Rect.findMax(arr, <span class="keyword">new</span> Rect.perimeterCompare());</span><br><span class="line">        String stemp,sexpected;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="keyword">null</span>) stemp=temp.getObject();</span><br><span class="line">        <span class="keyword">else</span> stemp=<span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">if</span>(expected!=<span class="keyword">null</span>) sexpected=expected.getObject();</span><br><span class="line">        <span class="keyword">else</span> sexpected=<span class="string">"null"</span>;</span><br><span class="line">        assertEquals(stemp,sexpected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
</ol>
<ol start="3">
<li><p>测试结果</p>
<p><a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx4.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">测试用例Rect[]</th>
<th align="center">预期结果</th>
<th align="center">实际结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">(10,20),(2,65),(3,10),(6,20)</td>
<td align="center">(2,65)</td>
<td align="center">(2,65)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">(-4,3),(5,-6),(-10,-10),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(5,-6)</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">(0,3),(6,0),(0,0),(1,1)</td>
<td align="center">(1,1)</td>
<td align="center">(6,0)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">(0,3),(6,0),(0,0),(-1,-1)</td>
<td align="center">null</td>
<td align="center">(6,0)</td>
</tr>
</tbody></table>
<p>可见代码同样没有考虑输入矩形数组存在矩形长宽非法or全部矩形长宽均非法的情况。</p>
</li>
</ol>
<hr>
<h2 id="三、修改代码"><a href="#三、修改代码" class="headerlink" title="三、修改代码"></a>三、修改代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;<span class="keyword">this</span>.length = length;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;<span class="keyword">this</span>.width = width;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> length*width;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &gt;<span class="number">0</span> &amp;&amp; width &gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>*(length + width);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"("</span>+length+<span class="string">","</span>+width+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType&gt;</span><br><span class="line">    <span class="function">AnyType <span class="title">findMax</span><span class="params">(AnyType[] arr, Comparator&lt;? <span class="keyword">super</span> AnyType&gt; cmp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(cmp.compare(arr[i], arr[maxIndex]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(((Rect)arr[maxIndex]).getLength()&lt;=<span class="number">0</span> || ((Rect)arr[maxIndex]).getWidth()&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> arr[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">areaCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span></span>&#123;</span><br><span class="line">             <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getArea() &gt; o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getArea() == o2.getArea()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">perimeterCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Rect</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Rect o1, Rect o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">if</span>(o1.getPerimeter() &gt; o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o1.getPerimeter() == o2.getPerimeter()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rect[] arr = <span class="keyword">new</span> Rect[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">20</span>), <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">65</span>),</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">10</span>), <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Rect rect1=findMax(arr, <span class="keyword">new</span> areaCompare());</span><br><span class="line">        Rect rect2=findMax(arr, <span class="keyword">new</span> perimeterCompare());</span><br><span class="line">        <span class="keyword">if</span>(rect1 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"面积最大："</span>+rect1.getObject());</span><br><span class="line">        <span class="keyword">if</span>(rect2 == <span class="keyword">null</span>) System.out.println(<span class="string">"输入的矩形数组中所有矩形长宽均非法！"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"周长最长："</span>+rect2.getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为方便测试，使用测试套件Suite，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;TestRectArea<span class="class">.<span class="keyword">class</span>,<span class="title">TestRectPerimeter</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxArea</span>.<span class="title">class</span>,<span class="title">TestRectFindMaxPerimeter</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestRectSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:48%;" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/xx5.png" class="lazyload"></a>

<p>程序执行结果：</p>
<a href="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" data-fancybox="group" data-caption="image-20200331140852779" class="fancybox"><img alt="image-20200331140852779" style="zoom:33%;" title="image-20200331140852779" data-src="https://gitee.com/yijingwang/blogImage/raw/master/img/image-20200331140852779.png" class="lazyload"></a>

<hr>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p> <a href="https://blog.csdn.net/qq_35008612/article/details/80956990" target="_blank" rel="noopener">Comparator接口的使用</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit+idea入门使用</title>
    <url>/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Junit-idea入门使用"><a href="#Junit-idea入门使用" class="headerlink" title="Junit+idea入门使用"></a>Junit+idea入门使用</h1><h2 id="一、Junit配置"><a href="#一、Junit配置" class="headerlink" title="一、Junit配置"></a>一、Junit配置</h2><ol>
<li><p>Intellij idea添加Junit插件</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" data-fancybox="group" data-caption="image-20200326203540257" class="fancybox"><img alt="image-20200326203540257" title="image-20200326203540257" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326203540257.png" class="lazyload"></a></p>
<p>快捷键(command+，)进入preference，在Plugins中搜索Junit，并安装JunitGeneratorV2.0，安装完毕后重启idea。</p>
</li>
<li><p>在需要测试的项目中导入jar包</p>
<p>Hamcrest Core包 <a href="https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core/1.3" target="_blank" rel="noopener">下载地址</a></p>
<p>Junit4包  <a href="https://mvnrepository.com/artifact/junit/junit/4.12" target="_blank" rel="noopener">下载地址</a></p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" data-fancybox="group" data-caption="image-20200326205514332" class="fancybox"><img alt="image-20200326205514332" style="zoom:50%;" title="image-20200326205514332" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205514332.png" class="lazyload"></a>

<p>快捷键（command+；）进入Project Structure，==》model==》Dependencies中添加jar</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" data-fancybox="group" data-caption="image-20200326205637184" class="fancybox"><img alt="image-20200326205637184" title="image-20200326205637184" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326205637184.png" class="lazyload"></a></p>
</li>
<li><p>Junit具体设置，可在preference中查看</p>
<p><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" data-fancybox="group" data-caption="image-20200326210734815" class="fancybox"><img alt="image-20200326210734815" title="image-20200326210734815" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326210734815.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="二、使用Junit进行测试"><a href="#二、使用Junit进行测试" class="headerlink" title="二、使用Junit进行测试"></a>二、使用Junit进行测试</h2><p>Eg：编写简单的计算器，包含加减乘除4个功能，参数为double类型。</p>
<ol>
<li>创建java工程，在src中创建Calculator类，代码如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1,<span class="keyword">double</span> n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.add(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.subtract(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.multiply(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n2==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal a1=<span class="keyword">new</span> BigDecimal(Double.toString(n1));</span><br><span class="line">        BigDecimal a2=<span class="keyword">new</span> BigDecimal(Double.toString(n2));</span><br><span class="line">        <span class="keyword">return</span> a1.divide(a2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <p>​      注：之所以要用上面这种写法，而不用如下代码，是为了避免double的精度误差：</p>
          </div>

</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(Double n1,Double n2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1-n2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>​        具体可查看<a href="https://blog.csdn.net/m0_37450089/article/details/80270893" target="_blank" rel="noopener">java double相对精度误差</a></p>
<ol start="2">
<li><p>创建src同级目录test，并将之设为Test根目录，之后此文件夹会显示为绿色。</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" data-fancybox="group" data-caption="image-20200326211308852" class="fancybox"><img alt="image-20200326211308852" style="zoom:30%;" title="image-20200326211308852" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211308852.png" class="lazyload"></a>
</li>
<li><p>在test目录中编写测试类</p>
<p>选中要测试的类，右键选择Test，或者直接快捷键shift+command+T</p>
<p>点击Create New Test，之后可以设置生成的测试类名，是否有setup等方法，以及要测试的方法</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" data-fancybox="group" data-caption="image-20200326211548128" class="fancybox"><img alt="image-20200326211548128" style="zoom:35%;" title="image-20200326211548128" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211548128.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" data-fancybox="group" data-caption="image-20200326211803437" class="fancybox"><img alt="image-20200326211803437" style="zoom:30%;" title="image-20200326211803437" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211803437.png" class="lazyload"></a>

<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" data-fancybox="group" data-caption="image-20200326211931771" class="fancybox"><img alt="image-20200326211931771" style="zoom:45%;" title="image-20200326211931771" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326211931771.png" class="lazyload"></a>

<p>生成效果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" data-fancybox="group" data-caption="image-20200326212315132" class="fancybox"><img alt="image-20200326212315132" style="zoom:40%;" title="image-20200326212315132" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326212315132.png" class="lazyload"></a>

<p>编写代码如下，点击测试类左侧的小箭头即可运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">2.3</span>,<span class="number">5.4</span>),<span class="number">7.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">3.2</span>,<span class="number">5.3</span>),-<span class="number">2.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">3.1</span>,<span class="number">5.2</span>),<span class="number">16.12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.div(<span class="number">3.2</span>,<span class="number">5.0</span>),<span class="number">0.64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note warning">
            <ol><li>因为不继承TestCase，assertEquals方法来自import static org.junit.Assert.*;此方法已过时。以下提供两种解决方法：</li></ol><ul><li>extends TestCase，以使用TestCase类的assertEquals方法。</li><li>import static org.junit.Assert.*; 使用assertEquals(x1,x2,x3);三个参数的形式，表示判断x1与x2是否在误差x3内相等。 </li></ul><ol start="2"><li>格式规范：</li></ol><ul><li>extends TestCase并在方法前加test</li><li>import org.junit.Test，在测试方法前使用注解@Test（不继承TestCase）</li></ul><p>​        否则会出现如下报错：<br><a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" data-fancybox="group" data-caption="image-20200326213406633" class="fancybox"><img alt="image-20200326213406633" style="zoom:50%;" title="image-20200326213406633" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/image-20200326213406633.png" class="lazyload"></a></p><p>​        这是因为以前版本的JUnit通过命名约定和反射来定位测试用例，要求测试方法以“test”开头+方法名，且测试类需要继承TestCase。JUnit4中简化了这个操作，只需要在测试类中引入org.junit.Test，在测试方法前使用注解@Test，JUnit就可以侦测到此测试方法，保持了代码的简洁。</p><p>​    PS：在JUnit4中仍可以以原来的方式进行测试（继承TestCase并在方法前加test），但这样就没有必要用到注解，因为一旦继承了TestCase，注解就会失效，此时没有test前缀，会报上述错误AssertionFailedError:No tests found……</p>
          </div>



</li>
</ol>
<ol start="4">
<li><p>使用测试套件Suite</p>
<p>​        因为3所说的编写Test类，对于每个测试方法，只能写一个测试用例。则编写多个测试用例就需要写多个测试类。那如何使这些测试类同时一起运行呢？答案是使用Suite。</p>
<p>​        Suite是一种批量运行测试类的方法，以方便我们在每次进行系统测试时，只需执行若干测试套件而不是执行无数测试用例。</p>
<div class="note danger">
            <p>​        测试套件中不仅可以包含基本的测试类，而且可以包含其它的测试套件。但是，一定要保证测试套件之间没有循环包含关系，否则将出现死循环。</p>
          </div>

<p>​        为了演示，此处再编写CalculatorTest2类，代码如下：    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest2</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        calculator =<span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.add(<span class="number">23.0</span>,<span class="number">1.0</span>),<span class="number">24.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.sub(<span class="number">9.8</span>,<span class="number">5.3</span>),<span class="number">4.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(calculator.mul(<span class="number">2.0</span>,<span class="number">6.0</span>),<span class="number">12.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     assertEquals(calculator.div(<span class="number">5.0</span>,<span class="number">0.0</span>),-<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法一：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.TestSuite; </span><br><span class="line"><span class="keyword">import</span> junit.framework.Test; </span><br><span class="line"><span class="keyword">import</span> junit.textui.TestRunner; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> <span class="keyword">extends</span> <span class="title">TestSuite</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//TestSuite功能练习</span></span><br><span class="line">        TestSuite suite = <span class="keyword">new</span> TestSuite(<span class="string">"TestSuite Test"</span>); </span><br><span class="line">        suite.addTestSuite(TestCalculator<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTestSuite(TestCalculator2<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">        suite.addTest(<span class="keyword">new</span> TestCalculator());</span><br><span class="line">        <span class="comment">//添加一个具体的测试用例</span></span><br><span class="line">        suite.addTest(TestSuite.createTest(TestCalculator<span class="class">.<span class="keyword">class</span>,“<span class="title">testAdd</span>”))</span>;</span><br><span class="line">        <span class="keyword">return</span> suite; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">        TestRunner.run(suite()); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* suite方法命名规则如下：</span></span><br><span class="line"><span class="comment">       1）必须以“suite”方法命名；</span></span><br><span class="line"><span class="comment">       2）suite方法的访问修饰权限必须为public；</span></span><br><span class="line"><span class="comment">       3）.suite方法必须为静态方法；</span></span><br><span class="line"><span class="comment">       4）.suite方法必须没有参数。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​    TestSuite写法二（此处我采用了写法二）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Suite</span>.<span class="title">SuiteClasses</span>(</span>&#123;CalculatorTest<span class="class">.<span class="keyword">class</span>,<span class="title">CalculatorTest2</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note info">
            <p>​        @RunWith：当类被@RunWith注解修饰，或者类继承一个被@RunWith注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不是使用JUnit默认的运行器。</p><p>​        在执行JUnit测试引擎的run方法时会调用TestSuite的的run方法，TestSuite在执行自身run方法时会遍历所有TestCase对象的run方法，同一个TestCase子类的run方法会根据自身所包含的测试用例个数被执行相应的次数。</p>
          </div>

<p>​    执行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" style="zoom:45%;" title="6" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/6.jpg" class="lazyload"></a>
</li>
<li><p>参数化测试——使用Parameterized</p>
<p>​        当我们编写了大量的单元测试方法后，我们发现这些方法其实大同小异，只是参数不同（测试边界值或者测试异常值）。在以前的 JUnit版本上，并没有好的解决方法，而现在我们可以使用JUnit提供的参数化测试方式解决这个问题。</p>
<p>​        若要避免一个测试用例写一个测试类的情况，可使用Parameterized，写多个测试用例。</p>
<div class="note info">
            <ol><li>JUnit4通过Parameterized运行器实现参数化测试。@RunWith(parameterized.class)</li><li>提供数据的方法要加@Parameters注解，此方法必须为静态方法（static），且返回一个集合（Collection）。<br> 此处使用了interable接口的写法也🉑️（因为Collection是interable接口的实现，实现了interable接口就可以使用foreach）<br> 为更容易区分参数化测试的每个测试用例，可在@Parameters注解上提供一个名称。此名称可包含占位符，此占位符在运行时将被替换。<ul><li>{index}:当前参数的索引</li><li>{0},{1},……:第一个参数，第二个参数……</li></ul></li><li>当执行参数化测试类时，实例的测试方法和测试数据将在测试示例创建时交叉连接在一起。 </li></ol>
          </div>

<p>​        创建一个类TestCalculator，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(value = Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> numberB;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCalculator</span><span class="params">(<span class="keyword">double</span> numberA,<span class="keyword">double</span> numberB,<span class="keyword">double</span> expected)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberA=numberA;</span><br><span class="line">        <span class="keyword">this</span>.numberB=numberB;</span><br><span class="line">        <span class="keyword">this</span>.expected=expected;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters(name=<span class="string">"&#123;index&#125;:add(&#123;0&#125;+&#123;1&#125;)=&#123;2&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data1()&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">2.0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3.4</span>,<span class="number">5.8</span>,<span class="number">9.2</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        assertEquals(calculator.add(numberA,numberB),expected,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>运行结果如下：</p>
<a href="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" style="zoom:50%;" title="8" data-src="/2020/03/27/Junit-idea%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/8.jpg" class="lazyload"></a>
<div class="note warning">
            <p>若测试只需单个参数，则无需将其包装为数组，此情况可提供一个迭代器或对象数组。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;? extends Object&gt; data() &#123;</span><br><span class="line">     <span class="keyword">return</span> Arrays.asList(<span class="string">"first test"</span>, <span class="string">"second test"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>​    或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object[] data() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Object[] &#123; <span class="string">"first test"</span>, <span class="string">"second test"</span> &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
          </div>

</li>
</ol>
<h2 id="三、more-about-Junit"><a href="#三、more-about-Junit" class="headerlink" title="三、more about Junit"></a>三、more about Junit</h2><ol>
<li>Junit注解</li>
</ol>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试注解，标记一个方法可以作为一个测试用例。</td>
</tr>
<tr>
<td>@Before</td>
<td>Before注解表示，该方法必须在类中的每个测试之前执行,以便执行某些必要的先决条件。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>BeforeClass注解指出这是附着在静态方法必须执行一次并在类的所有测试之前，这种情况一般用于测试计算、共享配制方法(如数据库连接)。</td>
</tr>
<tr>
<td>@After</td>
<td>After注释表示，该方法在每项测试后执行（如执行每一个测试后重置某些变量，删除临时变量等）。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>当需要执行所有测试在JUnit测试用例类后执行，AlterClass注解可以使用以清理一些资源（如数据库连接），注意：方法必须为静态方法。</td>
</tr>
<tr>
<td>@Ignore</td>
<td>当想暂时禁用特定的测试执行可以使用这个注解，每个被注解为@Ignore的方法将不再执行。</td>
</tr>
<tr>
<td>@Runwith</td>
<td>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。</td>
</tr>
<tr>
<td>@Parameters</td>
<td>用于使用参数化功能。</td>
</tr>
<tr>
<td>@SuiteClasses</td>
<td>用于套件测试。</td>
</tr>
</tbody></table>
<ol start="2">
<li>Junit断言</li>
</ol>
<table>
<thead>
<tr>
<th>断言</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void assertEquals([String message],expected value,actual value)</td>
<td>断言两个值相等。值类型可能是int，short，long，byte，char，Object，第一个参数是一个可选字符串消息</td>
</tr>
<tr>
<td>void assertTrue([String message],boolean condition)</td>
<td>断言一个条件为真</td>
</tr>
<tr>
<td>void assertFalse([String message],boolean condition)</td>
<td>断言一个条件为假</td>
</tr>
<tr>
<td>void assertNotNull([String message],java.lang.Object object)</td>
<td>断言一个对象不为空（null）</td>
</tr>
<tr>
<td>void assertNull([String message],java.lang.Object object)</td>
<td>断言一个对象为空（null）</td>
</tr>
<tr>
<td>void assertSame([String message],java.lang.Object expected,java.lang.Object actual)</td>
<td>断言两个对象引用相同的对象</td>
</tr>
<tr>
<td>void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)</td>
<td>断言两个对象不是引用同一个对象</td>
</tr>
<tr>
<td>void assertArrayEquals([String message],expectedArray,resultArray)</td>
<td>断言预期数组和结果数组相等，数组类型可能是int，short，long，byte，char，Object</td>
</tr>
</tbody></table>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><p><a href="https://blog.csdn.net/mattlinsheep/article/details/7225334" target="_blank" rel="noopener">JUnit4使用手册</a><br><a href="https://blog.csdn.net/w605283073/article/details/80051229" target="_blank" rel="noopener">JUnit4 参数化测试（Parameterized tests）</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>Java</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<style type="text/css">
span.r{background-color:#fbbaba;} /* 红色荧光笔 */
span.b{background-color:#aecdea;} /* 蓝色荧光笔 */
span.y{background-color:yellow;}  /* 黄色荧光笔 */
font.fr{color:red;}               /* 红色字 */ 
font.fg{color:#5a9d3d;}           /* 绿色字 */    
font.fb{color:#03acac;}           /* 蓝色字 */
</style>


<h1 id="第1章-数据结构绪论"><a href="#第1章-数据结构绪论" class="headerlink" title="第1章 数据结构绪论"></a>第1章 数据结构绪论</h1><p><strong>数据结构:</strong> 是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<h2 id="1-4-基本概念和术语"><a href="#1-4-基本概念和术语" class="headerlink" title="1.4 基本概念和术语"></a>1.4 基本概念和术语</h2><ol>
<li><strong>数据:</strong> 是<span class="y">描述客观事物的符号</span>，是计算机中可操作的对象，是能<u>被计算机识别</u>，并<u>输入给计算机处理的符号集合</u>。</li>
<li><strong>数据元素（记录）:</strong> 是<span class="y">组成数据</span>的、有一定意义的基本单位，在计算机中通常作为整体处理。</li>
<li><strong>数据项:</strong> 一个<span class="y">数据元素可由若干个数据项组成</span>。  </li>
<li><strong>数据对象:</strong> 是<span class="y">性质相同的数据元素的集合</span>，是<span class="r">数据的子集</span>。  <ul>
<li>性质相同—数据元素<u><strong>具有相同数量和类型</strong></u>的数据项。  </li>
<li>在不产生混淆的情况下，简称数据。</li>
</ul>
</li>
<li><strong>数据结构：</strong> 是<span class="y">相互之间存在一种或多种特定关系的数据元素的集合。</span>即数据具有<u>组织形式</u>。<ul>
<li><strong>逻辑结构：</strong> 指<span class="y">数据对象中数据元素之间的相互关系。</span> 分为以下四种：<ul>
<li><strong>集合结构：</strong> 数据元素间关系只有<span class="b">“同属于一个集合”</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-18-24.png" class="lazyload"></a></li>
<li><strong>线性结构：</strong> 数据元素之间是<span class="b">一对一关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-23-38.png" class="lazyload"></a></li>
<li><strong>树形结构：</strong> 数据元素之间存在<span class="b">一对多的层次关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-29.png" class="lazyload"></a></li>
<li><strong>图形结构：</strong> 数据元素之间存在<span class="b">多对多关系</span>。<br>  <a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-26-53.png" class="lazyload"></a><br>PS：用示意图表示数据的逻辑结构时：</li>
<li>将每个数据元素看做一个结点，用圆圈表示。</li>
<li>元素之间的逻辑关系用结点之间的连线表示，若此关系有方向就带上箭头。<ul>
<li><strong>物理结构（存储结构）：</strong> 指<span class="y">数据的逻辑结构在计算机中的存储形式。</span>  </li>
</ul>
</li>
<li>数据是数据元素的集合，则物理结构就是<span class="r">如何把数据元素存储到计算机存储器中</span>。</li>
<li>存储结构应正确反映元素间的逻辑关系。有以下两种：<ul>
<li><strong>顺序存储结构：</strong> 将数据元素存放在<span class="b">地址连续的存储单元</span>。<br><span class="r">数据间的逻辑关系与物理关系一致</span>。<font class="fb">Eg：数组</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-43-01.png" class="lazyload"></a></li>
<li><strong>链式存储结构：</strong> 将数据元素存放在<span class="b">任意的存储单元</span>，存储单元可以连续可以不连续。<br><span class="r">数据元素的物理关系不能反映逻辑关系</span>，所以需一个 <strong>指针</strong> 存放数据元素的地址，则可通过地址找到相关联数据元素的位置。<font class="fb">Eg：链表</font><br><a href="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/04/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/2020-03-04-21-47-38.png" class="lazyload"></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>总结：</p>
<ul>
<li><span class="r"><strong>数据项是数据不可分割的最小单位。</strong></span></li>
<li>数据项组成数据元素（记录），数据元素组成数据。<br><font class="fb">Eg：人类是数据，人是数据元素，眼、耳、口、鼻等是数据项。</font><ul>
<li>数据对象是相同数据元素的集合，数据结构是相互间存在某关系的数据元素的集合。<br><font class="fb">Eg:人都有姓名、生日、性别等相同的数据项，这些数据项的集合为数据对象。</font></li>
<li>研究数据结构的意义：分析待处理对象的性质及各处理对象之间存在的关系，以编写好的程序。</li>
<li>数据结构分为逻辑结构、物理结构。<br>逻辑结构—数据对象中数据元素之间的关系，分为集合结构、线性结构、树形结构、图形结构</li>
</ul>
</li>
</ul>
<p>　</p>
<p>　</p>
]]></content>
  </entry>
</search>
